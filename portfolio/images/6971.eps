%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1512.i120.001.S.m007.c10.book concept.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: kot
%%CreationDate: 12/16/2015
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 14164 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDCAFFC9CDFD7EFFCEC6FD78FFCACECFFFFFFFCFCF
%FD78FFCFC6CFFD09FFCFCFFD72FFCAFECFFD04FFCFCFFFFFFFC6CDFD73FF
%CEFD05FFCFFD04FFCCC8FD6BFF845AFD0CFFCECFFFFFFFC6CDFD63FFCAFD
%07FF7EA9FD0CFFC7CFFFFFFFCFCFFD63FFC2A0FD07FFA8FD0BFFC9FEC7FD
%08FFAF60AFFD5DFFCACFFD08FFCFFD09FFCFCCC6FECEFD06FF8B60853CFD
%67FFCFCAFFFFFFCFFFCFCFC9CCFD04C6C7CFCAFFCFFF6085AF3CA8FD66FF
%C7FD05FFCFCEC7FEC6FEC6CCC6FEC6CECFFFFFFF60616061AFFFFFFFCFFD
%5AFFCAFFFFFFCFCFC7C6A5CFCFFD05FFC9CCC6C6C6FEC8FD06FF8560FF60
%85FFFFC8C7CFFD58FFC2C8C2CFFFFFC9C7C6C6C8CFFD07FFCCC6FECEFD07
%FFAF61AFFFAFFFFFCFC8FD58FFA7C8CAC9A0FFFFFFCAC7C9FD09FFCAC6C7
%FD09FFA8FD5AFFA8FD04FFCEC8FD07FFCEFD0BFFC7CFFFFFCDFD60FF7D52
%52FFFFFFC2C8C1C8FD0EFFA8FFFFCECFFFCAFECFFD05FFCACFFD58FF7DFF
%A87DFFCFC8CAFFCAFD0DFF3B66FFFFCFFFFFFFC7FFFF7DA8FFFFCA99FD05
%FFA8FD52FF527D52A8FFCFC2FD06FFC2C9FD07FF8419198AFFCFCFFD05FF
%52A8FFFFCACAFD05FF7D7DFD52FF7DA8FD08FFCFC2BAC1C9FD06FF3C1342
%3CFD61FFA984AFA9AFAFFD07FFC7CDFFFFA0BB99CAFD05FF8A133B3B3C60
%FD0BFFA8A8A8FD06FFA87DA8FD47FF84601360608A608584FD06FFCDC9FF
%FFFFC2FD07FF3B3B193C3B42AFFD04FFCECFFFFFFFA87D7DFD05FFA87D7D
%A87D7DA8FD44FF5F19123B5F895F85608460FD11FF8419133B3B3C198AFD
%04FFC6CEFFFFFF7D7DFD06FF7D7DFFFFFF847DFD43FF843A133B6060608B
%848A838A84FD10FF60133B3B423B423CFD04FFCCCEFFFFFFA87D7DFD05FF
%59FD05FF7DA8FD41FFA8FD043A6036605A8A838A838A84FD08FFCFCFFD04
%FFAF133B133B3B3C3B3C84FFFFFFCEFD05FFA8A8FD04FFA884AFAFFFFFFF
%A87DFD41FF8A183B3B3C5A6160605F8A848A838AAFFD06FFCFC6FECFFFFF
%FF6019193B13423C423B8AFD10FF7DAFAEFFFFFF7DA8FD41FF3A3A121436
%6036603B5F5F84838A5FAEFD06FFC8C6C6CEFFFFFF60123B133B3B3C3B3C
%3BFD07FFCFCECFFD06FF7D84AFAEFFA85252A1A8FD3FFF3B133C143C6061
%60605F895F8A838AAEFD06FFCEC6FE83AFFFFF193B193B13423C423B42AE
%FD07FFC6CFFD07FF7D59847D7DA8A14B76A1FD3EFF353B133B366036605F
%5F5F655F8960AFFFFFA8AF848B82FEC6A7608B843B133B608460663B3C19
%8BFD06FFCFCCCEFD08FFA87DA8FFFFFFA8525152A8A8FD3BFF3D143B3A60
%60613660605F5F655F60A9FFA985848B85ADC6FE838B8460193B60AFAFAF
%858B3C3C60FD07FFCFFD11FFA1764BA8FD3BFF5A143A3A3A60366036615F
%5F5E60368584858485608582C6C6A7618535193B8585AF858B84601960AF
%FD19FFA8A1A8FD3BFFAF143B3A655F615A6160605F895F60848B858B848B
%85ADC6FE838B8460198584AFAFAF858B84423CFD59FF61133A3A60366036
%61605F5F60608584858485848583C6C6A88585353B608584AF85AF84853B
%3CAFFFA8A8FD14FF7DA8FD40FF60183B3661606136615F60608B848B848B
%848B848BA7AD848B85601384858B8BAF8BAF60423CFFFFA782FFFFFFAEFD
%0FFFA8A87DFD40FFA95F1314366036603661848560858485608584856085
%618560853B19358584AF85AF85601966FFFF5882A8AE58A7FD04FFCFC8A4
%C6C6C8CAFD04FFA87D527DFD41FFAF6061606160AFFFFF848B858B848B5A
%59848B858B848B8560133B3B8585AF8B663B4284FFA7ADA7828283AEFFFF
%FFCFC7FD05C6CDCFFFCAFFFFA87DFFFFFFA8A2A2FD37FFCACAFD0CFFAF84
%8584858452598560858485608B603B133B133C3C423B3C198BFF83A8FF83
%AE82FD04FFC7C6C6A4C6C6C7C7CDC9BBC9FD05FFA8777E7E77FD35FFCA99
%BCA0FD0DFFAFFFFF7D52FFAFFFAFFFAFFFFFAF193B133B193C3B663C3C84
%FF83FFFFFF83ADFFFFFFCFFD05C6CCC8CDC7CECAFD07FF77FFA278FD35FF
%9AC2A7BC9AFD04FFA8525252FD07FF27A8FD08FFA83B133B133B3B3C3B3C
%3BAEFD04FFA882A8FFFFFFC8C69EC6C6C6C7CDC7C7C7FD08FFA27777A2FD
%34FFCABCC3FFC2C2FD04FFA87DFF7D7DFD06FFA852A8FD06FFCFC93B3B19
%3B3B423B663C42A1FD05FFAEFD04FFCDFD04C6C7CDC7CDC7CDFD08FFA878
%A9FD35FFC399BC9ABCA1FD05FF52FF7D7DFFFFCACACAFFFFFFA8FD06FFC3
%993C1319133B3B3C3B3C3CC2BCFD09FFC9C6A4C6C6C8C7CDC7C7C8FD09FF
%77CBFD35FF9ACAC9BC9AFD06FF7D527DAFCA9AC29AC2A1FD09FFBBC23B5E
%5E3B13423C423B66BCBBCAFD08FFCFC6C6C6CCC8CDC7CDC7CFFD09FFA9A8
%FD34FFA1BCCAFFA19AA8FD05FFA87DA8CA92939ABC999A9AFD07FF9ABBBC
%60A481133B3A3C3B3C3BBB92C2FD08FFA5C6A4C7C7C8C7C7C7CEFD05FFCA
%CAFD39FFC29AFFFFCA9AFD09FF93B5A0FFFFCA9ABCC3FD05FFCABBBCC25F
%AB811A81CC3C65828AC1C6BBCAFD06FFCEC6C6C6C7CDC7CDC7CEFD06FFC9
%FD3AFFCAC299BC99C3FD08FF9A939AFD04FFCA99BCCAFD04FFBB92C2BB83
%808213A5A43C5EC683C1C6BC99FD06FFCEA4C6C6C8C7CDC9CFFD06FFC2C9
%FD3CFFCAA1CAFD09FFBC92CAFD05FFC29AFD04FFC9B4BBBBC27DAB811A81
%CC1A89C6A7C0C6BCBCC3FD06FFA7A5CCC7CCC8FD07FFC2C9C9FD48FF9A93
%A1FD05FF9A9AA8FFFFFF9ABA98BC99A7A48113A5A43C5EFE7CC0C6C2C1C2
%CAFD04FFA87DA8A0C8C7FD07FFC2C9A0CFFD48FFC392C2FD04FFCABC9AFF
%FFFFCFC3C0C7BCC3A8CC813CA5CC3682FECAC1C6C1FEC2FD05FFA8527DA8
%CFFD07FFFD04C9CFFD48FFCA9392C2CACAA1BC9ABCA8FFCEFE9AC0C7FFFF
%FFC78136AC823C58FEFFCEC6C8C6C2CAFF84FFFFFF7D7DA8FD07FFC3C2C9
%C9C3FD04FF6084FF5F8AFD41FFCAB592BB93BB9AC29AFFFFCFC6C2C0CDFF
%FFFFCD816760676182C6FFCFCECEFEC2CD8135FD0CFFC9C2C9CAC3CACFFF
%FFFF3B8BFF6060FD34FFA8A8FFFFCACACFFD07FFA893929393BC9AC2CAFF
%C9CC9AC0C7FFFFFF593560666067588159FFFFCFC6C2C77B0C84FD0AFFA7
%C2C2C9A0C9C9FD04FF6035601384FD35FF52FFFFCAC0C8CAFD07FFCABC93
%BB99C39AFFFFCFC6C9C8CEFFFFA85A366760676060608B8BFFCEFEC2CA2E
%3559FD09FFCAC9C2FD04C9CFFD04FF3B60843C60FD39FFCEC0C1C9FD07FF
%5976939399C3FFFFA7C6C9FFA9AF8466606760666066606760678AFFCECA
%2F2F2E35A8FD04FFA82EFFCAC2A0C9C9C9C2C9CAFD04FF3B84FF3B60FD3A
%FFCFC0C0C8FD05FFA82F0C7693BBA1FFAF2E52AF678B608B606760676067
%60676066608B66AF84602F352E84FD04FF592FA7C9C2C9C9CAC2C9C9CFFD
%04FF60AFFF8A84FD3CFFC1C09FCFFFFFFF590C2E0C7D9AC3FF59052E6067
%60666066606660666066606660663C66606766602E2F2EFFFFFF840C52C2
%A0C9C3C9A0C9C9C9CAFD46FFC8C0C1C9FF842E352E352FFFFF840C2E358B
%606760676067606760676067606760676067608B66592E3584FFFF5952C9
%C2C9C9CAC9C9C9CAC9FD3FFFCFCAFD07FFC9C1C0C82E2FFD042E7DA8062E
%2E6060666066606760666067606660666066606660666067352F2E59FFA8
%2EC9C2C3A0C9C9C9A0C9C9C9CFFD3EFFC8CEFD09FFC8C0C7522F2E2F2E59
%2E2E28606667606760676067666760676060606760676067666760592F35
%2EAF59C9C2C9C2C9C9CAC2C9C9CAC9FD3AFFC8CFFFFFC9C8C9FD09FF8475
%C1C92E2F2E2E0C2E282E3567606660663C35356035352F352E6060666060
%356035352E352E2F2E2F52A1C2C9C9C9A0C2C2C9C3CAFD04FFA8FFFFFFCA
%CAFD30FFCDCEFFFFCDC8FD0AFF590C597D7D2E352E352E2E2E59608B6660
%35592F593559355935593560606735592E352E592F592F352E2F2E7DC9CF
%C9C9C2C9C9CACAFFFFFF83AEFFFFFFC9BBFD30FFC9CDFFCEC7FD0AFF8406
%2F2E2E2E2F2E2E2E2F2E2E063535352E352F352F352F352F352F352F5935
%352E352E352E352E2F2E2F2E2E067DC9C9C2FD04C9CFFFFF838AFD04FFCA
%CAFD30FFCFC8CFC8CDCFFD09FF2E2F2E352E2F2E352E2F2E352E2E282E2E
%353559355935593559355935592F5935352E592F352E592E2F2E352E2F52
%CFC2C9C9CAC9C9CAFD3AFFCFC8C7CDC8C8C9FD07FF53FD042E2F2E2E2E2F
%FD042E282E052E2F352F352F352F352F352F352F352F352F2F2E352E2F2E
%2F2E2E2E2F2E2E7C587DFFCACFC9FD3CFFC9CDCEFFC9CDC9FD05FF842F2E
%352E352E352E352E352E352E2F2E2E2F5935593559355935593559355935
%5935592F592F592E352E352E352E352E350C59FD40FFCFC7CFFFFFC9CDC8
%FFFFFFAF2F0C2F2E2E2E2F2E2F2E2F2E2F2E2F2E2E06352F352F352F352F
%352F352F352F352F352F352E352E2F2E2F2E2F2E2F2E2F2E2F0CA8FD3FFF
%CFCDC9FFFFFFCFCFFFFFFF842E2F2E352E2F2E352E2F2E352E2F2E592E2F
%35593559355935593559355935593559355935352E592E2F2E352E352E35
%2E2F2E2F59FD40FFC8CEFD07FFA80C2FFD042E0C340B3411121112118282
%8234352F352F352F352F352F352F352F352F352E352E2F0C340C12111211
%1211340C340C2FA8FD48FF532F2E3512341234123A1234123A123A828382
%5E127D7D35355935593559355935593559357B5835123A1234123A123412
%3A123412340C84FD47FF7E2E0C34111211341112113411121134115E7C83
%1258BBC176352F352F352F352F352F352F587A5712121134111211341112
%113411121112115FAEFD44FFA93512341134123411341234113412341134
%12581258C1C7C0C176352F593559525935592F35347A5734123411341234
%11341234113412341234113AA8FD43FF350B121112111211121112111211
%12111211122D3475C67B7BC6A02E3534354B755135343512337A57111211
%121112111211121112111211121112111283FD41FF5F113AFD07123A1234
%123A1234123A1234123A7A7B59A7823B3A5F51765276523B3A3B347B333B
%1234123A1234123A1234123A1212111812341134A8FD3FFFCFFD04A07C7C
%58583434111211121134111211341112337B4B595EAC3A344B7652525276
%513B343B2E34343B343411121112111211121158587C7CA67CA0A0C2CAFD
%3EFFCFCFCACFC9CFC9C9C3C9C2C87C82343411121234123A3A59517C75AC
%AC5F51769AA1769A9A76523B3458343B343B3A3B1218123458A7A0C9C2C9
%C9CAC9CFCACFC9FD48FFCACFC9C9C2C9A07C3334123A343B3435343B82AC
%57529ABC52359ABC7652343A123B343A123B345F7CC2C2C9C9CACAFFCAFD
%54FFCFCFC9C9A083343B3A3B343B3A82825F34A09AA176A19AA13A3B343B
%3A3B345F7CC9C2CACAFD47FFCFCACACACFCACFCAFFCAFFCFFD0BFFCACAC3
%C27C5F123A343B3458123B7652767D3659763B343A123B58A6C2C9C9FD0D
%FFCAFFCACFCACFCACACACFCAFD32FFC9C9C2C9C2C9C2C9C2C9C2C9C2C9C9
%CACACFCFFD07FFCAC9C2A7343B345F343B34A1529A5960597C343B345F7C
%C9C9CFFD08FFCACFC9C9C3C9C2C9C2C9C2C9C2C9C2C9C2C9FD33FFCAFFCA
%FFCAFFCACFCACFC9CAC3C9C2C2C2C9C2C9C3CACAFD04FFCAC2C8583A123B
%34347652769A769A763A1283C2C9CAFFFFFFCAFFC9C9C2C9C2C2C2C9C3C9
%C9CACACFCAFFCAFFCAFFCFFD46FFCACFC9C9C2C9C2CACAFFFFFFCAC9A05F
%3A3B587C767C767C767C58A7C2CFFFFFFFCFC9C9C2C9C9CFCAFFCFFD40FF
%C9C9C2C9C2C9C2C8C2C9C2C9C2C9C2C9C2C9C3C9C9CAC9CACACFCAC9C2C9
%C2C9CAFFCAC9A05F123A343B343A343B34C2C2FFFFCAC3C9C2C9C9CFCACF
%C9CFC9C9C3C9C2C9C2C9C2C9C2C9C2C9C2C9C2C2C2C9C2C9CFFD2BFFCFC9
%CFCACACACFCACFCACFCACFC9CFC9CAFD04C9C2C9C2C9C2FD05C9C2C9C2CF
%CFC9C25F343B343B3A3B58C9C9FFC9C9C2C9C2C9C9C9C2C9C2C9C2FD06C9
%CAC9CFCACFCACFCACFCACFCACFC9CACAFD28FFCFCFCACFCACAC9CFCACAC9
%CAC9CAC9CAC9CAC9CAC9C9C9CAFD06C9C2C9C2C2C2C9C2C2C2C9C9C9A05F
%123A343B34C9C2C9C2C2C2C9C2C9C2C9C2C9C3FD08C9CAC9CAC9CAC9CAC9
%CAC9CAC9CFCACACACFCACACAFD25FFCFC9CAC9C9C9CAC9CAC9CAC9CAC9CA
%C9CAC9CAC9CAC9CFC9CAC9CFC9CAC9CFC9CAFD04C9C2C9C2C9C2C9A13B34
%3B3AC9C2C9C2C9C2FD04C9CAC9CAC9CFC9CAC9CFC9CAC9CFC9CAC9CAC9CA
%C9CAC9CAC9CAC9CAC9CAFD05C9FD23FFCAC9C9C9CAC9C9C9CAC9C9C9CAC9
%C9C9CAC9C9C9CAC9C9C9CAC9C9C9CAC9C9C9CAC9C9C9CAC9C9C2C9C2C9C2
%C97C3A12A7C2C9C2C9C2C9C3CAC9C9C9CAC9C9C9CAC9C9C9CAC9C9C9CAC9
%C9C9CAC9C9C9CAC9C9C9CAC9C9C9CAFD05C9FD21FFCFC9CAC9CAC9CAC9CA
%C9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CFC9CFC9CFC9CAC9CA
%C9CAC9C9C2C9C2C9585FC2C9C2C9C9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CA
%C9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CAC9CACAFD1FFF
%CAC3C9C3C9C9C9C3C9C9C9C3C9C9C9C3C9C9C9C3C9C9C9C3C9C9C9C3C9A1
%C99AC29AA09AC3A0C2A0FD05C9C2C9C2A77CC9C2C9C3C9C3C9C9C9C3C9C9
%C9C3C9C9C9C3C9C9C9C3C9C9C9C3C9C9C9C3C9C9C9C3C9C9C9C3C9C9C9C3
%C9C9C9C3C9C9FD1DFFCFC2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9
%C2C9C2C9C2C9C2C9C2C9C2BC93B593BC9ABC9AC9C8C9C2C9C3C9C2C9C2C9
%C2C9C3C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9
%C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C9FD1BFFCAC2C9C2C9C2C9C2
%C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C99993939399
%C29ABCA0C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2
%C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2
%C9C2C2C9FD19FFCFC2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9
%C2C9C2C9C2C9C2C9C2C9C9BC93BB93BC9AC29AC3C2C9C2C9C2C9C2C9C2C9
%C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9
%C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9CAFD17FFCFC2C9C2C9C2
%C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C999
%93939399BC9ABCC2C9C2C9C2C9C2C9C2C2C2C9C2C9C2C9C2C9C2C9C2C9C2
%C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2C9C2
%C9C2C9C2C9C2C9C2C9A8FD15FF7D527D527D527D527D527D527D527D527D
%527D527D527D527D527D527D527D527D527D529A93BC93BC9AC39A7D527D
%527D52CAC3C3C3C9C3C3A87D527D527D527D527D527D527D527D527D527D
%527D527D527D527D527D527D527D527D527D527D527D527D527D527D527D
%7DFD13FFA8282E2852282E2852282E2852282E2852282E2852282E285228
%2E2852282E2852282E282E6FB593B599BC9ABC522E28522E2E527D7D7E7D
%7D7D5928522E2E2852282E2852282E2852282E2852282E2852282E285228
%2E2852282E2852282E2852282E2852282E2852282E282E84FD12FF845252
%532E5352532E5352532E5352532E5352532E5352532E5352532E5352532E
%5352532E9A93994C779ABC9A772E532E53525228522E5228522E522E5252
%532E5352532E5352532E5352532E5352532E5352532E5352532E5352532E
%5352532E5352532E5352532E53525228A8FD13FFA8FFA8AFA8FFA8AFA8FF
%A8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AF9ABCA8AF
%A8FFA1BCA1FFA87E282E285228522852285228527DFFA8AFA8FFA8AFA8FF
%A8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AF
%A8FFA8AFA8FFA8AFA8FD3EFFCAFD05FF7D7D52535253525959A8A8FD78FF
%A8FFA8FFAFFDFCFFFDFCFFFDFCFFFDFCFFFD8AFFAFFFFFFFAFFD07FFAFFD
%05FFAFFFFFFFAFFD57FF843560A8601360AF60138484605F84FFFF603B5F
%AF353B84AE5FAF5FAF3560A86035AF603B3BAF3B3B84FD56FF60603BAF3B
%FF3B8A5FFF3BAF1360FFFFFF60AEFF848AAF60843B608A608AFFFF3B8AFF
%60603CAF8A5FFD57FF603B3C8460A8608460A83C84193BFFFFFF3BAFFF84
%5FAF5F8A3B3B5F6084FFAF3B60FF5F3B5FFF8460FD57FF60603BAF5F3B3B
%FF3B3B5FAF606060FFFF843B8AAE3B138A848A6060843C5FAF3B84A86084
%FFFF8B60FD58FF84AFFFFF84FFFFFF84FFAEFFAFAFFFFFFF8A84FFA8AEFF
%FFAEFFA8FF84AEAFAF84AFA8FFFFFFA8FDE9FFA9FD0BFFA8FD62FFA9FFFF
%FFA8AFFD04FFA8FFFFFFA8FD05FFA8FD04FFAFFFFFA9FFFFFFA8FFFFFFA8
%FFFFFFA8FD58FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFA8A9A8FFA8AFA8FD64FFAFFDFCFFFDFCFFFDFC
%FFFDD1FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2015-12-15T23:05:40+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-12-15T23:05:40+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-12-15T23:05:38+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2014 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYqtWWJnaNWBdKc1B3FelcqhnhKRgCDKPMdRfK2RiQLUNQe9S3Bs1DTc&#xA;l2PhXfMHtbJqo4b0wEsnEOfd1/Hc2YBAy9fJE5s2l2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;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&#xA;sVdirsVf/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:2357f1c8-ec2c-482b-9dcc-f81e785ed4dd</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:2357f1c8-ec2c-482b-9dcc-f81e785ed4dd</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>default</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:88e23d66-77d5-4fbc-8ec5-c866564b340f</stRef:instanceID>
            <stRef:documentID>xmp.did:88e23d66-77d5-4fbc-8ec5-c866564b340f</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:470d53af-aed8-4cdb-9d68-4732eed6c64a</stEvt:instanceID>
                  <stEvt:when>2015-11-30T13:27:13+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2357f1c8-ec2c-482b-9dcc-f81e785ed4dd</stEvt:instanceID>
                  <stEvt:when>2015-12-15T23:05:40+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
136.003 269.09 mo
186.462 201.097 li
227.884 280.544 li
136.003 269.09 li
cp
.172549 .372549 .407843 rgb
f
224.675 275.57 mo
268.671 187.128 li
302.04 268.774 li
224.675 275.57 li
cp
.235294 .486275 .529412 rgb
f
252.367 286.886 mo
296.363 198.444 li
322.273 267.313 li
252.367 286.886 li
cp
.2 .431373 .482353 rgb
f
113.982 271.087 mo
159.923 196.533 li
205.863 282.541 li
113.982 271.087 li
cp
f
182.631 274.079 mo
227.062 154.503 li
271.491 285.533 li
182.631 274.079 li
cp
.254902 .54902 .6 rgb
f
409.863 337.822 mo
242.14 337.822 li
239.704 337.822 237.729 339.798 237.729 342.232 cv
233.975 342.667 229.633 342.838 225 342.838 cv
220.366 342.838 216.024 342.667 212.27 342.232 cv
212.27 339.798 210.296 337.822 207.86 337.822 cv
40.1372 337.822 li
36.7798 337.822 34.0586 340.545 34.0586 343.901 cv
34.0586 348.463 li
201.02 348.463 li
204.724 352.489 214.061 355.348 225 355.348 cv
235.939 355.348 245.275 352.489 248.98 348.463 cv
415.941 348.463 li
415.941 343.901 li
415.941 340.545 413.221 337.822 409.863 337.822 cv
cp
.333333 .384314 .439216 rgb
f
225 337.822 mo
409.863 337.822 li
383.164 307.826 li
280.849 303.808 li
264.757 303.155 238.293 303.684 232.449 318.691 cv
225 337.822 li
cp
.996078 .807843 .658824 rgb
f
225 337.822 mo
40.1372 337.822 li
66.8359 307.826 li
169.152 303.808 li
185.243 303.155 211.707 303.684 217.55 318.691 cv
225 337.822 li
f
225 337.822 mo
219.34 323.288 li
53.0752 323.288 li
40.1372 337.822 li
225 337.822 li
1 .701961 .501961 rgb
f
225 337.822 mo
230.66 323.288 li
396.925 323.288 li
409.863 337.822 li
225 337.822 li
cp
f
196.366 323.288 mo
157.137 323.288 li
157.137 320.326 li
196.366 320.326 li
196.366 323.288 li
.894118 .713725 .529412 rgb
f
190.177 352.734 mo
176.752 343.73 li
163.326 352.734 li
163.326 321.807 li
190.177 321.807 li
190.177 352.734 li
cp
.862745 .266667 .215686 rgb
f
176.752 321.807 mo
176.752 343.73 li
190.177 352.734 li
190.177 321.807 li
176.752 321.807 li
cp
.898039 .45098 .407843 rgb
f
370.589 299.758 mo
308.067 296.059 271.946 301.75 251.078 309.601 cv
255.791 307.239 260.743 305.299 265.45 303.729 cv
288.964 295.89 321.54 291.746 359.658 291.746 cv
361.201 291.746 362.451 290.697 362.451 289.404 cv
362.451 288.111 361.201 287.063 359.658 287.063 cv
302.503 287.063 259.947 295.982 238.278 311.473 cv
255.772 290.302 293.31 275.631 336.696 275.631 cv
338.239 275.631 339.489 274.582 339.489 273.289 cv
339.489 271.995 338.239 270.947 336.696 270.947 cv
282.21 270.947 236.498 293.447 225 323.477 cv
213.502 293.447 167.789 270.947 113.303 270.947 cv
111.76 270.947 110.51 271.995 110.51 273.289 cv
110.51 274.582 111.76 275.631 113.303 275.631 cv
156.689 275.631 194.228 290.302 211.721 311.473 cv
190.053 295.982 147.497 287.063 90.3423 287.063 cv
88.7998 287.063 87.5498 288.111 87.5498 289.404 cv
87.5498 290.697 88.7998 291.746 90.3423 291.746 cv
128.46 291.746 161.037 295.89 184.55 303.729 cv
189.255 305.298 194.205 307.237 198.916 309.599 cv
178.05 301.748 141.933 296.059 79.4116 299.758 cv
77.873 299.851 76.7139 300.97 76.8228 302.259 cv
76.9307 303.549 78.2515 304.506 79.8052 304.43 cv
168.732 299.162 201.433 313.551 213.01 322.595 cv
219.027 327.295 222.207 332.718 222.207 338.274 cv
222.207 339.568 223.458 340.616 225 340.616 cv
226.543 340.616 227.793 339.568 227.793 338.274 cv
227.793 332.718 230.973 327.295 236.991 322.595 cv
248.565 313.551 281.264 299.166 370.196 304.43 cv
371.724 304.516 373.069 303.55 373.179 302.259 cv
373.286 300.97 372.128 299.851 370.589 299.758 cv
cp
1 .701961 .501961 rgb
f
235.215 340.646 mo
214.843 340.646 li
214.433 340.646 214.101 340.313 214.101 339.903 cv
214.101 338.565 li
214.101 338.155 214.433 337.822 214.843 337.822 cv
235.215 337.822 li
235.625 337.822 235.958 338.155 235.958 338.565 cv
235.958 339.903 li
235.958 340.313 235.625 340.646 235.215 340.646 cv
cp
1 .517647 .486275 rgb
f
207.974 130.159 mo
208.116 129.316 208.207 128.456 208.207 127.573 cv
208.207 119.038 201.289 112.119 192.755 112.119 cv
187.626 112.119 183.094 114.628 180.282 118.474 cv
178.771 117.65 177.038 117.18 175.194 117.18 cv
170.271 117.18 166.139 120.527 164.921 125.066 cv
161.327 125.066 li
154.945 125.066 149.723 130.289 149.723 136.671 cv
149.723 143.053 154.945 148.274 161.327 148.274 cv
198.386 148.274 li
204.768 148.274 209.989 143.053 209.989 136.671 cv
209.989 134.262 209.244 132.019 207.974 130.159 cv
.584314 .847059 .913725 rgb
f
171.869 94.4741 mo
170.735 94.4741 169.817 93.5552 169.817 92.4209 cv
169.817 89.522 li
169.817 88.3872 170.735 87.4688 171.869 87.4688 cv
173.004 87.4688 173.922 88.3872 173.922 89.522 cv
173.922 92.4209 li
173.922 93.5552 173.004 94.4741 171.869 94.4741 cv
cp
1 .870588 0 rgb
f
194.37 89.0063 mo
183.601 89.0063 li
182.75 89.0063 182.063 88.3184 182.063 87.4688 cv
182.063 86.6191 182.75 85.9312 183.601 85.9312 cv
194.37 85.9312 li
195.22 85.9312 195.907 86.6191 195.907 87.4688 cv
195.907 88.3184 195.22 89.0063 194.37 89.0063 cv
cp
.917647 .356863 .0470588 rgb
f
188.985 94.3906 mo
188.135 94.3906 187.447 93.7031 187.447 92.853 cv
187.447 82.0845 li
187.447 81.2339 188.135 80.5464 188.985 80.5464 cv
189.834 80.5464 190.523 81.2339 190.523 82.0845 cv
190.523 92.853 li
190.523 93.7031 189.834 94.3906 188.985 94.3906 cv
cp
f
281.263 79.8013 mo
276.469 79.8013 li
276.091 79.8013 275.785 79.4951 275.785 79.1172 cv
275.785 78.7383 276.091 78.4326 276.469 78.4326 cv
281.263 78.4326 li
281.641 78.4326 281.947 78.7383 281.947 79.1172 cv
281.947 79.4951 281.641 79.8013 281.263 79.8013 cv
cp
f
278.866 82.1982 mo
278.487 82.1982 278.182 81.8916 278.182 81.5137 cv
278.182 76.7202 li
278.182 76.3423 278.487 76.0356 278.866 76.0356 cv
279.243 76.0356 279.551 76.3423 279.551 76.7202 cv
279.551 81.5137 li
279.551 81.8916 279.243 82.1982 278.866 82.1982 cv
cp
f
164.011 48.6006 mo
158.563 48.6006 li
158.185 48.6006 157.878 48.2949 157.878 47.9165 cv
157.878 47.5381 158.185 47.2324 158.563 47.2324 cv
164.011 47.2324 li
164.389 47.2324 164.695 47.5381 164.695 47.9165 cv
164.695 48.2949 164.389 48.6006 164.011 48.6006 cv
cp
f
161.287 51.3252 mo
160.909 51.3252 160.603 51.019 160.603 50.6406 cv
160.603 45.1929 li
160.603 44.8145 160.909 44.5083 161.287 44.5083 cv
161.665 44.5083 161.971 44.8145 161.971 45.1929 cv
161.971 50.6406 li
161.971 51.019 161.665 51.3252 161.287 51.3252 cv
cp
f
324.312 147.079 mo
318.865 147.079 li
318.486 147.079 318.182 146.772 318.182 146.395 cv
318.182 146.016 318.486 145.709 318.865 145.709 cv
324.312 145.709 li
324.689 145.709 324.996 146.016 324.996 146.395 cv
324.996 146.772 324.689 147.079 324.312 147.079 cv
cp
f
321.589 149.802 mo
321.211 149.802 320.905 149.496 320.905 149.118 cv
320.905 143.67 li
320.905 143.292 321.211 142.986 321.589 142.986 cv
321.968 142.986 322.273 143.292 322.273 143.67 cv
322.273 149.118 li
322.273 149.496 321.968 149.802 321.589 149.802 cv
cp
f
365.666 227.479 mo
360.22 227.479 li
359.841 227.479 359.535 227.172 359.535 226.793 cv
359.535 226.415 359.841 226.109 360.22 226.109 cv
365.666 226.109 li
366.044 226.109 366.352 226.415 366.352 226.793 cv
366.352 227.172 366.044 227.479 365.666 227.479 cv
cp
f
362.941 230.202 mo
362.563 230.202 362.258 229.896 362.258 229.519 cv
362.258 224.071 li
362.258 223.692 362.563 223.387 362.941 223.387 cv
363.32 223.387 363.626 223.692 363.626 224.071 cv
363.626 229.519 li
363.626 229.896 363.32 230.202 362.941 230.202 cv
cp
f
264.684 57.7275 mo
245.399 57.7275 238.124 65.002 238.124 84.2876 cv
238.124 65.002 230.851 57.7275 211.566 57.7275 cv
230.851 57.7275 238.124 50.4541 238.124 31.1689 cv
238.124 50.4541 245.399 57.7275 264.684 57.7275 cv
cp
1 .870588 0 rgb
f
208.961 63.917 mo
199.322 63.917 195.685 67.5527 195.685 77.1924 cv
195.685 67.5527 192.05 63.917 182.41 63.917 cv
192.05 63.917 195.685 60.2803 195.685 50.6406 cv
195.685 60.2803 199.322 63.917 208.961 63.917 cv
cp
.972549 .792157 0 rgb
f
305.738 62.6538 mo
301.44 62.6538 299.818 64.2749 299.818 68.5732 cv
299.818 64.2749 298.198 62.6538 293.899 62.6538 cv
298.198 62.6538 299.818 61.0327 299.818 56.7349 cv
299.818 61.0327 301.44 62.6538 305.738 62.6538 cv
cp
f
256.304 43.7666 mo
255.17 43.7666 254.252 42.8477 254.252 41.7139 cv
254.252 31.8335 li
254.252 30.6992 255.17 29.7803 256.304 29.7803 cv
257.438 29.7803 258.357 30.6992 258.357 31.8335 cv
258.357 41.7139 li
258.357 42.8477 257.438 43.7666 256.304 43.7666 cv
cp
1 .870588 0 rgb
f
273.025 120.17 mo
271.892 120.17 270.973 119.25 270.973 118.116 cv
270.973 112.1 li
270.973 110.967 271.892 110.046 273.025 110.046 cv
274.158 110.046 275.079 110.967 275.079 112.1 cv
275.079 118.116 li
275.079 119.25 274.158 120.17 273.025 120.17 cv
cp
f
189.627 134.932 mo
187.093 134.932 185.04 132.878 185.04 130.344 cv
185.04 109.503 li
185.04 106.969 187.093 104.916 189.627 104.916 cv
192.162 104.916 194.214 106.969 194.214 109.503 cv
194.214 130.344 li
194.214 132.878 192.162 134.932 189.627 134.932 cv
cp
f
216.169 36.7734 mo
215.035 36.7734 214.116 35.8545 214.116 34.7207 cv
214.116 27.6172 li
214.116 26.4829 215.035 25.5645 216.169 25.5645 cv
217.303 25.5645 218.222 26.4829 218.222 27.6172 cv
218.222 34.7207 li
218.222 35.8545 217.303 36.7734 216.169 36.7734 cv
cp
f
236.617 25.5645 mo
235.484 25.5645 234.564 24.645 234.564 23.5107 cv
234.564 19.959 li
234.564 18.8252 235.484 17.9063 236.617 17.9063 cv
237.751 17.9063 238.671 18.8252 238.671 19.959 cv
238.671 23.5107 li
238.671 24.645 237.751 25.5645 236.617 25.5645 cv
cp
f
251.427 80.8062 mo
250.292 80.8062 249.373 79.8867 249.373 78.7524 cv
249.373 73.3193 li
249.373 72.1851 250.292 71.2661 251.427 71.2661 cv
252.56 71.2661 253.479 72.1851 253.479 73.3193 cv
253.479 78.7524 li
253.479 79.8867 252.56 80.8062 251.427 80.8062 cv
cp
f
255.898 103.41 mo
254.765 103.41 253.844 102.491 253.844 101.357 cv
253.844 94.5625 li
253.844 93.4287 254.765 92.5093 255.898 92.5093 cv
257.032 92.5093 257.951 93.4287 257.951 94.5625 cv
257.951 101.357 li
257.951 102.491 257.032 103.41 255.898 103.41 cv
cp
f
175.652 281.849 mo
184.529 275.054 197.294 269.918 212.155 267.44 cv
204.219 256.837 194.383 249.649 172.333 249.649 cv
147.838 249.649 119.666 258.631 112.384 271.087 cv
112.674 271.003 112.979 270.947 113.303 270.947 cv
136.289 270.947 157.7 274.965 175.652 281.849 cv
cp
.0627451 .615686 .34902 rgb
f
336.074 270.955 mo
327.294 259.399 309.55 249.375 289.069 249.375 cv
271.264 249.375 255.526 256.954 245.945 266.526 cv
260.964 268.158 274.235 272.456 284.133 278.479 cv
299.711 273.725 317.367 271.015 336.074 270.955 cv
cp
f
225 323.477 mo
232.502 303.885 254.57 287.504 284.133 278.479 cv
274.235 272.456 260.964 268.158 245.945 266.526 cv
241.555 266.049 237.022 265.793 232.379 265.793 cv
225.345 265.793 218.559 266.373 212.155 267.44 cv
197.294 269.918 184.529 275.054 175.652 281.849 cv
200.255 291.283 218.352 306.115 225 323.477 cv
cp
.203922 .713726 .478431 rgb
f
241.104 298.301 mo
218.684 298.301 li
218.684 274.279 li
241.104 274.279 li
241.104 298.301 li
cp
.898039 .45098 .407843 rgb
f
243.221 294.708 mo
215.897 294.708 li
215.897 298.301 li
243.221 298.301 li
243.221 294.708 li
cp
.537255 .411765 .368627 rgb
f
229.893 261.234 mo
212.484 278.626 li
215.063 281.205 li
229.893 266.374 li
244.724 281.205 li
247.303 278.626 li
229.893 261.234 li
cp
.47451 .333333 .278431 rgb
f
229.893 266.374 mo
221.988 274.279 li
237.798 274.279 li
229.893 266.374 li
cp
.4 .4 .4 rgb
f
226.088 294.708 mo
221.216 294.708 li
221.216 284.557 li
226.088 284.557 li
226.088 294.708 li
cp
.333333 .384314 .439216 rgb
f
237.798 291.963 mo
229.559 291.963 li
229.559 284.557 li
237.798 284.557 li
237.798 291.963 li
cp
.301961 .74902 .85098 rgb
f
237.798 284.557 mo
229.559 284.557 li
229.559 291.963 li
237.798 291.963 li
237.798 284.557 li
cp
236.879 285.476 mo
236.879 291.044 li
230.478 291.044 li
230.478 288.292 230.472 286.563 230.422 285.476 cv
236.879 285.476 li
cp
.333333 .384314 .439216 rgb
f
229.559 282.244 mo
228.004 282.244 226.74 280.979 226.74 279.425 cv
226.74 277.869 228.004 276.604 229.559 276.604 cv
231.111 276.604 232.376 277.869 232.376 279.425 cv
232.376 280.979 231.111 282.244 229.559 282.244 cv
cp
.301961 .74902 .85098 rgb
f
229.559 276.145 mo
227.747 276.145 226.279 277.613 226.279 279.424 cv
226.279 281.234 227.747 282.702 229.559 282.702 cv
231.369 282.702 232.837 281.234 232.837 279.424 cv
232.837 277.613 231.369 276.145 229.559 276.145 cv
cp
229.559 277.064 mo
230.859 277.064 231.918 278.123 231.918 279.424 cv
231.918 280.725 230.859 281.783 229.559 281.783 cv
228.258 281.783 227.199 280.725 227.199 279.424 cv
227.199 278.123 228.258 277.064 229.559 277.064 cv
cp
.333333 .384314 .439216 rgb
f
185.986 255.578 mo
184.549 255.578 li
184.549 266.892 li
185.986 266.892 li
185.986 255.578 li
cp
.47451 .333333 .278431 rgb
f
191.681 254.307 mo
191.681 257.849 188.81 260.719 185.267 260.719 cv
181.726 260.719 178.854 257.849 178.854 254.307 cv
178.854 250.764 181.726 247.893 185.267 247.893 cv
188.81 247.893 191.681 250.764 191.681 254.307 cv
cp
.552941 .764706 .458824 rgb
f
256.304 276.095 mo
254.662 276.095 li
254.662 263.408 li
256.304 263.408 li
256.304 276.095 li
cp
.47451 .333333 .278431 rgb
f
258.693 261.234 mo
258.693 265.909 259.025 269.699 255.482 269.699 cv
252.272 269.698 252.272 265.909 252.272 261.234 cv
252.272 256.56 253.709 252.771 255.482 252.771 cv
257.257 252.771 258.693 256.56 258.693 261.234 cv
cp
.541176 .607843 .0588235 rgb
f
207.761 277.457 mo
193.598 277.457 li
193.598 262.283 li
207.761 262.283 li
207.761 277.457 li
cp
.972549 .792157 0 rgb
f
209.099 275.188 mo
191.837 275.188 li
191.837 277.457 li
209.099 277.457 li
209.099 275.188 li
cp
.4 .4 .4 rgb
f
200.68 254.041 mo
189.68 265.027 li
191.31 266.658 li
200.68 257.288 li
210.049 266.658 li
211.678 265.027 li
200.68 254.041 li
cp
.960784 .505882 .352941 rgb
f
200.68 257.288 mo
195.685 262.283 li
205.673 262.283 li
200.68 257.288 li
cp
.968627 .592157 .117647 rgb
f
198.276 275.188 mo
195.197 275.188 li
195.197 268.774 li
198.276 268.774 li
198.276 275.188 li
cp
.258824 .258824 .258824 rgb
f
205.673 273.454 mo
200.468 273.454 li
200.468 268.774 li
205.673 268.774 li
205.673 273.454 li
cp
.301961 .74902 .85098 rgb
f
200.469 267.313 mo
199.486 267.313 198.687 266.515 198.687 265.532 cv
198.687 264.55 199.486 263.752 200.469 263.752 cv
201.45 263.752 202.248 264.55 202.248 265.532 cv
202.248 266.515 201.45 267.313 200.469 267.313 cv
cp
f
200.468 263.461 mo
199.324 263.461 198.397 264.388 198.397 265.532 cv
198.397 266.677 199.324 267.604 200.468 267.604 cv
201.612 267.604 202.54 266.677 202.54 265.532 cv
202.54 264.388 201.612 263.461 200.468 263.461 cv
cp
200.468 264.042 mo
201.29 264.042 201.958 264.711 201.958 265.532 cv
201.958 266.354 201.29 267.022 200.468 267.022 cv
199.646 267.022 198.978 266.354 198.978 265.532 cv
198.978 264.711 199.646 264.042 200.468 264.042 cv
cp
.333333 .384314 .439216 rgb
f
206.198 268.303 mo
199.943 268.303 li
199.943 273.926 li
206.198 273.926 li
206.198 268.303 li
cp
205.5 269.001 mo
205.5 273.229 li
200.641 273.229 li
200.641 271.139 200.637 269.826 200.598 269.001 cv
205.5 269.001 li
cp
f
208.974 290.49 mo
207.331 290.49 li
207.331 277.804 li
208.974 277.804 li
208.974 290.49 li
cp
.47451 .333333 .278431 rgb
f
211.364 275.628 mo
212.115 280.242 211.696 284.093 208.153 284.092 cv
204.942 284.092 203.969 280.201 204.942 275.628 cv
205.922 271.022 207.06 267.165 208.153 267.165 cv
209.168 267.165 210.572 270.769 211.364 275.628 cv
cp
.780392 .956863 .392157 rgb
f
245.305 133.837 mo
245.305 101.692 225.213 75.6338 225.213 75.6338 cv
225.213 75.6338 205.122 101.692 205.122 133.837 cv
211.003 184.76 li
239.423 184.76 li
245.305 133.837 li
cp
.101961 .737255 .611765 rgb
f
245.305 133.837 mo
245.305 101.692 225.213 75.6338 225.213 75.6338 cv
225.197 184.76 li
239.423 184.76 li
245.305 133.837 li
cp
.227451 .847059 .729412 rgb
f
241.234 184.76 mo
244.736 154.679 li
259.122 179.081 li
259.122 204.709 li
259.122 204.709 256.979 192.56 250.178 186.963 cv
247.449 184.717 241.234 184.76 241.234 184.76 cv
cp
.945098 .341176 .137255 rgb
f
209.192 184.76 mo
205.689 154.679 li
191.304 179.081 li
191.304 204.709 li
191.304 204.709 193.447 192.56 200.248 186.963 cv
202.978 184.717 209.192 184.76 209.192 184.76 cv
cp
f
238.861 130.988 mo
238.861 138.525 232.751 144.636 225.213 144.636 cv
217.675 144.636 211.566 138.525 211.566 130.988 cv
211.566 123.451 217.675 117.34 225.213 117.34 cv
232.751 117.34 238.861 123.451 238.861 130.988 cv
cp
.584314 .847059 .913725 rgb
f
216.837 120.229 mo
224.089 144.579 li
224.46 144.609 224.833 144.636 225.213 144.636 cv
227.223 144.636 229.124 144.19 230.842 143.411 cv
223.129 117.516 li
220.779 117.877 218.63 118.83 216.837 120.229 cv
cp
.721569 .94902 1 rgb
f
235.207 140.26 mo
228.504 117.757 li
227.449 117.494 226.35 117.34 225.213 117.34 cv
225.197 117.341 li
232.666 142.413 li
233.601 141.802 234.449 141.076 235.207 140.26 cv
cp
f
259.122 204.709 mo
259.122 179.081 li
250.178 163.91 li
250.178 186.963 li
256.979 192.56 259.122 204.709 259.122 204.709 cv
cp
.960784 .505882 .352941 rgb
f
205.689 154.679 mo
200.248 163.91 li
200.248 186.963 li
202.978 184.717 209.192 184.76 209.192 184.76 cv
205.689 154.679 li
cp
f
259.122 205.743 mo
257.694 205.743 256.353 206.088 255.158 206.688 cv
253.919 205.346 252.149 204.5 250.178 204.5 cv
249.522 204.5 248.891 204.599 248.291 204.771 cv
247.737 200.499 244.092 197.195 239.668 197.195 cv
237.462 197.195 235.455 198.021 233.922 199.372 cv
233.43 198.802 233.023 198.158 232.727 197.453 cv
232.727 187.576 li
217.668 187.576 li
217.668 196.6 li
217.166 198.382 216.006 199.885 214.464 200.834 cv
213.307 200.063 211.918 199.613 210.424 199.613 cv
207.6 199.613 205.155 201.22 203.941 203.566 cv
202.782 203.165 201.543 202.935 200.248 202.935 cv
194.027 202.935 188.984 207.971 188.97 214.189 cv
186.152 215.5 184.194 218.348 184.194 221.66 cv
184.194 226.214 187.885 229.904 192.438 229.904 cv
195.617 229.904 198.372 228.103 199.748 225.466 cv
199.915 225.474 200.079 225.491 200.248 225.491 cv
204.46 225.491 208.126 223.178 210.063 219.757 cv
211.599 221.725 213.987 222.995 216.677 222.995 cv
219.272 222.995 221.59 221.817 223.13 219.967 cv
224.184 221.1 225.684 221.811 227.354 221.811 cv
229.317 221.811 231.051 220.83 232.094 219.331 cv
233.154 220.543 234.707 221.313 236.443 221.313 cv
236.785 221.313 237.117 221.277 237.441 221.221 cv
237.72 225.326 241.128 228.573 245.305 228.573 cv
249.502 228.573 252.924 225.291 253.17 221.156 cv
254.744 222.586 256.827 223.465 259.122 223.465 cv
264.015 223.465 267.982 219.499 267.982 214.604 cv
267.982 209.711 264.015 205.743 259.122 205.743 cv
cp
.403922 .898039 .847059 rgb
f
211.208 202.198 mo
212.758 202.198 214.2 202.666 215.398 203.467 cv
214.209 202.046 212.423 201.141 210.424 201.141 cv
206.841 201.141 203.937 204.046 203.937 207.629 cv
203.939 207.697 li
204.837 204.525 207.748 202.198 211.208 202.198 cv
cp
.517647 .968627 .913725 rgb
f
246.938 206.665 mo
247.034 204.593 246.29 202.49 244.694 200.92 cv
241.717 197.993 236.93 198.035 234.004 201.012 cv
233.258 201.771 232.714 202.651 232.354 203.584 cv
234.007 202.278 236.089 201.494 238.358 201.494 cv
242.081 201.494 245.31 203.591 246.938 206.665 cv
cp
f
201.461 206.672 mo
203.157 206.672 204.752 207.093 206.158 207.827 cv
204.63 205.916 202.282 204.689 199.645 204.689 cv
195.039 204.689 191.304 208.422 191.304 213.028 cv
191.304 213.646 191.377 214.247 191.503 214.827 cv
192.435 210.176 196.538 206.672 201.461 206.672 cv
cp
f
265.433 215.609 mo
265.464 215.352 265.484 215.093 265.484 214.827 cv
265.484 211.312 262.637 208.463 259.122 208.463 cv
256.807 208.463 254.785 209.704 253.672 211.552 cv
254.87 210.893 256.247 210.516 257.712 210.516 cv
261.177 210.516 264.148 212.615 265.433 215.609 cv
cp
f
214.116 194.077 mo
212.982 194.077 212.063 193.158 212.063 192.023 cv
212.063 164.99 li
212.063 163.855 212.982 162.937 214.116 162.937 cv
215.25 162.937 216.169 163.855 216.169 164.99 cv
216.169 192.023 li
216.169 193.158 215.25 194.077 214.116 194.077 cv
cp
1 .870588 0 rgb
f
225.197 189.591 mo
224.063 189.591 223.144 188.672 223.144 187.537 cv
223.144 169.476 li
223.144 168.342 224.063 167.423 225.197 167.423 cv
226.331 167.423 227.252 168.342 227.252 169.476 cv
227.252 187.537 li
227.252 188.672 226.331 189.591 225.197 189.591 cv
cp
f
236.617 196.558 mo
235.484 196.558 234.564 195.64 234.564 194.505 cv
234.564 171.986 li
234.564 170.852 235.484 169.933 236.617 169.933 cv
237.751 169.933 238.671 170.852 238.671 171.986 cv
238.671 194.505 li
238.671 195.64 237.751 196.558 236.617 196.558 cv
cp
f
187.737 204.762 mo
186.603 204.762 185.684 203.842 185.684 202.709 cv
185.684 186.772 li
185.684 185.638 186.603 184.719 187.737 184.719 cv
188.871 184.719 189.79 185.638 189.79 186.772 cv
189.79 202.709 li
189.79 203.842 188.871 204.762 187.737 204.762 cv
cp
f
196.986 199.669 mo
195.853 199.669 194.934 198.75 194.934 197.616 cv
194.934 183.246 li
194.934 182.111 195.853 181.192 196.986 181.192 cv
198.122 181.192 199.04 182.111 199.04 183.246 cv
199.04 197.616 li
199.04 198.75 198.122 199.669 196.986 199.669 cv
cp
f
254.649 202.179 mo
253.516 202.179 252.597 201.26 252.597 200.126 cv
252.597 183.246 li
252.597 182.111 253.516 181.192 254.649 181.192 cv
255.783 181.192 256.702 182.111 256.702 183.246 cv
256.702 200.126 li
256.702 201.26 255.783 202.179 254.649 202.179 cv
cp
f
246.946 192.276 mo
245.813 192.276 244.893 191.356 244.893 190.224 cv
244.893 170.354 li
244.893 169.22 245.813 168.301 246.946 168.301 cv
248.079 168.301 248.999 169.22 248.999 170.354 cv
248.999 190.224 li
248.999 191.356 248.079 192.276 246.946 192.276 cv
cp
f
263.267 198.396 mo
262.133 198.396 261.214 197.476 261.214 196.342 cv
261.214 191.352 li
261.214 190.218 262.133 189.299 263.267 189.299 cv
264.4 189.299 265.32 190.218 265.32 191.352 cv
265.32 196.342 li
265.32 197.476 264.4 198.396 263.267 198.396 cv
cp
f
346.457 119.949 mo
343.74 124.823 li
324.343 114.008 li
327.06 109.134 li
346.457 119.949 li
cp
.537255 .411765 .368627 rgb
f
326.252 110.766 mo
325.139 112.764 li
320.661 110.269 li
321.775 108.27 li
326.252 110.766 li
.258824 .258824 .258824 rgb
f
311.337 116.117 mo
309.304 116.117 307.244 115.615 305.346 114.556 cv
299.398 111.241 297.258 103.705 300.573 97.7583 cv
302.83 93.7101 307.043 91.4256 311.379 91.4256 cv
313.412 91.4256 315.472 91.9278 317.371 92.9863 cv
322.982 96.1142 325.204 102.998 322.654 108.76 cv
321.844 108.309 li
322.054 107.823 322.227 107.329 322.365 106.831 cv
311.59 92.3481 li
311.514 92.3467 311.439 92.3459 311.363 92.3459 cv
310.473 92.3459 309.589 92.4493 308.73 92.6529 cv
321.165 109.365 li
320.661 110.269 li
321.54 110.758 li
319.184 114.197 315.312 116.117 311.337 116.117 cv
306.967 93.2261 mo
305.483 93.8423 304.124 94.772 302.995 95.9849 cv
316.413 114.017 li
317.849 113.31 319.145 112.296 320.197 111.008 cv
306.967 93.2261 li
.780392 .960784 .941176 rgb
f
321.54 110.758 mo
320.661 110.269 li
321.165 109.365 li
321.251 109.481 li
321.337 109.335 li
321.525 108.998 321.694 108.655 321.844 108.309 cv
322.654 108.76 li
322.501 109.106 322.331 109.448 322.144 109.784 cv
321.955 110.121 321.754 110.446 321.54 110.758 cv
.337255 .513725 .498039 rgb
f
316.413 114.017 mo
302.995 95.9849 li
304.124 94.772 305.483 93.8423 306.967 93.2261 cv
320.197 111.008 li
319.145 112.296 317.849 113.31 316.413 114.017 cv
1 1 1 rgb
f
321.165 109.365 mo
308.73 92.6529 li
309.589 92.4493 310.473 92.3459 311.363 92.3459 cv
311.439 92.3459 311.514 92.3467 311.59 92.3481 cv
322.365 106.831 li
322.227 107.329 322.054 107.823 321.844 108.309 cv
321.775 108.27 li
321.165 109.365 li
f
321.251 109.481 mo
321.165 109.365 li
321.775 108.27 li
321.844 108.309 li
321.694 108.655 321.525 108.998 321.337 109.335 cv
321.251 109.481 li
.556863 .556863 .556863 rgb
f
326.428 110.451 mo
345.827 121.266 li
346.452 120.144 li
327.055 109.328 li
326.428 110.451 li
cp
.670588 .580392 .54902 rgb
f
324.337 114.202 mo
343.735 125.017 li
344.361 123.894 li
324.963 113.079 li
324.337 114.202 li
cp
.47451 .333333 .278431 rgb
f
299.768 97.3091 mo
296.203 103.701 298.504 111.799 304.896 115.362 cv
311.287 118.926 319.386 116.625 322.949 110.233 cv
326.512 103.843 324.21 95.7441 317.819 92.1807 cv
311.429 88.6177 303.33 90.918 299.768 97.3091 cv
cp
301.379 98.2075 mo
304.451 92.6963 311.411 90.7192 316.922 93.792 cv
322.433 96.8652 324.409 103.823 321.337 109.335 cv
318.264 114.846 311.306 116.824 305.795 113.751 cv
300.282 110.678 298.306 103.719 301.379 98.2075 cv
cp
.333333 .384314 .439216 rgb
f
284.047 187.997 mo
283.28 187.563 282.514 187.129 281.748 186.696 cv
280.424 185.947 279.544 183.938 279.782 182.208 cv
280.205 179.833 280.63 177.459 281.054 175.084 cv
285.487 177.594 289.923 180.104 294.357 182.613 cv
292.54 184.199 290.723 185.785 288.904 187.371 cv
287.545 188.466 285.369 188.746 284.047 187.997 cv
cp
.737255 .737255 .737255 rgb
f
302.992 173.347 mo
308.513 172.707 313.665 169.549 316.611 164.343 cv
321.511 155.685 318.463 144.695 309.807 139.796 cv
301.149 134.896 290.158 137.943 285.26 146.601 cv
282.313 151.807 282.26 157.849 284.552 162.911 cv
281.517 168.275 li
280.387 170.27 279.99 172.485 280.224 174.614 cv
295.188 183.083 li
297.133 182.186 298.828 180.706 299.957 178.711 cv
302.992 173.347 li
cp
.972549 .792157 0 rgb
f
281.748 186.696 mo
282.514 187.129 283.28 187.563 284.047 187.997 cv
285.354 188.738 287.494 188.468 288.856 187.404 cv
279.779 182.267 li
279.568 183.983 280.438 185.956 281.748 186.696 cv
cp
.258824 .258824 .258824 rgb
f
309.925 139.871 mo
287.828 178.918 li
295.188 183.083 li
297.133 182.186 298.828 180.706 299.957 178.711 cv
302.992 173.347 li
308.513 172.707 313.665 169.549 316.611 164.343 cv
321.486 155.727 318.488 144.806 309.925 139.871 cv
cp
1 .866667 .301961 rgb
f
287.711 221.165 mo
338.385 165.535 li
326.768 239.883 li
287.711 221.165 li
cp
.996078 .807843 .658824 rgb
f
307.239 230.524 mo
338.385 165.535 li
287.711 221.165 li
307.239 230.524 li
cp
.976471 .686275 .490196 rgb
f
314.647 234.09 mo
303.68 237.95 li
299.818 226.983 li
338.385 165.535 li
314.647 234.09 li
cp
f
299.818 226.983 mo
303.68 237.95 li
338.385 165.535 li
299.818 226.983 li
cp
.996078 .807843 .658824 rgb
f
163.241 188.736 mo
157.918 191.117 151.675 188.731 149.294 183.409 cv
146.914 178.087 149.299 171.843 154.621 169.462 cv
159.943 167.082 166.187 169.467 168.567 174.789 cv
170.948 180.111 168.563 186.355 163.241 188.736 cv
cp
151.794 163.145 mo
143.027 167.066 139.098 177.354 143.019 186.122 cv
146.941 194.891 173.436 211.53 173.436 211.53 cv
173.436 211.53 178.694 180.688 174.772 171.92 cv
170.851 163.152 160.563 159.223 151.794 163.145 cv
cp
.862745 .266667 .215686 rgb
f
151.794 163.145 mo
154.621 169.462 li
159.943 167.082 166.187 169.467 168.567 174.789 cv
170.948 180.111 168.563 186.355 163.241 188.736 cv
173.436 211.53 li
173.436 211.53 178.694 180.688 174.772 171.92 cv
170.851 163.152 160.563 159.223 151.794 163.145 cv
cp
.898039 .45098 .407843 rgb
f
159.689 116.647 mo
159.689 131.545 147.613 143.621 132.715 143.621 cv
117.818 143.621 105.741 131.545 105.741 116.647 cv
105.741 101.75 117.818 89.6739 132.715 89.6739 cv
147.613 89.6739 159.689 101.75 159.689 116.647 cv
.0823529 .627451 .788235 rgb
f
gsave
159.689 116.647 mo
159.689 131.545 147.613 143.621 132.715 143.621 cv
117.818 143.621 105.741 131.545 105.741 116.647 cv
105.741 101.75 117.818 89.6739 132.715 89.6739 cv
147.613 89.6739 159.689 101.75 159.689 116.647 cv
clp
117.638 140.171 mo
117.628 140.16 117.642 140.177 117.656 140.195 cv
117.678 140.221 117.701 140.248 117.638 140.171 cv
117.593 140.125 mo
117.399 139.953 117.593 139.867 117.593 140.125 cv
117.509 139.737 mo
117.531 139.709 117.512 139.734 117.492 139.759 cv
117.466 139.792 117.44 139.825 117.509 139.737 cv
115.541 119.479 mo
115.375 119.704 115.473 119.57 115.572 119.437 cv
115.68 119.29 115.788 119.143 115.541 119.479 cv
111.065 118.791 mo
110.821 118.961 110.911 118.898 111.001 118.835 cv
111.068 118.787 111.135 118.74 111.065 118.791 cv
103.322 102.568 mo
103.198 102.783 103.226 102.724 103.322 102.568 cv
102.891 102.121 mo
102.948 102.022 103.06 101.905 102.891 102.121 cv
100.386 100.486 mo
100.048 100.549 100.161 100.527 100.278 100.505 cv
100.354 100.491 100.433 100.477 100.386 100.486 cv
99.9389 98.7158 mo
99.7452 98.7085 99.8811 98.7131 100.012 98.7178 cv
100.161 98.7229 100.303 98.7282 99.9389 98.7158 cv
110.441 111.728 mo
110.524 111.628 110.48 111.686 110.441 111.728 cv
115.96 98.2471 mo
116.197 98.3506 115.88 98.2793 115.96 98.2471 cv
117.113 98.8813 mo
117.927 98.7876 117.377 98.8491 117.113 98.8813 cv
117.222 97.9058 mo
117.222 97.8703 117.222 97.9007 117.222 97.9312 cv
117.222 97.9709 117.222 98.0105 117.222 97.9058 cv
120.33 96.8716 mo
120.443 96.8882 120.332 96.8716 120.33 96.8716 cv
121.651 97.934 mo
121.798 97.8965 121.714 97.894 121.651 97.934 cv
121.423 99.6484 mo
121.328 99.7294 121.356 99.6899 121.393 99.6505 cv
121.43 99.6118 121.476 99.5731 121.423 99.6484 cv
122.592 103.113 mo
123.103 102.874 122.785 103.015 122.592 103.113 cv
127.179 124.88 mo
126.39 124.256 124.962 124.265 124.203 123.982 cv
123.98 123.836 123.312 122.401 122.577 123.833 cv
122.721 120.857 119.276 120.917 118.275 119.072 cv
118.613 118.978 li
118.76 119.614 115.617 118.409 115.934 118.409 cv
116.062 118.409 115.382 119.046 115.4 118.949 cv
115.325 118.725 li
115.337 118.656 115.743 118.604 115.605 118.416 cv
115.11 117.742 113.511 120.016 113.623 120.016 cv
112.703 120.016 111.834 119.329 111.479 118.479 cv
110.786 116.919 112.08 117.669 109.973 117.028 cv
110.142 116.791 110.996 115.162 110.878 114.942 cv
110.747 114.69 110.138 115.12 109.53 115.55 cv
108.878 116.012 108.227 116.474 108.168 116.093 cv
108.17 116.107 108.058 115.272 107.962 114.437 cv
107.858 113.537 107.774 112.637 107.875 112.801 cv
109.275 112.166 109.529 111.876 110.632 112.204 cv
110.19 112.081 111.123 111.607 111.205 111.513 cv
111.275 110.674 113.6 113.665 112.975 113.665 cv
113.675 113.665 113.085 110.689 114.44 110.399 cv
115.154 110.244 115.267 109.667 115.5 109.501 cv
115.607 109.427 115.521 108.302 115.953 108.261 cv
115.921 108.337 115.6 109.049 115.676 109.143 cv
115.822 109.308 116.122 108.355 116.128 108.291 cv
116.161 108.603 116.413 108.299 116.689 107.995 cv
116.943 107.716 117.217 107.437 117.36 107.635 cv
117.021 107.675 li
117.579 107.521 117.711 107.385 117.737 107.585 cv
117.731 107.52 118.228 107.516 118.132 107.301 cv
118.13 107.295 118.1 107.308 118.061 107.321 cv
117.969 107.351 117.826 107.382 117.852 107.182 cv
117.893 106.883 118.566 106.629 118.812 106.407 cv
118.821 106.557 119.899 106.172 120.237 105.902 cv
120.022 106.06 li
120.028 106.154 120.291 106.055 120.316 106.041 cv
120.316 106.309 119.296 106.143 119.525 106.719 cv
119.611 106.938 122.111 105.458 121.555 105.458 cv
120.204 105.458 121.153 106.223 120.561 105.145 cv
119.943 105.121 li
119.948 105.102 li
120.32 105.192 120.488 104.873 120.761 104.811 cv
120.88 104.456 120.05 104.765 119.368 105.075 cv
118.902 105.287 118.505 105.499 118.53 105.498 cv
119.873 104.251 121.232 104.728 122.62 104.001 cv
123.858 104.001 123.805 102.427 122.965 102.98 cv
123.084 102.834 123.483 102.932 123.57 102.782 cv
123.392 102.534 li
121.967 102.471 123.605 101.176 122.633 100.654 cv
123.907 101.36 119.287 100.48 121.422 100.48 cv
121.418 100.491 li
121.449 100.594 120.909 100.406 120.888 100.406 cv
121.316 100.185 120.169 99.8989 119.879 99.9966 cv
119.043 99.8711 118.634 102.127 117.946 102.519 cv
115.713 103.811 117.646 104 116.773 102.571 cv
116.638 102.353 114.913 101.872 114.45 101.872 cv
114.302 102.071 114.642 101.403 115.095 100.734 cv
115.596 99.9931 116.235 99.2522 116.503 99.6929 cv
116.4 99.5224 116.028 99.6763 115.916 99.4902 cv
117.058 99.7431 117.379 99.1587 118.372 98.8657 cv
118.057 99.1582 117.748 99.4502 117.471 99.6768 cv
117.594 99.6793 119.014 99.8149 119.266 99.6128 cv
119.084 99.7573 118.758 98.8144 118.584 98.8144 cv
118.524 98.8144 118.544 99.0493 118.444 99.0767 cv
118.51 98.9765 118.577 98.8545 118.421 98.8413 cv
118.425 98.7324 li
118.588 98.7158 li
118.942 99.0225 li
118.845 99.0225 120.363 98.1392 120.116 97.709 cv
120.1 97.6797 121.436 97.7836 121.165 97.4014 cv
121.378 97.4014 121.432 97.9277 121.642 97.7734 cv
121.657 97.8438 121.587 97.8431 121.509 97.8426 cv
121.416 97.8419 121.311 97.8412 121.32 97.9585 cv
121.798 97.9907 li
121.798 98.1392 121.585 98.2358 121.59 98.2603 cv
121.662 98.6255 121.9 98.0747 121.904 98.0645 cv
121.955 98.1611 121.956 98.107 122.047 98.1392 cv
121.99 98.3916 120.132 99.5889 119.965 99.3364 cv
119.952 99.3189 122.215 100.286 122.518 100.286 cv
122.792 100.286 122.176 99.6601 122.168 99.6274 cv
122.475 99.6172 122.725 100.107 122.961 100.107 cv
123.022 100.107 123.354 99.206 123.329 99.4078 cv
122.822 98.916 li
122.75 99.1577 124.267 98.7798 124.65 98.6016 cv
124.545 98.5596 123.37 97.9936 123.369 97.9819 cv
123.356 97.8491 123.931 97.8662 123.937 97.7681 cv
123.948 97.5477 123.876 97.626 123.832 97.7043 cv
123.788 97.7832 123.772 97.8622 123.898 97.6353 cv
123.909 97.6177 123.087 96.7139 122.735 97.1714 cv
122.331 96.7202 li
122.427 96.2627 121.532 96.3862 121.542 96.5166 cv
121.622 96.6905 li
121.693 96.7319 121.802 96.7112 121.903 96.6905 cv
121.998 96.6707 122.087 96.651 122.13 96.6846 cv
121.241 96.8989 li
121.241 96.8213 121.554 96.6079 121.545 96.4527 cv
121.525 95.8838 120.183 97.0459 120.178 97.082 cv
120.054 97.1538 li
119.888 97.0283 li
119.844 96.7246 120.751 96.4912 120.725 96.3906 cv
120.628 96.0576 118.975 96.7407 118.85 97.1314 cv
118.854 97.1641 li
119.383 97.2378 li
119.366 97.2396 119.311 97.2345 119.242 97.2293 cv
119.066 97.2161 118.797 97.2029 118.819 97.3052 cv
118.874 97.5628 119.915 97.5623 120.138 97.5617 cv
120.164 97.5617 120.179 97.5616 120.179 97.5621 cv
120.067 97.6499 li
119.771 97.8223 118.801 97.9307 118.874 98.0976 cv
118.878 98.1079 118.471 98.3862 118.362 98.4454 cv
118.253 98.2802 li
118.323 98.1729 118.77 98.0815 118.589 97.8637 cv
118.455 97.7363 li
118.315 97.7363 118.023 97.9839 117.983 98.1275 cv
117.771 97.7578 118.304 97.9121 118.317 97.7934 cv
118.337 97.6179 118.086 97.6352 117.928 97.6524 cv
117.86 97.6597 117.81 97.667 117.804 97.6596 cv
117.968 97.5395 118.486 97.1953 117.993 96.981 cv
117.996 96.9678 li
118.284 96.8877 119.452 96.6767 119.591 96.4072 cv
119.541 96.502 117.189 96.9003 116.928 97.477 cv
116.824 97.709 117.271 97.6636 117.316 97.6767 cv
117.388 97.7505 li
117.232 97.81 116.478 98.149 116.478 98.3848 cv
116.356 98.4277 li
116.279 98.3789 li
116.578 98.1181 li
116.277 98.0532 li
117.061 97.7505 li
117.155 97.5625 115.794 97.6538 115.854 97.9043 cv
115.871 97.9697 115.948 97.9562 116.023 97.9426 cv
116.082 97.932 116.139 97.9214 116.165 97.9487 cv
115.686 98.2055 115.247 98.4498 114.414 98.1446 cv
114.471 98.126 113.734 98.2744 113.376 98.54 cv
113.272 98.5054 li
113.305 98.4189 113.26 98.2285 113.072 98.2446 cv
113.283 98.1406 li
113.28 98.1187 113.043 98.165 112.754 98.2112 cv
112.366 98.2731 111.884 98.3351 111.748 98.2334 cv
111.751 98.0923 112.347 98.2143 112.245 98.0176 cv
112.066 97.6774 111.315 97.7042 110.741 97.731 cv
110.489 97.7428 110.271 97.7545 110.15 97.7353 cv
110.21 97.709 li
110.399 97.5313 li
110.374 97.4105 110.188 97.5075 110.01 97.6045 cv
109.857 97.6879 109.71 97.7714 109.678 97.7163 cv
109.756 97.3887 li
109.63 97.3418 li
109.247 97.3418 109.315 97.7915 109.256 97.4883 cv
109.366 98.0323 103.527 97.2471 103.348 97.2471 cv
103.348 97.0517 99.4346 97.8301 99.4609 98.1055 cv
99.4722 98.2226 99.7129 98.6724 99.937 98.4854 cv
99.937 98.8062 99.3286 98.8345 99.1763 98.7901 cv
99.3428 98.6084 li
99.2319 98.5713 97.7949 98.9068 97.793 98.9917 cv
98.0664 99.0708 li
97.7417 99.29 li
97.7725 99.6147 99.0014 99.252 99.1699 99.2266 cv
99.1642 99.2334 99.1785 99.2126 99.1989 99.1919 cv
99.2294 99.1608 99.2736 99.1297 99.2842 99.1919 cv
98.6255 99.5176 95.8375 100.1 96.2456 100.961 cv
96.3706 101.21 96.9546 100.645 97.0766 100.637 cv
96.9658 100.692 96.3008 101.412 96.2402 101.356 cv
96.4468 101.566 97.2021 101.274 97.4048 101.179 cv
97.1479 101.415 97.376 101.359 97.5908 101.287 cv
97.1279 101.565 93.7408 102.689 93.7349 102.799 cv
93.7305 102.896 97.6289 101.735 98.1269 101.561 cv
98.0786 101.6 97.4776 101.805 97.5966 101.946 cv
97.6625 101.989 li
97.6782 102.033 98.8349 101.58 98.8671 101.471 cv
98.8979 101.376 98.8301 101.458 98.8648 101.382 cv
98.1426 101.554 li
98.6801 101.229 99.2998 100.712 100.019 100.549 cv
99.8487 100.685 99.208 100.98 99.1631 101.114 cv
99.2319 100.913 101.248 100.998 101.248 100.553 cv
101.248 100.614 100.907 100.723 100.97 100.84 cv
101.011 100.922 101.083 100.87 101.158 100.818 cv
101.265 100.744 101.377 100.67 101.407 100.987 cv
103.644 100.658 102.122 101.956 102.711 102.773 cv
102.837 102.95 103.169 102.415 103.215 102.19 cv
103.135 104.128 li
103.186 104.107 103.333 104.084 103.249 104.181 cv
103.23 104.201 103.149 104.153 103.056 104.105 cv
102.917 104.032 102.751 103.96 102.724 104.121 cv
102.506 105.434 102.105 108.53 101.511 109.782 cv
101.366 110.094 103.455 112.389 102.302 112.389 cv
102.674 112.389 103.041 114.453 103.471 114.485 cv
103.468 114.523 103.522 114.488 103.571 114.452 cv
103.625 114.412 103.672 114.372 103.625 114.435 cv
103.702 114.332 102.606 111.162 102.88 111.162 cv
103.23 111.162 104.136 113.515 104.572 114.15 cv
104.907 114.727 105.164 115.645 105.299 116.157 cv
105.387 116.477 107.203 116.792 107.246 117.098 cv
107.196 116.781 108.638 117.634 109.926 118.487 cv
111.083 119.254 112.116 120.021 111.826 119.938 cv
112.061 119.995 li
112.075 120.021 111.761 120.283 111.985 120.283 cv
112.175 120.283 113.028 119.529 113.073 119.83 cv
113.136 120.285 113.458 121.605 113.406 121.605 cv
112.468 121.605 112.231 124.25 112.502 123.902 cv
112.101 127.215 116.207 128.735 116.285 132.193 cv
116.315 133.365 117.16 138.192 116.869 138.562 cv
116.796 138.649 116.998 139.211 117.088 139.211 cv
117.293 139.211 117.114 138.689 117.152 138.518 cv
117.231 138.522 li
117.312 138.522 117.531 139.55 117.417 139.63 cv
117.322 139.63 117.288 139.376 117.175 139.376 cv
117.276 139.376 117.129 140.518 117.204 140.518 cv
117.163 140.518 117.69 140.433 117.69 140.291 cv
117.81 140.536 li
117.813 140.706 li
117.518 141.23 118.456 142.734 118.585 142.492 cv
118.602 142.587 li
118.491 142.575 118.384 142.462 118.391 142.65 cv
118.405 142.876 120.958 143.853 121.066 143.725 cv
121.095 143.704 li
121.163 143.518 121.219 143.562 121.429 143.236 cv
119.541 142.712 119.361 139.772 119.726 138.916 cv
119.794 138.778 119.855 138.863 119.92 138.948 cv
119.982 139.029 120.049 139.11 120.13 138.996 cv
120.24 138.84 119.152 138.532 119.465 138.241 cv
119.489 138.22 119.61 138.278 119.754 138.337 cv
120.005 138.439 120.327 138.541 120.327 138.217 cv
120.098 137.51 li
122.594 136.828 120.876 137.138 120.89 135.828 cv
120.89 137.258 123.427 134.317 123.005 134.317 cv
123.091 134.317 122.756 134.793 122.903 134.793 cv
123.184 134.793 123.863 131.895 124.733 131.597 cv
125.633 131.289 127.938 125.498 127.179 124.88 cv
127.17 124.874 127.19 124.889 127.21 124.905 cv
127.243 124.932 127.276 124.959 127.179 124.88 cv
.180392 .8 .443137 rgb
f
116.723 104.063 mo
116.717 104.037 li
116.723 104.063 li
cp
f
118.315 142.233 mo
118.315 142.233 li
cp
f
118.898 119 mo
118.541 119.239 118.803 119.358 118.898 119 cv
cp
f
117.985 118.822 mo
117.957 118.691 118.061 119.053 117.985 118.822 cv
cp
f
120.967 105.76 mo
121.324 105.868 120.447 105.441 120.556 105.441 cv
120.384 105.584 li
120.604 105.955 120.757 105.76 120.967 105.76 cv
cp
f
121.476 104.775 mo
121.694 104.775 120.962 104.158 120.82 104.412 cv
120.734 104.577 121.354 104.775 121.476 104.775 cv
cp
f
121.717 100.616 mo
121.225 100.831 121.821 100.571 121.717 100.616 cv
cp
f
119.99 99.7158 mo
120.447 99.7998 119.677 99.6611 119.99 99.7158 cv
cp
f
119.807 99.6665 mo
119.34 99.4658 120.081 99.793 119.807 99.6665 cv
cp
f
119.925 99.5591 mo
120.285 99.4453 119.69 99.6392 119.925 99.5591 cv
cp
f
120.557 99.8809 mo
120.213 99.8809 120.768 99.8809 120.557 99.8809 cv
cp
f
119.153 100.041 mo
118.829 99.6914 119.44 100.348 119.153 100.041 cv
cp
f
118.575 99.8037 mo
118.35 99.7339 117.949 100.113 118.024 100.124 cv
118.183 100.147 118.851 99.8936 118.575 99.8037 cv
cp
f
116.757 103.303 mo
116.701 102.85 116.802 103.746 116.757 103.303 cv
cp
f
121.106 98.1333 mo
120.266 98.8843 121.92 97.3667 121.106 98.1333 cv
cp
f
120.604 98.0864 mo
120.799 98.0713 120.759 97.8955 120.604 98.0864 cv
cp
f
121.186 97.604 mo
120.466 97.604 120.877 97.604 121.186 97.604 cv
cp
f
121.438 97.7202 mo
121.325 97.561 121.554 97.8745 121.438 97.7202 cv
cp
f
96.1353 99.9023 mo
96.3052 100.259 95.9434 99.4854 96.1353 99.9023 cv
cp
f
95.5303 100.94 mo
96.0645 101.434 95.2764 100.705 95.5303 100.94 cv
cp
f
97.6587 102.046 mo
97.23 101.739 97.6758 102.058 97.6587 102.046 cv
cp
f
102.348 103.025 mo
102.28 103.09 102.203 103.716 102.388 103.716 cv
102.862 102.968 li
102.924 102.903 102.424 102.756 102.348 103.025 cv
cp
f
123.046 142.136 mo
122.865 142.096 122.234 142.007 122.188 142.099 cv
122.056 142.283 li
122.014 142.39 122.162 142.353 122.15 142.433 cv
122.513 142.526 122.856 142.104 123.046 142.136 cv
cp
f
114.264 115.557 mo
114.266 115.558 114.971 115.524 114.955 115.425 cv
114.774 114.451 112.199 114.263 111.46 114.841 cv
111.572 114.785 111.7 114.784 111.653 114.89 cv
111.896 114.766 112.256 114.452 112.554 114.586 cv
112.43 114.678 li
112.515 114.937 114.401 115.589 114.264 115.557 cv
114.402 115.59 114.231 115.549 114.264 115.557 cv
cp
f
112.182 114.764 mo
111.757 114.764 112.429 114.764 112.182 114.764 cv
cp
f
113.995 113.859 mo
114.24 113.553 113.587 114.339 113.995 113.859 cv
cp
f
115.15 115.19 mo
115.569 115.19 115.014 115.19 115.15 115.19 cv
cp
f
114.066 116.145 mo
114.018 116.133 113.345 115.871 113.445 116.184 cv
113.569 116.6 114.258 116.186 114.066 116.145 cv
cp
f
115.873 116.187 mo
116.09 116.016 116.404 116.253 116.602 116.253 cv
116.731 116.11 li
117.104 115.601 115.248 115.57 115.113 115.565 cv
115.02 115.713 115.399 116.005 115.412 116.029 cv
115.315 116.059 114.625 115.897 114.665 116.125 cv
114.716 116.421 115.904 116.164 115.873 116.187 cv
cp
f
117.065 116.309 mo
117.224 116.523 117.663 116.076 117.588 116.076 cv
117.502 116.076 116.834 115.999 117.065 116.309 cv
cp
f
118.4 116.179 mo
118.134 116.253 118.567 116.11 118.4 116.179 cv
cp
f
118.758 116.585 mo
118.84 116.416 118.69 116.733 118.758 116.585 cv
cp
f
118.968 116.826 mo
118.773 116.597 119.199 117.106 118.968 116.826 cv
cp
f
118.8 117.351 mo
119.023 116.95 118.859 117.351 118.8 117.351 cv
cp
f
119.035 117.597 mo
119.227 117.31 118.912 117.782 119.035 117.597 cv
cp
f
118.959 117.866 mo
119.188 117.476 118.645 118.501 118.959 117.866 cv
cp
f
118.699 118.543 mo
118.786 118.398 118.705 118.357 118.699 118.543 cv
cp
f
118.662 111.076 mo
119.403 110.353 118.189 111.522 118.662 111.076 cv
cp
f
121.389 105.198 mo
121.31 105.1 121.552 105.386 121.389 105.198 cv
cp
f
123.85 105.454 mo
124.039 105.261 123.883 105.009 123.734 105.158 cv
123.943 104.848 li
123.848 104.785 123.759 105.022 123.671 105.022 cv
123.917 104.6 li
123.791 104.455 li
123.366 104.455 123.633 104.606 123.429 104.357 cv
123.062 104.439 li
123.11 104.225 123.667 103.96 123.667 103.85 cv
123.666 103.97 121.971 104.906 121.971 105.227 cv
123.157 105.302 li
122.905 105.464 li
122.866 105.741 123.538 105.216 123.532 105.216 cv
123.389 105.549 li
123.466 105.64 123.638 105.66 123.85 105.454 cv
f
122.85 105.452 mo
122.783 105.555 122.727 105.64 122.85 105.452 cv
f
122.67 100.271 mo
122.548 100.271 122.997 100.271 122.67 100.271 cv
cp
f
123.2 94.5225 mo
123.14 94.8266 122.983 94.5635 123.2 94.5225 cv
123.2 94.5225 123.096 94.5419 123.2 94.5225 cv
119.078 95.5923 mo
119.192 95.7266 119.668 95.7852 119.719 95.8007 cv
119.54 95.8662 119.442 95.9844 119.426 96.1558 cv
119.439 96.2266 120.093 96.2383 120.198 96.0991 cv
120.191 96.2041 120.076 96.25 120.096 96.2607 cv
120.978 96.3066 121.575 96.1778 122.408 95.9961 cv
121.797 95.9287 121.046 95.7852 120.384 95.8379 cv
122.496 95.2183 124.321 94.9809 127.281 94.2871 cv
127.201 94.2485 li
127.489 94.187 127.884 94.1875 128.178 94.1495 cv
126.148 93.6402 123.855 94.0064 121.748 94.2783 cv
122.129 94.4331 122.17 94.479 122.642 94.5649 cv
122.007 94.3476 121.098 94.4077 120.267 94.8174 cv
120.619 94.8994 121.032 95.1816 121.783 95.2104 cv
121.528 95.1219 120.89 95.2545 120.276 95.387 cv
119.799 95.4899 119.336 95.5929 119.078 95.5923 cv
f
120.57 95.4854 mo
120.673 95.0322 120.406 95.4565 120.57 95.4854 cv
cp
f
119.561 95.377 mo
119.998 95.061 120.031 95.5679 120.047 95.125 cv
120.081 94.1846 118.982 95.7939 119.561 95.377 cv
cp
f
119.737 94.8013 mo
119.727 94.4009 119.557 94.8013 119.737 94.8013 cv
cp
f
118.225 95.0815 mo
118.437 95.0747 118.775 95.3115 119.107 95.2021 cv
118.673 94.772 118.355 94.7861 118.225 95.0815 cv
cp
f
117.623 95.4888 mo
117.441 95.2236 117.434 95.2129 117.623 95.4888 cv
cp
f
117.273 95.8345 mo
117.149 95.8252 119.24 96.2354 118.716 95.5493 cv
118.175 95.582 117.317 95.8369 117.273 95.8345 cv
cp
f
118.545 96.0068 mo
118.232 96.1797 119.4 96.333 119.267 95.9341 cv
119.141 95.5796 118.546 96.0063 118.545 96.0068 cv
cp
f
116.728 97.1362 mo
116.728 97.1362 li
cp
116.979 96.4375 mo
117.294 96.2578 116.291 96.751 116.344 96.6787 cv
116.365 96.8726 li
116.432 97.4702 117.955 96.8018 117.863 96.6245 cv
117.932 96.7603 117.507 96.6182 117.58 96.6182 cv
117.75 96.3564 117.859 96.6548 117.96 96.2676 cv
117.705 96.2808 117.147 96.2632 116.979 96.4375 cv
cp
f
112.751 96.7368 mo
112.861 96.7236 112.54 96.7705 112.751 96.7368 cv
cp
115.187 97.6875 mo
115.187 97.6875 li
cp
112.403 97.1729 mo
112.315 97.168 112.517 97.1826 112.403 97.1729 cv
cp
110.729 97.0264 mo
111.23 97.0264 111.716 97.2012 112.647 96.7778 cv
112.107 97.104 112.433 96.9736 112.049 97.2104 cv
111.917 97.4165 113.175 97.3545 113.293 97.4453 cv
113.091 97.4438 111.903 97.3701 111.877 97.6284 cv
111.846 97.939 112.438 97.7734 112.561 97.7734 cv
112.63 98.1226 115.931 98 115.903 97.5322 cv
115.885 97.2939 115.42 97.4106 115.382 97.2578 cv
115.337 97.0645 116.325 96.5278 116.328 96.4731 cv
116.351 96.0073 114.864 97.0034 114.779 97.0503 cv
114.799 96.8857 115.063 96.5908 114.622 96.5908 cv
114.692 96.5908 114.448 96.833 114.253 96.8008 cv
115.049 96.1519 110.639 97.0264 110.729 97.0264 cv
cp
f
115.333 97.9199 mo
115.038 98.252 115.374 97.9834 115.333 97.9199 cv
cp
f
115.768 97.8281 mo
115.246 97.8281 115.752 97.8281 115.768 97.8281 cv
cp
f
116.182 97.3359 mo
115.832 97.3359 116.479 97.3359 116.182 97.3359 cv
cp
f
116.759 96.0586 mo
117.189 96.2798 116.586 95.9507 116.759 96.0586 cv
cp
f
114.715 95.6392 mo
114.86 95.645 114.147 95.6211 114.715 95.6392 cv
114.734 95.6401 114.591 95.6357 114.715 95.6392 cv
cp
114.845 95.5986 mo
114.845 95.5986 li
cp
113.08 95.8018 mo
113.117 95.9819 113.848 95.6558 113.99 95.7666 cv
113.915 95.7778 113.666 95.8066 113.721 95.9165 cv
113.77 96.0107 114.307 95.7373 114.297 95.7207 cv
114.034 95.7705 li
114.022 95.7407 li
114.116 95.6919 114.289 95.563 114.392 95.5918 cv
114.381 95.7446 li
114.427 95.8105 li
114.329 95.8105 113.924 95.8921 113.897 95.9648 cv
115.071 96.0112 li
115.092 96.2051 114.373 95.9927 114.328 96.145 cv
114.334 96.1235 116.889 96.2871 116.889 95.7979 cv
116.889 95.6353 116.446 95.7856 116.345 95.7202 cv
116.549 95.5146 li
115.63 95.9546 115.818 95.6279 114.918 95.5884 cv
115.304 95.3193 li
115.196 95.1201 113.052 95.6436 113.08 95.8018 cv
cp
f
115.206 95.5396 mo
115.63 95.5479 115.399 95.3687 115.206 95.5396 cv
cp
f
115.95 95.4023 mo
116.086 95.4321 117.137 95.1479 117.08 95.022 cv
117.034 94.9214 116.19 95.0391 116.158 95.1064 cv
116.284 94.9209 115.946 95.4019 115.95 95.4023 cv
cp
f
125.216 95.3725 mo
125.245 95.351 125.352 95.3633 125.216 95.3725 cv
133.415 98.02 mo
133.571 97.9566 134.559 97.5313 134.555 97.5205 cv
134.236 97.4814 133.888 97.5019 133.569 97.4776 cv
134.007 97.4761 134.128 97.4755 134.737 97.4755 cv
135.141 97.4755 134.095 96.5947 134.08 96.5805 cv
134.469 96.5781 li
134.049 96.8599 134.517 96.7154 134.716 96.9239 cv
134.569 96.9239 134.947 96.7417 134.922 96.6543 cv
134.62 96.5215 li
134.744 96.4458 135.173 96.4644 135.334 96.3759 cv
135.768 96.1675 li
135.743 96.0751 135.532 95.8457 135.476 95.5947 cv
135.401 95.2822 136.096 95.7842 135.923 95.7842 cv
136.143 95.4614 li
136.111 95.3238 136.026 95.3412 135.935 95.3587 cv
135.857 95.3737 135.776 95.3885 135.722 95.3062 cv
135.73 95.3056 135.765 95.3153 135.807 95.3251 cv
135.895 95.345 136.016 95.365 136.013 95.2964 cv
136.013 95.053 135.767 95.1326 135.588 95.2121 cv
135.497 95.2528 135.424 95.2933 135.41 95.291 cv
135.485 95.1259 137.61 94.0581 137.796 94.2514 cv
137.425 93.8817 136.846 94.047 136.32 94.2121 cv
135.806 94.3732 135.342 94.5342 135.167 94.2002 cv
135.27 94.1938 136.033 94.1211 136.033 94.0581 cv
136.033 93.817 134.925 93.8762 134.194 93.9353 cv
133.848 93.9634 133.586 93.9914 133.568 93.9874 cv
133.857 93.8642 li
133.836 93.6959 133.046 93.8067 132.285 93.9174 cv
131.608 94.0159 130.954 94.1142 130.885 94.0166 cv
130.778 93.9414 li
130.651 93.9414 131.333 94.2587 131.32 94.2104 cv
131.289 94.218 131.074 94.1926 130.838 94.1674 cv
130.406 94.1211 129.903 94.0747 130.327 94.2305 cv
130.233 94.2432 129.447 94.23 129.504 94.2558 cv
129.747 94.1148 126.309 94.4448 126.344 94.6264 cv
126.358 94.6916 126.478 94.6742 126.591 94.657 cv
126.689 94.642 126.782 94.627 126.796 94.6655 cv
126.914 95.0523 124.61 94.8448 124.591 95.1855 cv
125.127 95.3755 li
125.087 95.3758 125.036 95.3699 124.982 95.3642 cv
124.828 95.3477 124.646 95.3314 124.621 95.4536 cv
124.552 95.8323 125.291 95.7851 125.979 95.7378 cv
126.549 95.6986 127.084 95.6595 127.095 95.8624 cv
127.112 96.1308 127.023 96.6602 127.295 96.5322 cv
127.287 96.6123 126.786 97.0059 126.888 97.1069 cv
127.059 97.2793 127.333 97.1103 127.465 96.9932 cv
127.421 97.1977 127.541 97.3462 127.801 97.2895 cv
127.766 97.3857 li
127.576 97.414 127.44 97.377 127.329 97.3399 cv
127.1 97.2632 126.979 97.1865 126.711 97.6885 cv
126.597 97.8984 127.4 97.7836 127.465 97.709 cv
127.487 97.6489 li
127.219 97.5 li
127.584 97.5014 li
125.934 97.5014 126.987 99.7598 126.73 100.124 cv
126.551 100.364 127.789 100.973 128.003 100.973 cv
130.829 98.8487 li
131.273 98.4649 131.72 98.331 131.926 98.0225 cv
132.288 98.2685 132.926 98.2055 133.415 98.02 cv
f
135.855 96.1157 mo
135.962 96.1431 136.03 96.1114 136.053 96.0798 cv
136.085 96.0347 136.025 95.9896 135.855 96.1157 cv
f
136.007 95.0088 mo
136.184 94.9303 136.115 94.9577 136.052 94.9852 cv
136.009 95.0037 135.969 95.0221 136.007 95.0088 cv
f
136.003 95.2227 mo
136.316 95.2227 135.859 95.2227 136.003 95.2227 cv
f
136.168 95.2828 mo
136.159 95.3364 136.49 95.315 136.168 95.2828 cv
f
136.22 95.0117 mo
136.079 95.0117 136.362 95.0117 136.22 95.0117 cv
f
136.291 95.0464 mo
136.438 95.0464 136.143 95.0464 136.291 95.0464 cv
f
136.48 94.9111 mo
136.48 94.8239 136.48 94.8675 136.48 94.9111 cv
136.48 94.9547 136.48 94.9983 136.48 94.9111 cv
f
135.795 99.4024 mo
136.194 99.5467 136.234 99.3054 136.204 99.0641 cv
136.179 98.8615 136.104 98.6588 136.148 98.6845 cv
135.82 98.4927 134.442 98.8872 134.43 99.043 cv
134.25 98.6606 133.443 98.8027 133.544 99.0401 cv
133.573 99.1075 133.711 99.0782 133.847 99.049 cv
133.962 99.0243 134.076 98.9996 134.122 99.0332 cv
133.636 99.1787 li
133.486 99.3887 134.009 99.2398 134.032 99.2398 cv
134.037 99.2934 134.006 99.4312 134.106 99.3608 cv
134.061 99.459 133.788 99.4863 133.868 99.5971 cv
134.075 99.8841 134.559 99.727 135.003 99.5701 cv
135.333 99.4536 135.641 99.337 135.795 99.4024 cv
f
137.944 100.051 mo
137.648 100.375 137.698 100.335 137.944 100.051 cv
f
144.185 94.9023 mo
144.344 94.766 144.329 94.8205 144.283 94.8749 cv
144.244 94.92 144.185 94.9651 144.185 94.9023 cv
142.352 94.8291 mo
142.314 95.0156 142.574 95.0429 142.379 95.0952 cv
142.496 95.1675 142.748 95.1329 142.962 95.0983 cv
143.141 95.0695 143.294 95.0405 143.319 95.0742 cv
143.323 95.2036 142.865 95.1489 142.915 95.2964 cv
143 95.5164 143.785 95.4231 144.443 95.3299 cv
144.94 95.2595 145.365 95.1891 145.36 95.2539 cv
145.366 95.1767 144.398 95.0659 144.405 94.8706 cv
144.625 94.9111 145.675 95.0146 145.742 94.7026 cv
143.828 94.5654 li
143.789 94.6582 li
144.187 94.8096 li
142.879 94.7881 li
143.105 94.7778 142.412 94.539 142.352 94.8291 cv
f
145.669 94.9707 mo
145.559 94.9931 145.617 94.9812 145.676 94.9692 cv
145.737 94.9567 145.798 94.9443 145.669 94.9707 cv
f
145.935 95.0571 mo
146.59 94.751 145.982 95.0571 145.935 95.0571 cv
f
146.706 94.6714 mo
147.134 94.6558 146.972 94.662 146.805 94.6682 cv
146.667 94.6733 146.524 94.6784 146.706 94.6714 cv
f
145.803 94.6865 mo
145.917 94.7158 145.876 94.7029 145.83 94.6902 cv
145.788 94.6787 145.743 94.6673 145.803 94.6865 cv
f
144.246 96.1318 mo
143.94 96.1318 144.355 96.1318 144.246 96.1318 cv
f
145.507 95.5371 mo
145.345 95.6543 145.401 95.6149 145.455 95.5754 cv
145.486 95.553 145.517 95.5306 145.507 95.5371 cv
f
137.7 97.3027 mo
138.165 97.1601 137.764 97.1294 137.7 97.3027 cv
f
139.13 100.827 mo
139.344 100.827 139.282 100.827 139.13 100.827 cv
f
137.425 101.906 mo
137.385 101.98 137.966 101.416 137.86 101.336 cv
137.634 101.175 137.458 101.844 137.425 101.906 cv
f
138.022 101.589 mo
138.001 101.604 137.361 101.967 137.571 102.136 cv
137.601 102.162 li
137.697 102.162 137.748 101.939 137.839 101.896 cv
137.839 101.928 137.677 102.62 137.946 102.061 cv
138.059 102.131 137.621 102.305 137.662 102.384 cv
137.682 102.416 137.69 102.413 137.699 102.409 cv
137.714 102.403 137.733 102.397 137.821 102.551 cv
138.107 102.339 li
138.215 102.422 138.251 102.741 138.593 102.895 cv
138.514 103.233 137.981 103.126 137.981 103.236 cv
137.981 103.389 138.06 103.366 138.209 103.409 cv
137.875 103.763 li
137.908 103.864 138.388 103.881 138.522 103.857 cv
138.319 104.028 137.832 104.042 137.657 104.317 cv
137.509 104.544 138.356 104.179 139.046 103.813 cv
139.753 103.44 140.296 103.066 139.447 103.327 cv
139.404 103.373 139.288 102.938 139.186 102.503 cv
139.086 102.07 138.999 101.637 139.014 101.679 cv
138.971 101.55 138.815 101.592 138.67 101.635 cv
138.553 101.669 138.443 101.704 138.405 101.647 cv
138.426 101.678 138.997 101.16 138.879 101.084 cv
138.767 101.036 li
138.714 101.036 138.171 101.478 138.022 101.589 cv
f
136.782 103.25 mo
136.737 103.252 136.763 103.249 136.797 103.245 cv
136.846 103.24 136.91 103.234 136.782 103.25 cv
137.643 103.476 mo
138.246 102.475 137.123 102.311 137.123 102.744 cv
137.047 102.835 136.599 102.861 136.6 102.852 cv
136.597 102.867 136.463 103.856 136.401 103.763 cv
136.59 104.04 137.557 103.629 137.643 103.476 cv
f
138.047 102.939 mo
138.317 103.066 138.064 102.947 138.047 102.939 cv
f
135.654 101.667 mo
135.654 101.747 135.654 101.707 135.654 101.667 cv
135.654 101.628 135.654 101.589 135.654 101.667 cv
f
141.877 107.574 mo
141.855 107.611 141.242 108.466 141.8 108.466 cv
142.399 108.466 141.897 106.959 141.997 106.959 cv
141.517 106.959 141.9 107.536 141.877 107.574 cv
f
139.917 108.291 mo
140.279 108.322 140.154 108.311 140.028 108.3 cv
139.944 108.293 139.86 108.286 139.917 108.291 cv
f
140.417 108.145 mo
140.431 108.15 140.388 108.133 140.345 108.117 cv
140.27 108.088 140.194 108.06 140.417 108.145 cv
f
139.482 108.522 mo
139.857 108.522 139.38 108.522 139.482 108.522 cv
f
145.465 108.646 mo
145.306 108.621 145.371 108.632 145.439 108.643 cv
145.5 108.653 145.564 108.663 145.465 108.646 cv
f
146.148 108.976 mo
146.307 109.024 146.225 108.921 146.064 108.819 cv
145.825 108.668 145.414 108.517 145.364 108.853 cv
145.272 109.438 146.806 109.138 146.148 108.976 cv
f
134.692 112.207 mo
134.822 112.154 134.7 112.21 134.575 112.267 cv
134.402 112.345 134.221 112.423 134.692 112.207 cv
f
134.054 112.469 mo
133.91 112.567 133.944 112.793 134.054 112.469 cv
f
133.774 112.47 mo
133.709 112.33 133.68 112.379 133.693 112.428 cv
133.701 112.461 133.728 112.494 133.774 112.47 cv
f
133.321 112.159 mo
133.101 112.159 133.589 112.159 133.321 112.159 cv
f
133.49 112.567 mo
133.771 112.567 133.319 112.567 133.49 112.567 cv
f
133.389 112.65 mo
133.439 112.556 133.406 112.613 133.374 112.671 cv
133.338 112.735 133.303 112.8 133.389 112.65 cv
f
133.679 110.847 mo
133.848 110.865 133.786 110.856 133.712 110.846 cv
133.636 110.837 133.546 110.827 133.679 110.847 cv
f
133.48 110.573 mo
133.676 110.53 133.578 110.551 133.482 110.572 cv
133.389 110.592 133.297 110.612 133.48 110.573 cv
f
131.367 108.914 mo
131.367 108.736 131.367 108.805 131.367 108.874 cv
131.367 108.93 131.367 108.985 131.367 108.914 cv
f
130.842 108.548 mo
130.793 108.397 130.812 108.454 130.83 108.511 cv
130.844 108.554 130.858 108.598 130.842 108.548 cv
f
130.643 108.614 mo
130.665 108.535 130.647 108.6 130.628 108.664 cv
130.605 108.746 130.582 108.827 130.643 108.614 cv
f
130.756 116.55 mo
130.556 116.5 130.646 116.518 130.723 116.536 cv
130.778 116.549 130.825 116.561 130.756 116.55 cv
f
131.057 116.742 mo
130.853 117.007 131.107 116.742 131.057 116.742 cv
f
131.507 116.919 mo
131.429 116.85 131.48 116.89 131.529 116.931 cv
131.582 116.975 131.633 117.02 131.507 116.919 cv
f
131.433 116.814 mo
131.427 116.487 131.397 116.814 131.433 116.814 cv
f
131.296 117.379 mo
131.242 117.086 131.264 117.211 131.287 117.336 cv
131.307 117.446 131.327 117.556 131.296 117.379 cv
f
131.423 117.087 mo
131.423 117.14 131.419 117.507 131.423 117.087 cv
f
130.991 117.374 mo
130.829 117.262 130.891 117.307 130.956 117.353 cv
131.01 117.391 131.066 117.429 130.991 117.374 cv
f
156.742 118.267 mo
156.361 118.074 156.491 118.138 156.619 118.203 cv
156.69 118.239 156.761 118.275 156.742 118.267 cv
f
158.627 98.2881 mo
158.477 98.2881 158.312 97.9336 158.111 97.8467 cv
158.387 97.8779 158.598 98.2881 158.627 98.2881 cv
173.451 96.962 mo
173.8 96.8051 173.582 96.9024 173.451 96.962 cv
177.591 112.117 mo
177.627 112.074 177.6 112.105 177.573 112.137 cv
177.541 112.175 177.509 112.213 177.591 112.117 cv
170.376 116.792 mo
171.117 115.998 171.346 120.126 171.184 120.126 cv
171.277 119.895 li
171.331 119.967 172.973 123.172 173.41 122.677 cv
173.611 122.467 170.414 117.913 171.808 117.913 cv
172.2 117.913 173.515 119.772 173.464 119.801 cv
175.972 118.382 172.063 114.909 174.449 114.909 cv
174.344 114.909 174.482 115.378 174.504 115.424 cv
174.505 115.426 179.03 113.142 177.738 111.657 cv
177.205 111.666 li
177.911 111.555 177.045 110.687 176.79 110.453 cv
175.676 109.436 176.898 109.774 176.898 109.199 cv
176.866 109.009 li
176.794 108.932 174.822 108.93 175.079 108.462 cv
175.116 108.37 li
175.532 108.37 175.684 107.623 176.047 107.742 cv
176.213 107.791 176.039 108.553 176.194 108.553 cv
178.042 108.553 177.398 108.758 178.359 110.218 cv
178.723 110.897 178.779 110.048 178.665 109.199 cv
178.554 108.369 178.282 107.539 177.977 108.134 cv
179.109 106.545 179.835 106.303 179.262 103.674 cv
180.057 103.803 180.379 105.875 180.982 105.875 cv
180.523 105.875 181.656 105.468 181.39 105.785 cv
181.373 105.804 180.56 104.831 180.503 104.652 cv
180.567 104.627 180.724 104.685 180.861 104.742 cv
180.987 104.795 181.096 104.848 181.099 104.836 cv
181.12 104.773 179 102.761 178.898 102.761 cv
178.878 102.766 li
178.698 102.809 179.113 103.077 179.151 103.112 cv
178.993 103.338 179.233 103.136 179.205 103.586 cv
178.559 102.959 177.97 102.655 177.427 102.977 cv
177.4 102.92 li
177.368 102.985 177.455 102.833 177.501 102.681 cv
177.554 102.509 177.553 102.337 177.264 102.48 cv
177.024 102.584 177.488 102.697 177.423 102.8 cv
177.503 102.666 176.781 102.664 176.684 102.641 cv
177.368 101.797 177.288 100.648 178.648 101.106 cv
178.719 101.13 180.684 101.175 180.695 101.068 cv
180.787 100.115 180.874 100.3 181.086 100.485 cv
181.26 100.639 181.52 100.792 181.938 100.301 cv
181.616 99.9995 li
181.778 100.129 182.102 100.263 182.27 100.537 cv
182.25 100.533 182.111 100.804 181.968 101.074 cv
181.809 101.374 181.645 101.674 181.633 101.601 cv
181.747 102.293 183.458 104.062 183.629 104.335 cv
183.792 104.599 183.981 103.568 183.817 103.288 cv
184.186 103.273 li
184.17 103.185 183.976 102.134 183.753 102.134 cv
183.767 102.134 184.111 102.325 184.009 102.121 cv
183.677 101.468 182.915 101.664 182.669 100.932 cv
182.582 100.68 184.116 100.897 184.41 100.897 cv
183.871 100.897 185.903 99.4854 185.712 100.051 cv
185.858 99.6109 184.502 99.5176 184.336 99.2714 cv
184.473 99.2984 184.827 99.3394 184.827 99.0962 cv
184.45 98.7754 li
184.49 98.7754 184.54 98.8736 184.559 98.7681 cv
184.643 99.0723 186.951 99.4141 186.976 99.3306 cv
186.564 99.0024 li
187.373 98.4678 185.142 98.4726 185.163 98.4195 cv
185.241 98.4956 185.329 98.5581 185.429 98.6054 cv
183.626 98.1548 182 97.5361 180.117 97.4644 cv
180.746 97.8662 li
180.519 98.2456 174.342 96.9009 173.191 96.8227 cv
173.39 96.7744 li
172.077 96.6582 li
172.064 96.7272 172.02 96.7266 171.975 96.7262 cv
171.931 96.7257 171.886 96.7252 171.87 96.7934 cv
171.89 96.6943 172.353 97.0713 172.358 97.0791 cv
172.207 97.0895 171.956 97.0355 171.678 96.9817 cv
171.291 96.9066 170.852 96.8315 170.561 96.9302 cv
170.659 97.314 li
170.419 97.2441 167.941 95.8716 167.782 96.419 cv
168.084 96.6787 li
167.685 96.5538 167.115 96.5554 166.568 96.5569 cv
165.912 96.5587 165.289 96.5605 165.031 96.3452 cv
165.095 96.3291 165.372 96.3316 165.372 96.2217 cv
165.372 95.9653 164.624 96.3765 164.625 96.3887 cv
164.626 96.4888 164.825 96.437 164.881 96.4345 cv
164.839 96.5982 163.991 96.4751 163.991 96.6855 cv
163.991 96.3794 165.16 96.2276 165.111 95.959 cv
164.929 95.1294 161.763 95.5464 161.871 95.5825 cv
161.584 95.527 161.338 95.5662 161.089 95.6054 cv
160.899 95.6351 160.707 95.6649 160.492 95.6533 cv
160.321 95.7099 158.875 95.9931 158.87 96.1836 cv
159.451 96.2925 li
159.199 96.4516 158.148 96.27 158.117 96.5445 cv
158.101 96.7261 159.011 96.9078 159.011 96.9741 cv
158.936 97.0571 158.03 96.833 157.867 96.7559 cv
158.104 96.7133 li
158.185 96.5411 157.916 96.6471 157.722 96.753 cv
157.6 96.82 157.508 96.8872 157.554 96.8838 cv
157.599 96.9252 157.683 96.9228 157.767 96.9204 cv
157.837 96.9184 157.907 96.9163 157.954 96.94 cv
157.925 96.9521 157.855 96.9452 157.777 96.9381 cv
157.647 96.9264 157.495 96.9146 157.476 96.9921 cv
157.438 97.1594 157.878 97.1567 158.019 97.1541 cv
158.079 97.153 158.085 97.1519 157.975 97.1641 cv
157.759 97.1889 156.946 96.8149 156.994 96.688 cv
157.036 96.5787 157.023 96.744 156.99 96.9092 cv
156.956 97.0742 156.902 97.2391 156.862 97.1314 cv
157.054 97.6206 157.554 97.7696 158.07 97.8413 cv
157.65 97.9501 li
157.6 98.0537 157.985 99.2285 156.916 98.665 cv
158.224 98.665 156.406 96.2437 155.823 96.4677 cv
154.797 96.8637 156.324 98.0674 156.316 98.0991 cv
156.037 98.0449 153.58 97.3276 153.592 97.4931 cv
153.594 97.5176 154.282 97.8179 154.377 97.8394 cv
154.382 97.9629 154.059 97.8984 154.211 98.0225 cv
154.192 98.04 li
154.082 98.0551 li
154.178 98.0551 153.872 97.7587 153.831 97.7275 cv
153.707 97.7827 152.891 98.4082 152.891 97.8833 cv
152.891 97.8244 152.498 98.0017 152.048 98.1791 cv
151.475 98.4048 150.809 98.6305 150.742 98.3691 cv
150.802 98.2739 151.105 98.3247 151.113 98.2475 cv
150.263 97.9736 li
150.676 98.5698 li
150.622 98.7959 li
149.828 98.25 149.843 99.1353 149.79 99.25 cv
149.714 99.3689 149.464 99.2796 149.252 99.1902 cv
149.091 99.122 148.952 99.0536 148.931 99.0786 cv
148.802 99.185 li
148.742 99.2788 149.221 99.4306 149.265 99.48 cv
148.711 99.7598 148.102 98.815 147.794 98.5742 cv
147.958 98.5232 148.366 98.5593 148.774 98.5954 cv
149.577 98.6665 150.377 98.7376 149.302 98.1446 cv
148.299 97.5937 147.67 97.7349 146.825 97.6089 cv
147.172 97.4497 li
147.134 97.2483 146.817 97.2996 146.61 97.3509 cv
146.512 97.3751 146.438 97.3993 146.43 97.397 cv
146.697 96.9614 145.842 97.4887 145.742 97.4937 cv
145.927 97.1982 li
144.906 97.3413 li
145.115 97.4814 li
144.15 97.3751 143.757 97.8003 142.877 98.1806 cv
142.88 98.2842 li
142.932 98.3486 143.325 98.1216 143.423 98.103 cv
143.453 99.1591 141.439 99.5678 141.417 99.9243 cv
141.425 99.8322 141.456 100.35 141.535 100.869 cv
141.656 101.662 141.89 102.455 142.329 101.061 cv
142.71 102.259 142.548 102.005 142.476 102.684 cv
142.643 102.783 li
143.632 102.783 143.968 101.584 144.586 100.963 cv
144.643 100.91 143.657 100.232 144.347 99.8897 cv
144.916 99.6044 145.892 99.2583 146.014 99.1846 cv
145.706 99.1846 144.589 100.011 145.133 100.555 cv
145.405 100.833 146.01 100.827 146.594 100.821 cv
146.873 100.818 147.148 100.815 147.379 100.843 cv
147.003 100.931 145.344 100.977 145.3 101.425 cv
145.384 101.603 li
145.539 101.536 146.065 101.393 146.024 101.439 cv
146.002 101.579 146.06 101.72 146.02 101.845 cv
145.322 102.059 143.681 103.569 142.43 102.944 cv
142.039 103.233 142.444 101.737 142.359 101.646 cv
141.746 100.995 141.877 102.925 141.88 102.935 cv
141.894 103 138.916 104.434 138.772 104.434 cv
139.425 104.434 137.723 105.248 137.861 104.919 cv
137.742 105.244 140.273 106.73 137.605 106.73 cv
136.123 106.73 136.26 107.868 136.302 109.225 cv
136.995 109.472 138.341 108.764 139.569 108.055 cv
140.948 107.26 142.18 106.466 142.18 107.021 cv
142.18 107.273 145.634 108.708 143.021 108.708 cv
142.921 108.822 li
142.921 110.376 144.969 107.885 144.302 107.885 cv
144.406 107.885 144.679 108.153 144.723 108.137 cv
144.663 108.204 142.97 106.337 142.88 106.065 cv
143.098 105.965 li
143.47 105.965 146.239 109.37 146.544 108.963 cv
146.531 108.98 146.571 108.917 146.616 108.854 cv
146.671 108.777 146.733 108.701 146.716 108.766 cv
146.706 108.804 145.843 107.877 146.005 107.877 cv
146.143 107.877 147.175 107.513 147.224 107.891 cv
146.997 108.357 li
147.131 108.667 147.297 108.209 147.299 108.206 cv
147.334 108.457 li
147.367 108.566 146.809 108.484 147.03 108.721 cv
147.463 108.796 li
147.456 108.899 147.362 109.032 147.363 109.381 cv
147.721 109.167 li
147.721 109.282 147.522 109.359 147.639 109.568 cv
147.535 109.378 148.135 109.396 148.776 109.414 cv
149.451 109.432 150.173 109.451 150.173 109.228 cv
150.692 111.294 148.945 111.522 147.272 111.212 cv
147.029 111.167 144.104 110.874 144.932 111.598 cv
144.384 111.125 143.111 110.548 142.507 110.403 cv
141.955 110.259 142.775 109.477 142.538 109.127 cv
141.902 108.174 136.929 110.212 136.37 110.576 cv
135.06 111.399 132.081 116.674 133.364 118.11 cv
133.905 118.711 134.458 119.689 135.158 120.465 cv
136.453 122.091 138.275 120.821 139.834 120.632 cv
142.408 120.376 142.449 124.453 143.165 126.396 cv
143.765 127.961 142.147 129.133 143.304 130.864 cv
144.106 132.049 144.101 134.456 144.762 135.481 cv
146.699 138.486 149.798 131.741 150.341 130.849 cv
150.182 129.915 154.078 126.912 151.704 125.348 cv
151.09 124.97 156.522 119.702 155.713 118.543 cv
155.86 118.728 152.761 118.7 152.888 118.7 cv
153.574 117.541 148.936 113.703 149.317 111.842 cv
149.397 112.013 149.694 112.633 149.91 112.633 cv
149.995 112.633 150.045 112.194 150.064 112.088 cv
150.115 112.847 153.789 118.01 153.599 118.22 cv
154.816 116.859 158.411 116.869 158.349 114.637 cv
158.351 114.749 156.657 113.225 156.999 113.225 cv
156.573 113.225 156.331 114.041 155.707 114.041 cv
155.295 114.041 155.784 113.192 155.335 113.192 cv
155.229 113.192 155.262 113.522 155.242 113.539 cv
155.264 113.535 153.61 111.591 154.67 111.751 cv
154.852 111.772 156.144 113.591 156.638 112.997 cv
156.866 112.721 158.055 113.196 159.234 113.672 cv
160.255 114.083 161.269 114.495 161.643 114.418 cv
161.597 114.593 161.44 114.593 161.317 114.593 cv
161.243 114.592 161.181 114.592 161.165 114.63 cv
161.09 114.818 162.305 115.856 162.305 114.66 cv
161.675 114.831 164.746 121.427 165.023 119.543 cv
165.069 119.221 164.862 117.129 165.431 116.916 cv
165.907 116.735 167.21 115.348 167.392 114.726 cv
167.392 114.985 168.367 114.795 168.424 114.543 cv
168.697 115.472 169.905 117.282 170.376 116.792 cv
f
182.278 100.537 mo
182.278 100.537 li
cp
f
174.848 115.733 mo
175.029 115.586 173.683 116.695 174.848 115.733 cv
cp
f
183.269 101.134 mo
182.864 100.953 183.623 101.294 183.269 101.134 cv
cp
f
155.404 128.589 mo
155.37 128.531 155.265 127.429 155.093 127.429 cv
155.664 127.429 153.176 129.104 153.293 128.92 cv
153.179 129.099 152.901 132.354 153.14 132.378 cv
154.835 132.6 154.895 129.865 155.15 128.853 cv
155.128 128.939 155.652 129.004 155.404 128.589 cv
f
165.711 119.957 mo
165.62 119.772 165.434 119.267 165.163 119.267 cv
164.098 119.267 166.782 121.958 165.711 119.957 cv
cp
f
169.215 118.507 mo
169.095 118.693 169.52 118.374 169.363 117.941 cv
169.293 117.759 169.208 118.518 169.215 118.507 cv
cp
f
169.318 118.983 mo
169.226 118.632 169.395 119.272 169.318 118.983 cv
cp
f
169.365 119.493 mo
169.363 119.745 169.411 119.493 169.365 119.493 cv
cp
f
169.667 119.933 mo
169.598 119.661 169.774 120.351 169.667 119.933 cv
cp
f
169.762 120.264 mo
169.741 120.326 169.909 120.538 169.762 120.264 cv
cp
f
170.602 121.952 mo
170.144 121.66 171.179 122.325 170.602 121.952 cv
cp
f
171.083 122.497 mo
170.671 122.072 171.669 123.072 171.083 122.497 cv
cp
f
170.973 122.312 mo
170.939 122.103 170.934 122.068 170.973 122.312 cv
cp
f
171.402 123.105 mo
171.349 122.67 171.461 123.588 171.402 123.105 cv
cp
f
171.398 122.964 mo
171.704 122.964 171.296 122.964 171.398 122.964 cv
cp
f
171.57 123.395 mo
171.272 123.168 171.868 123.535 171.57 123.395 cv
cp
f
171.917 123.907 mo
171.142 123.52 172.58 124.231 171.917 123.907 cv
cp
f
173.506 125.141 mo
174.153 123.923 li
173.752 123.538 li
173.665 123.533 li
173.536 123.726 li
173.602 123.842 173.783 123.83 173.817 124.002 cv
173.639 124.002 173.773 123.939 173.708 123.869 cv
172.721 122.879 172.088 121.333 170.227 120.93 cv
170.563 121.363 172.889 125.386 173.506 125.141 cv
cp
f
173.297 123.123 mo
173.269 123.13 173.705 123.007 173.297 123.123 cv
cp
f
174.361 124.224 mo
174.986 124.419 173.912 124.077 174.361 124.224 cv
cp
f
175.056 125.954 mo
175.385 126.259 176.918 126.246 176.72 126.349 cv
176.971 126.141 li
177.008 126.05 176.066 125.698 176.026 125.737 cv
176.493 125.604 li
176.339 125.142 173.377 125.393 173.5 125.393 cv
173.359 125.393 175.067 125.964 175.056 125.954 cv
cp
f
177.609 126.356 mo
178.061 126.423 177.132 125.983 177.106 126.042 cv
176.988 126.352 li
177.157 126.419 177.364 126.326 177.609 126.356 cv
cp
f
177.839 126.286 mo
178.055 126.676 177.366 125.517 177.839 126.286 cv
cp
f
179.038 126.306 mo
179.281 126.201 178.431 126.167 178.248 126.269 cv
178.471 126.336 178.801 126.397 179.038 126.306 cv
cp
f
177.977 126.643 mo
178.024 126.643 178.636 126.985 178.598 126.753 cv
178.506 126.208 177.897 126.643 177.977 126.643 cv
cp
f
179.427 126.851 mo
179.742 126.902 180.467 126.333 180.745 126.146 cv
180.375 126.12 179.165 126.793 179.427 126.851 cv
cp
f
179.841 122.897 mo
179.927 122.823 180.388 122.332 180.06 122.332 cv
178.955 122.332 177.098 123.974 178.198 125.075 cv
178.282 125.129 li
178.365 125.129 178.454 125.077 178.55 125.077 cv
178.558 125.077 178.599 124.21 178.532 124.109 cv
178.774 123.98 li
178.859 124.071 178.782 124.829 179.095 124.829 cv
178.984 124.829 179.542 123.356 179.604 123.186 cv
179.227 123.204 178.958 123.284 178.668 123.446 cv
178.296 122.18 179.364 123.318 179.841 122.897 cv
cp
f
179.437 123.594 mo
179.997 123.594 179.255 123.594 179.437 123.594 cv
cp
f
180.129 123.714 mo
180.284 123.759 179.48 123.533 180.129 123.714 cv
cp
f
179.229 125.041 mo
179.435 125.309 179.474 124.853 179.487 124.72 cv
179.537 124.384 179.086 125.078 179.148 125.026 cv
179.229 125.041 li
cp
f
179.095 124.884 mo
179.032 124.964 178.924 125.102 179.095 124.884 cv
cp
f
180.939 123.625 mo
181.34 123.392 180.861 123.625 180.939 123.625 cv
cp
f
180.86 123.279 mo
180.999 122.945 180.977 123.568 181.074 122.843 cv
181.388 122.866 li
181.189 122.406 181.299 122.562 181.115 122.157 cv
180.938 122.068 180.843 123.479 180.86 123.279 cv
cp
f
181.305 122.013 mo
181.256 121.868 181.448 122.515 181.305 122.013 cv
cp
f
180.85 124.315 mo
180.85 123.642 180.85 124.764 180.85 124.315 cv
cp
f
181.198 124.213 mo
181.99 124.414 li
182.147 123.976 181.072 123.841 181.198 124.213 cv
cp
f
181.918 123.604 mo
181.479 123.385 182.083 123.689 181.918 123.604 cv
cp
f
181.966 123.187 mo
182.536 122.852 181.78 123.314 181.966 123.187 cv
cp
f
187.404 125.213 mo
185.173 124.178 183.508 123.36 182.029 123.24 cv
181.993 123.215 181.969 123.471 181.951 123.337 cv
182.195 123.446 182.586 124.044 182.964 123.873 cv
182.833 123.929 182.465 123.913 182.402 124.01 cv
182.727 124.527 li
182.869 124.527 182.933 124.27 182.994 124.178 cv
183.01 124.879 184.118 124.975 184.118 126.073 cv
184.118 126.474 186.623 126.056 185.953 126.056 cv
186.832 125.469 187.741 127.561 188.321 126.991 cv
188.459 126.817 li
188.474 126.576 186.989 125.978 187.273 125.517 cv
187.241 125.572 187.996 125.483 187.404 125.213 cv
cp
f
183.488 123.563 mo
184.005 123.678 184.089 123.696 183.488 123.563 cv
cp
f
183.055 125.225 mo
182.977 125.225 183.459 125.225 183.055 125.225 cv
cp
f
182.305 125.675 mo
182.174 125.71 181.986 125.76 181.904 126.129 cv
181.824 126.328 182.244 125.696 182.305 125.675 cv
cp
f
181.523 126.014 mo
181.774 126.014 181.316 126.014 181.523 126.014 cv
cp
f
179.802 126.203 mo
180.237 125.71 179.745 126.155 179.802 126.203 cv
cp
f
179.241 126.197 mo
179.705 126.075 li
179.431 125.774 179.16 126.235 179.241 126.197 cv
cp
f
187.792 125.177 mo
188.604 125.949 189.084 124.484 189.059 124.484 cv
188.861 124.452 li
188.942 124.452 187.976 125.354 187.792 125.177 cv
cp
f
187.57 125.171 mo
187.833 125.217 187.361 125.135 187.57 125.171 cv
cp
f
187.214 123.737 mo
187.196 123.792 187.704 123.854 187.214 123.737 cv
cp
f
188.426 124.004 mo
188.688 124.2 188.045 123.662 188.426 124.004 cv
cp
f
188.703 124.084 mo
188.83 124.167 189.36 124.8 189.282 124.8 cv
189.972 124.8 188.064 123.662 188.703 124.084 cv
cp
f
189.812 125.167 mo
189.782 125.225 190.318 125.806 190.218 125.428 cv
189.993 124.984 189.946 124.777 189.812 125.167 cv
cp
f
190.436 125.6 mo
191.036 126.207 190.069 125.237 190.436 125.6 cv
cp
f
190.369 125.933 mo
190.621 126.096 190.131 125.773 190.369 125.933 cv
cp
f
190.713 125.918 mo
190.399 125.605 191.311 126.509 190.713 125.918 cv
cp
f
191.052 125.877 mo
191.384 126.675 190.899 125.514 191.052 125.877 cv
cp
f
191.408 126.45 mo
191.618 126.611 191.863 126.798 191.408 126.45 cv
cp
f
191.702 126.267 mo
191.61 127.05 191.636 125.905 191.702 126.267 cv
cp
f
191.926 126.758 mo
191.965 126.835 192.353 127.377 191.926 126.758 cv
cp
f
193.582 129.179 mo
193.59 129.069 193.523 128.433 193.34 128.433 cv
193.207 128.433 193.436 129.179 193.582 129.179 cv
cp
f
191.245 126.323 mo
191.003 126.323 191.488 126.323 191.245 126.323 cv
cp
f
188.297 126.107 mo
187.995 126.107 188.599 126.107 188.297 126.107 cv
cp
f
189.262 126.403 mo
189.262 126.229 189.262 126.598 189.262 126.403 cv
cp
f
188.458 126.757 mo
188.784 126.757 188.328 126.757 188.458 126.757 cv
cp
f
188.392 126.581 mo
188.347 126.573 188.281 126.615 188.392 126.581 cv
cp
f
188.314 126.326 mo
188.314 126.437 188.314 126.214 188.314 126.326 cv
cp
f
188.605 126.222 mo
188.605 126.003 188.605 126.44 188.605 126.222 cv
cp
f
192.187 130.435 mo
192.114 130.323 191.917 129.744 192.043 129.744 cv
191.535 129.744 192.343 131.587 192.806 131.587 cv
193.166 131.587 192.222 130.541 192.187 130.435 cv
cp
f
197.038 129.517 mo
196.82 129.313 196.621 129.453 196.52 129.676 cv
196.52 130.046 197.257 129.721 197.038 129.517 cv
cp
f
197.587 128.975 mo
197.634 128.943 196.743 129.218 197.138 129.282 cv
197.363 129.294 197.625 128.975 197.587 128.975 cv
cp
f
176.619 124.394 mo
176.639 124.518 177.147 124.545 177.161 124.545 cv
177.411 123.683 177.858 123.21 178.158 122.632 cv
178.122 122.722 177.422 120.813 177.827 121.13 cv
177.872 121.13 178.269 121.189 178.215 121.026 cv
178.231 121.073 177.148 120.231 177.397 120.202 cv
177.036 120.231 175.784 122.092 175.048 122.136 cv
174.796 122.924 174.828 123.531 175.18 124.142 cv
175.066 123.984 176.053 124.374 175.736 124.374 cv
175.97 124.374 176.536 123.968 176.619 124.394 cv
cp
f
177.599 120.371 mo
177.813 120.393 177.711 120.383 177.599 120.371 cv
cp
f
177.878 120.292 mo
177.871 120.441 177.87 120.447 177.878 120.292 cv
cp
f
177.541 119.579 mo
177.063 120.092 178.543 119.185 178.094 118.728 cv
178.191 118.825 177.642 119.467 177.541 119.579 cv
cp
f
178.148 118.751 mo
178.401 118.083 177.991 118.552 178.148 118.751 cv
cp
f
178.655 118.062 mo
178.444 117.262 178.915 118.993 178.655 118.062 cv
cp
f
178.963 118.515 mo
178.785 118.325 178.925 119.117 178.911 119.117 cv
179.203 119.117 179.017 118.923 179.275 118.849 cv
179.148 118.944 179.047 119.404 179.127 119.507 cv
179.069 119.429 179.43 119.624 179.292 119.624 cv
179.485 119.624 179.684 118.786 179.6 118.786 cv
179.399 118.961 179.226 118.786 178.963 118.515 cv
cp
f
179.745 119.151 mo
179.309 119.727 179.761 119.154 179.745 119.151 cv
cp
f
180.379 120.648 mo
180.175 120.37 180.59 119.066 180.122 119.066 cv
180.352 119.066 179.693 119.883 179.63 119.936 cv
179.437 119.22 178.826 120.441 179.057 120.441 cv
179.163 120.441 179.543 120.081 179.537 120.058 cv
179.854 120.286 179.699 120.956 180.192 120.956 cv
180.667 120.956 179.717 119.787 180.379 120.648 cv
cp
f
179.899 119.232 mo
180.201 119.232 179.78 118.732 179.638 118.7 cv
179.899 119.232 li
cp
f
179.604 118.396 mo
179.767 118.562 179.946 118.903 180.182 118.903 cv
180.719 118.903 179.151 117.971 179.604 118.396 cv
cp
f
178.609 116.052 mo
177.362 116.052 178.246 117.837 179.078 118.075 cv
179.214 118.009 178.997 117.879 178.997 117.794 cv
179.199 117.919 179.351 118.112 179.476 118.276 cv
179.237 118.007 179.249 118.566 179.246 118.591 cv
179.51 118.354 179.4 118.699 179.557 118.575 cv
179.62 118.522 178.124 116.052 178.609 116.052 cv
cp
f
178.875 117.912 mo
178.607 117.757 179.107 118.058 178.875 117.912 cv
cp
f
179.633 117.858 mo
179.696 117.396 179.577 118.255 179.633 117.858 cv
cp
f
179.058 118.409 mo
179.271 118.409 178.845 118.409 179.058 118.409 cv
cp
f
178.88 118.221 mo
178.692 118.221 179.07 118.221 178.88 118.221 cv
cp
f
177.305 120.041 mo
177.305 120.308 177.305 119.775 177.305 120.041 cv
cp
f
179.051 120.608 mo
179.366 120.608 178.736 120.608 179.051 120.608 cv
cp
f
178.682 120.776 mo
178.682 120.952 178.682 120.602 178.682 120.776 cv
cp
f
178.904 120.761 mo
178.904 120.878 178.904 120.643 178.904 120.761 cv
cp
f
178.617 120.941 mo
178.617 121.109 178.617 120.772 178.617 120.941 cv
cp
f
178.433 121.027 mo
178.146 121.027 178.722 121.027 178.433 121.027 cv
cp
f
178.147 121.25 mo
178.147 121.538 178.147 120.96 178.147 121.25 cv
cp
f
178.592 120.625 mo
178.592 120.397 178.592 120.852 178.592 120.625 cv
cp
f
180.645 121.296 mo
180.478 121.296 180.812 121.296 180.645 121.296 cv
cp
f
180.494 120.873 mo
180.685 120.873 180.303 120.873 180.494 120.873 cv
cp
f
180.17 121.153 mo
180.17 120.978 180.17 121.329 180.17 121.153 cv
cp
f
180.141 121.365 mo
180.361 121.365 179.922 121.365 180.141 121.365 cv
cp
f
180.333 121.714 mo
180.333 121.417 180.333 122.011 180.333 121.714 cv
cp
f
182.437 110.004 mo
182.437 110.148 182.437 109.86 182.437 110.004 cv
cp
f
180.286 111.695 mo
180.529 111.695 180.042 111.695 180.286 111.695 cv
cp
f
176.781 115.288 mo
176.985 115.288 176.575 115.288 176.781 115.288 cv
cp
f
177.613 114.264 mo
177.633 114.315 177.993 114.963 177.993 114.745 cv
178.021 114.553 178.3 113.517 177.989 113.517 cv
177.802 113.601 177.49 113.951 177.613 114.264 cv
cp
f
179.426 110.708 mo
179.167 110.708 179.685 110.708 179.426 110.708 cv
cp
f
179.678 110.372 mo
179.678 110.372 li
cp
f
179.859 111.184 mo
180.016 111.184 179.703 111.184 179.859 111.184 cv
cp
f
180.354 109.458 mo
180.354 109.215 180.354 109.702 180.354 109.458 cv
cp
f
182.877 106.594 mo
182.695 106.594 183.06 106.594 182.877 106.594 cv
cp
f
183.728 105.242 mo
183.865 105.242 183.591 105.242 183.728 105.242 cv
cp
f
183.69 105.05 mo
183.69 105.156 183.69 104.943 183.69 105.05 cv
cp
f
183.591 104.036 mo
183.455 104.036 183.729 104.036 183.591 104.036 cv
cp
f
180.842 106.046 mo
180.842 105.894 180.842 106.198 180.842 106.046 cv
cp
f
180.936 106.123 mo
180.785 106.123 181.087 106.123 180.936 106.123 cv
cp
f
181.628 108.792 mo
181.628 108.427 181.628 109.156 181.628 108.792 cv
cp
f
182.421 108.664 mo
182.518 108.814 182.283 108.725 182.421 108.664 cv
cp
182.313 110.085 mo
182.464 110.062 182.473 109.258 182.547 110.053 cv
182.589 110.062 li
183.003 109.731 182.314 107.464 181.684 107.464 cv
181.505 107.545 li
181.633 107.343 181.511 109.514 181.429 109.24 cv
181.278 109.183 181.39 108.91 181.31 108.935 cv
181.049 109.614 179.661 109.744 179.497 110.558 cv
179.443 110.818 179.973 110.848 179.965 110.853 cv
179.901 111.066 180.056 111.431 180.303 111.431 cv
180.582 111.431 180.402 110.146 180.033 110.338 cv
180.437 110.178 181.083 110.095 181.187 110.053 cv
181.23 110.069 181.212 110.511 181.555 110.511 cv
181.791 110.511 181.627 109.915 181.618 109.941 cv
181.797 110.091 182.361 110.075 182.313 110.085 cv
cp
f
181.103 110.414 mo
181.262 109.995 180.494 110.299 180.372 110.583 cv
180.764 110.84 li
180.603 110.84 181.117 110.376 181.103 110.414 cv
cp
f
182.484 106.677 mo
182.527 106.749 181.3 105.979 181.015 105.979 cv
181.407 106.802 li
181.089 106.938 181.146 107.651 181.47 107.542 cv
181.686 107.387 li
181.695 107.255 181.346 107.246 181.285 107.129 cv
181.574 106.89 182.97 107.558 182.484 106.677 cv
cp
f
182.758 106.302 mo
182.758 106.119 182.448 106.974 182.636 106.511 cv
182.685 106.393 183.175 106.219 183.15 106.043 cv
183.128 105.879 182.775 106.027 182.758 106.302 cv
cp
f
183.267 105.839 mo
183.128 106.3 183.441 105.43 183.267 105.839 cv
cp
f
183.631 105.432 mo
183.65 105.772 183.702 105.26 183.631 105.432 cv
cp
f
183.739 104.652 mo
183.864 104.561 183.694 104.619 183.739 104.652 cv
cp
f
188.211 132.261 mo
188.26 132.583 187.307 130.883 187.307 131.342 cv
186.996 130.825 185.895 128.551 185.944 128.409 cv
185.894 128.291 185.801 126.876 185.717 126.876 cv
185.419 126.876 184.835 129.93 184.474 129.566 cv
183.802 128.898 183.608 127.386 183.775 127.534 cv
183.656 127.348 li
183.468 127.348 183.594 127.609 183.472 127.609 cv
182.318 127.088 li
182.222 127.121 182.243 127.099 182.16 127.099 cv
182.017 127.099 182.421 127.387 182.357 127.474 cv
182.381 127.453 180.559 128.361 181.3 128.419 cv
181.169 128.68 180.939 128.324 180.806 128.607 cv
180.687 127.458 179.244 128.961 179.227 128.961 cv
179.035 128.961 179.263 129.321 179.256 129.362 cv
179.073 129.241 179.188 129.391 179.116 129.536 cv
179.06 129.439 179.075 129.179 179.029 129.125 cv
178.068 130.267 177.175 130.638 175.795 131.381 cv
175.782 131.108 li
175.716 131.53 175.69 132.374 175.604 132.702 cv
175.651 132.512 175.16 132.888 175.35 132.888 cv
175.184 132.47 li
176.513 132.47 173.319 136.121 176.484 135.703 cv
177.7 135.536 178.719 134.825 180.018 134.825 cv
181.237 134.825 181.232 136.082 181.322 136.082 cv
181.536 136.082 181.997 135.274 182.262 135.274 cv
182.273 135.279 li
182.197 135.395 181.542 136.207 181.534 136.182 cv
181.612 136.386 182.171 135.841 182.152 135.811 cv
182.5 136.371 181.433 136.175 181.362 136.366 cv
181.411 136.471 li
181.421 136.598 182.061 136.34 182.142 136.283 cv
183.217 139.377 188.512 135.346 188.211 132.261 cv
cp
f
183.701 128.211 mo
183.783 128.073 183.454 128.602 183.701 128.211 cv
cp
f
181.559 127.463 mo
181.687 127.463 182.298 127.337 181.954 127.155 cv
181.754 127.118 181.509 127.463 181.559 127.463 cv
cp
f
176.275 130.699 mo
176.16 130.699 176.391 130.699 176.275 130.699 cv
cp
f
177.423 130.233 mo
177.423 130.431 177.423 130.036 177.423 130.233 cv
cp
f
179.372 126.971 mo
179.372 126.776 179.372 127.164 179.372 126.971 cv
cp
f
178.913 126.876 mo
178.716 126.876 179.109 126.876 178.913 126.876 cv
cp
f
182.896 138.005 mo
183.381 137.927 182.75 138.025 182.896 138.005 cv
cp
f
183.958 138.177 mo
183.583 138.228 183.188 138.029 183.096 138.029 cv
183.149 138.029 182.117 139.755 183.761 138.705 cv
183.703 139.054 184.208 138.139 183.958 138.177 cv
cp
f
184.222 137.813 mo
184.249 137.888 184.399 138.354 184.222 137.813 cv
cp
f
188.342 140.498 mo
187.998 140.498 188.573 140.498 188.342 140.498 cv
cp
f
188.394 140.387 mo
188.15 140.387 188.638 140.387 188.394 140.387 cv
cp
f
188.074 140.234 mo
187.815 140.234 188.331 140.234 188.074 140.234 cv
cp
f
193.977 137.023 mo
193.851 137.023 193.382 137.007 193.275 137.039 cv
193.308 136.879 193.324 136.71 193.359 136.578 cv
193.412 136.709 193.088 136.704 193.056 136.727 cv
193.029 136.685 193.354 135.787 193.021 135.787 cv
192.845 135.812 li
192.23 136.689 191.779 137.899 191.468 138.374 cv
191.608 138.022 li
190.583 138.862 189.302 139.368 188.178 140.098 cv
188.141 140.206 li
188.611 141.428 193.486 137.023 193.977 137.023 cv
cp
f
181.622 97.25 mo
181.725 97.2974 182.571 97.3149 182.499 97.1362 cv
182.36 96.7769 181.472 97.1821 181.622 97.25 cv
cp
f
172.225 95.8936 mo
172.373 95.915 173.268 96.3794 173.462 96.0771 cv
173.506 96.0005 172.337 95.7808 172.225 95.8936 cv
cp
f
171.922 96.3247 mo
171.279 96.0005 172.145 97.2222 172.563 96.5693 cv
172.664 96.4077 171.931 96.3296 171.922 96.3247 cv
cp
f
171.631 96.3721 mo
171.775 96.1387 171.471 96.6313 171.631 96.3721 cv
cp
f
170.564 96.291 mo
170.019 96.0024 170.809 96.4272 170.564 96.291 cv
cp
f
169.767 95.8647 mo
170.036 96.2656 169.645 95.668 169.767 95.8647 cv
cp
f
170.097 95.8354 mo
169.993 96.2168 171.973 96.2207 172.011 96.0166 cv
172.012 95.873 li
171.886 95.6123 170.117 95.7417 170.097 95.8354 cv
cp
f
172.109 95.6211 mo
172.565 95.6211 172.104 95.6211 172.109 95.6211 cv
cp
f
173.332 95.7461 mo
173.461 95.7461 173.202 95.7461 173.332 95.7461 cv
cp
f
158.794 94.6953 mo
159.193 94.8086 159.023 94.8892 159.384 94.7314 cv
159.144 94.9404 160.867 95.1226 160.924 95.043 cv
161.438 94.3516 158.24 94.5493 158.794 94.6953 cv
cp
f
161.107 95.1895 mo
161.122 95.1626 162.169 95.3003 162.275 95.0776 cv
162.297 95.0234 161.316 94.7549 161.107 95.1895 cv
cp
f
160.574 95.5728 mo
160.574 95.708 160.574 95.438 160.574 95.5728 cv
cp
f
160.851 95.4526 mo
160.851 95.3496 160.851 95.5562 160.851 95.4526 cv
cp
f
160.72 95.5728 mo
160.72 95.7085 160.72 95.438 160.72 95.5728 cv
cp
f
160.817 95.5728 mo
160.817 95.708 160.817 95.438 160.817 95.5728 cv
cp
f
161.132 95.6113 mo
161.545 95.6113 160.72 95.6113 161.132 95.6113 cv
cp
f
162.541 95.1201 mo
162.768 95.1201 162.314 95.1201 162.541 95.1201 cv
cp
f
162.595 95.1396 mo
162.595 95.25 162.595 95.0293 162.595 95.1396 cv
cp
f
163.121 95.4199 mo
163.354 95.4199 162.886 95.4199 163.121 95.4199 cv
cp
f
159.098 95.4648 mo
159.098 95.6128 159.098 95.3179 159.098 95.4648 cv
cp
f
159.32 95.376 mo
159.32 95.2852 159.32 95.4688 159.32 95.376 cv
cp
f
159.829 95.1479 mo
159.829 95.3081 159.829 94.9888 159.829 95.1479 cv
cp
f
158.423 94.4663 mo
159.053 94.4663 157.792 94.4663 158.423 94.4663 cv
cp
f
157.918 95.8682 mo
158.177 95.8682 157.659 95.8682 157.918 95.8682 cv
cp
f
158.118 95.8164 mo
158.532 95.8164 157.705 95.8164 158.118 95.8164 cv
cp
f
158.118 96.0356 mo
158.541 96.0356 157.695 96.0356 158.118 96.0356 cv
cp
f
157.612 96.1924 mo
157.612 96.3398 157.612 96.0444 157.612 96.1924 cv
cp
f
157.083 96.5161 mo
157.379 96.5161 156.787 96.5161 157.083 96.5161 cv
cp
f
157.302 96.5474 mo
157.721 96.5474 156.882 96.5474 157.302 96.5474 cv
cp
f
156.894 96.6895 mo
157.269 96.6895 156.517 96.6895 156.894 96.6895 cv
cp
f
158.437 96.3159 mo
158.437 96.4326 158.437 96.1987 158.437 96.3159 cv
cp
f
158.569 96.3159 mo
158.569 96.4326 158.569 96.1987 158.569 96.3159 cv
cp
f
159.042 96.3242 mo
159.042 96.3242 li
cp
f
159.215 96.2773 mo
159.215 96.1855 159.215 96.3706 159.215 96.2773 cv
cp
f
157.639 95.4302 mo
157.956 95.4302 157.323 95.4302 157.639 95.4302 cv
cp
f
156.262 94.5161 mo
156.787 94.5161 155.736 94.5161 156.262 94.5161 cv
cp
f
155.975 94.8667 mo
156.592 94.8667 155.359 94.8667 155.975 94.8667 cv
cp
f
153.379 95.6406 mo
152.495 95.7607 151.797 96.5752 151.769 96.9122 cv
151.765 96.958 152.905 97.7256 153.353 97.3931 cv
152.98 97.6621 152.266 96.0942 153.417 96.0942 cv
153.915 95.9482 154.51 95.7827 155 95.607 cv
154.446 95.5166 153.971 95.5708 153.379 95.6406 cv
f
151.316 97.9062 mo
151.401 98.2035 151.363 98.0551 151.324 97.9068 cv
151.284 97.7586 151.242 97.6105 151.316 97.9062 cv
f
150.788 94.6484 mo
150.917 94.6626 153.487 94.6611 153.447 94.4409 cv
153.422 94.3848 li
153.097 93.7817 150.884 94.6597 150.788 94.6484 cv
cp
f
152.519 94.2861 mo
152.904 94.2886 152.991 94.2891 152.519 94.2861 cv
cp
f
149.237 94.5415 mo
149.202 94.4194 150.703 94.8755 150.728 94.7021 cv
150.763 94.2119 149.241 94.5654 149.237 94.5415 cv
cp
f
151.07 94.4023 mo
151.29 94.4023 150.85 94.4023 151.07 94.4023 cv
cp
f
144.609 101.66 mo
144.635 101.644 144.573 101.707 144.507 101.771 cv
144.389 101.884 144.261 101.998 144.609 101.66 cv
f
143.485 102.587 mo
143.611 102.686 143.552 102.649 143.502 102.611 cv
143.463 102.583 143.428 102.554 143.485 102.587 cv
f
grestore
132.715 143.621 mo
132.715 143.621 li
128.51 143.621 125.492 139.324 123.661 133.153 cv
123.963 132.441 124.327 131.736 124.733 131.597 cv
125.631 131.289 127.926 125.53 127.185 124.886 cv
127.192 124.891 127.201 124.898 127.21 124.905 cv
127.226 124.919 127.243 124.932 127.243 124.932 cv
127.243 124.932 127.227 124.919 127.179 124.88 cv
126.39 124.256 124.962 124.265 124.203 123.982 cv
124.053 123.884 123.701 123.203 123.264 123.203 cv
123.051 123.203 122.818 123.364 122.577 123.833 cv
122.626 122.821 122.259 122.16 121.715 121.655 cv
121.332 116.159 121.586 110.374 122.479 105.259 cv
123.157 105.302 li
122.905 105.464 li
122.897 105.522 122.919 105.545 122.961 105.545 cv
123.114 105.545 123.522 105.227 123.532 105.216 cv
123.389 105.549 li
123.422 105.589 123.473 105.615 123.538 105.615 cv
123.623 105.615 123.73 105.57 123.85 105.454 cv
123.999 105.302 123.933 105.113 123.826 105.113 cv
123.797 105.113 123.765 105.126 123.734 105.158 cv
123.943 104.848 li
123.932 104.84 123.921 104.837 123.91 104.837 cv
123.827 104.837 123.749 105.022 123.671 105.022 cv
123.917 104.6 li
123.791 104.455 li
123.558 104.455 123.533 104.5 123.524 104.5 cv
123.517 104.5 123.521 104.47 123.429 104.357 cv
123.062 104.439 li
123.11 104.225 123.667 103.96 123.667 103.85 cv
123.666 103.92 123.078 104.274 122.595 104.618 cv
122.634 104.41 122.674 104.204 122.715 103.998 cv
123.624 103.936 123.762 102.983 123.367 102.873 cv
123.458 102.86 123.537 102.839 123.57 102.782 cv
123.392 102.534 li
123.246 102.528 123.132 102.508 123.044 102.478 cv
123.348 101.18 123.697 99.9457 124.092 98.7883 cv
124.33 98.7226 124.538 98.6536 124.65 98.6016 cv
124.612 98.5865 124.436 98.5038 124.227 98.4035 cv
124.56 97.4666 124.925 96.5853 125.322 95.7692 cv
125.527 95.7685 125.756 95.7531 125.979 95.7378 cv
126.208 95.722 126.432 95.7062 126.618 95.7062 cv
126.895 95.7062 127.088 95.741 127.095 95.8624 cv
127.111 96.1026 127.041 96.5518 127.221 96.5518 cv
127.242 96.5518 127.266 96.5456 127.295 96.5322 cv
127.287 96.6123 126.786 97.0059 126.888 97.1069 cv
126.94 97.1598 127.002 97.1805 127.067 97.1805 cv
127.214 97.1805 127.373 97.0744 127.465 96.9932 cv
127.428 97.1679 127.509 97.3017 127.696 97.3017 cv
127.728 97.3017 127.763 97.2978 127.801 97.2895 cv
127.766 97.3857 li
127.719 97.3927 127.675 97.3957 127.635 97.3957 cv
127.51 97.3957 127.413 97.3678 127.329 97.3399 cv
127.246 97.312 127.177 97.284 127.11 97.284 cv
126.992 97.284 126.881 97.3692 126.711 97.6885 cv
126.675 97.756 126.733 97.7899 126.831 97.8024 cv
126.344 98.4298 126.929 99.8424 126.73 100.124 cv
126.551 100.364 127.789 100.973 128.003 100.973 cv
130.829 98.8487 li
131.223 98.5075 131.621 98.3639 131.849 98.1195 cv
133.492 100.756 135.871 103.73 138.556 106.613 cv
138.364 106.687 138.061 106.73 137.605 106.73 cv
136.123 106.73 136.26 107.868 136.302 109.225 cv
136.398 109.259 136.507 109.275 136.627 109.275 cv
137.367 109.275 138.511 108.665 139.569 108.055 cv
139.647 108.01 139.724 107.966 139.801 107.921 cv
140.148 108.277 140.5 108.633 140.853 108.984 cv
139.144 109.318 136.748 110.33 136.37 110.576 cv
135.06 111.399 132.081 116.674 133.364 118.11 cv
133.905 118.711 134.458 119.689 135.158 120.465 cv
135.65 121.083 136.217 121.283 136.818 121.283 cv
137.799 121.283 138.867 120.749 139.834 120.632 cv
139.912 120.625 139.988 120.621 140.061 120.621 cv
142.412 120.621 142.471 124.512 143.165 126.396 cv
143.765 127.961 142.147 129.133 143.304 130.864 cv
144.106 132.049 144.101 134.456 144.762 135.481 cv
145.11 136.022 145.497 136.247 145.899 136.247 cv
147.732 136.247 149.896 131.581 150.341 130.849 cv
150.182 129.915 154.078 126.912 151.704 125.348 cv
151.208 125.043 154.662 121.542 155.577 119.599 cv
156.156 119.765 156.688 119.852 157.164 119.852 cv
158.733 119.852 159.689 118.897 159.689 116.647 cv
159.689 119.747 159.166 122.724 158.204 125.496 cv
156.548 130.267 153.591 134.429 149.756 137.557 cv
145.111 141.348 139.178 143.621 132.715 143.621 cv
153.292 128.922 mo
153.177 129.12 152.902 132.354 153.14 132.378 cv
153.205 132.387 153.268 132.391 153.329 132.391 cv
154.84 132.391 154.905 129.826 155.15 128.853 cv
155.141 128.887 155.216 128.917 155.295 128.917 cv
155.419 128.917 155.556 128.843 155.404 128.589 cv
155.375 128.541 155.297 127.762 155.172 127.508 cv
155.191 127.458 155.169 127.429 155.093 127.429 cv
155.121 127.429 155.148 127.458 155.172 127.508 cv
155.059 127.819 153.408 128.934 153.295 128.934 cv
153.289 128.934 153.287 128.931 153.292 128.922 cv
153.292 128.922 153.292 128.922 153.293 128.922 cv
153.293 128.922 153.293 128.922 153.293 128.921 cv
153.293 128.921 153.293 128.921 153.293 128.92 cv
153.293 128.921 153.293 128.921 153.293 128.921 cv
153.293 128.922 153.293 128.922 153.293 128.922 cv
153.292 128.922 153.292 128.922 153.292 128.922 cv
131.263 117.199 mo
131.262 117.199 131.275 117.267 131.287 117.336 cv
131.299 117.404 131.311 117.472 131.312 117.472 cv
131.312 117.472 131.308 117.446 131.296 117.379 cv
131.272 117.246 131.263 117.199 131.263 117.199 cv
130.888 117.304 mo
130.887 117.304 130.921 117.328 130.956 117.353 cv
130.991 117.377 131.026 117.402 131.027 117.402 cv
131.028 117.402 131.018 117.394 130.991 117.374 cv
130.916 117.322 130.889 117.304 130.888 117.304 cv
131.423 117.087 mo
131.422 117.236 131.421 117.286 131.421 117.286 cv
131.421 117.286 131.423 117.121 131.423 117.087 cv
131.467 116.881 mo
131.466 116.881 131.477 116.892 131.507 116.919 cv
131.563 116.964 131.584 116.98 131.585 116.98 cv
131.587 116.98 131.558 116.955 131.529 116.931 cv
131.499 116.906 131.469 116.881 131.467 116.881 cv
131.057 116.742 mo
130.989 116.83 130.972 116.86 130.977 116.86 cv
130.988 116.86 131.09 116.742 131.057 116.742 cv
131.422 116.669 mo
131.414 116.669 131.409 116.814 131.433 116.814 cv
131.431 116.705 131.426 116.669 131.422 116.669 cv
130.635 116.517 mo
130.63 116.517 130.659 116.526 130.756 116.55 cv
130.775 116.553 130.786 116.554 130.789 116.554 cv
130.799 116.554 130.763 116.545 130.723 116.536 cv
130.684 116.527 130.641 116.517 130.635 116.517 cv
133.415 112.6 mo
133.414 112.6 133.394 112.635 133.374 112.671 cv
133.354 112.706 133.335 112.742 133.335 112.742 cv
133.336 112.742 133.35 112.718 133.389 112.65 cv
133.408 112.614 133.415 112.6 133.415 112.6 cv
134.054 112.469 mo
133.966 112.529 133.945 112.637 133.967 112.637 cv
133.981 112.637 134.012 112.594 134.054 112.469 cv
133.45 112.567 mo
133.585 112.567 li
133.45 112.567 li
133.705 112.378 mo
133.691 112.378 133.686 112.403 133.693 112.428 cv
133.699 112.453 133.716 112.478 133.744 112.478 cv
133.753 112.478 133.763 112.476 133.774 112.47 cv
133.742 112.401 133.719 112.378 133.705 112.378 cv
134.747 112.186 mo
134.746 112.186 134.729 112.192 134.692 112.207 cv
134.464 112.312 134.389 112.347 134.391 112.347 cv
134.394 112.347 134.486 112.307 134.575 112.267 cv
134.665 112.226 134.753 112.186 134.747 112.186 cv
133.262 112.159 mo
133.404 112.159 li
133.262 112.159 li
133.612 110.835 mo
133.606 110.835 133.622 110.839 133.679 110.847 cv
133.749 110.855 133.78 110.857 133.786 110.857 cv
133.795 110.857 133.756 110.852 133.712 110.846 cv
133.669 110.841 133.621 110.835 133.612 110.835 cv
133.593 110.548 mo
133.592 110.548 133.537 110.56 133.482 110.572 cv
133.428 110.583 133.373 110.595 133.374 110.595 cv
133.375 110.595 133.404 110.589 133.48 110.573 cv
133.564 110.555 133.594 110.548 133.593 110.548 cv
131.367 108.801 mo
131.367 108.801 131.367 108.83 131.367 108.914 cv
131.367 108.938 131.367 108.948 131.367 108.948 cv
131.367 108.948 131.367 108.911 131.367 108.874 cv
131.367 108.838 131.367 108.801 131.367 108.801 cv
130.653 108.578 mo
130.653 108.578 130.641 108.621 130.628 108.664 cv
130.616 108.707 130.604 108.75 130.604 108.75 cv
130.604 108.75 130.614 108.715 130.643 108.614 cv
130.65 108.588 130.653 108.578 130.653 108.578 cv
130.849 108.57 mo
130.849 108.57 li
130.849 108.57 li
130.849 108.57 130.84 108.54 130.83 108.511 cv
130.82 108.481 130.811 108.451 130.811 108.451 cv
130.81 108.451 130.818 108.476 130.842 108.548 cv
130.847 108.564 130.849 108.57 130.849 108.57 cv
139.468 108.522 mo
139.629 108.522 li
139.468 108.522 li
139.898 108.289 mo
139.898 108.289 139.903 108.29 139.917 108.291 cv
140.094 108.306 140.155 108.311 140.156 108.311 cv
140.156 108.311 140.092 108.306 140.028 108.3 cv
139.964 108.295 139.9 108.289 139.898 108.289 cv
122.85 105.452 mo
122.812 105.511 122.777 105.563 122.777 105.563 cv
122.777 105.563 122.797 105.533 122.85 105.452 cv
153.237 118.702 mo
153.001 118.702 152.858 118.7 152.888 118.7 cv
152.923 118.64 152.944 118.573 152.953 118.5 cv
153.085 118.569 153.217 118.637 153.347 118.702 cv
153.309 118.702 153.272 118.702 153.237 118.702 cv
122.965 102.98 mo
122.994 102.946 123.038 102.925 123.089 102.911 cv
123.05 102.929 123.009 102.952 122.965 102.98 cv
127.278 97.5327 mo
127.219 97.5 li
127.584 97.5014 li
127.469 97.5014 127.368 97.5123 127.278 97.5327 cv
125.746 94.9427 mo
125.81 94.8236 125.877 94.7039 125.943 94.5881 cv
126.364 94.4972 126.808 94.3979 127.281 94.2871 cv
127.201 94.2485 li
127.489 94.187 127.884 94.1875 128.178 94.1495 cv
127.589 94.0017 126.978 93.9277 126.356 93.9036 cv
127.679 91.8261 129.274 90.398 131.142 89.8846 cv
129.417 90.4375 129.158 92.0411 129.906 94.2379 cv
129.732 94.239 129.561 94.2409 129.514 94.2486 cv
129.531 94.23 129.467 94.2217 129.348 94.2217 cv
128.688 94.2217 126.315 94.4754 126.344 94.6264 cv
126.351 94.6617 126.39 94.6728 126.442 94.6728 cv
126.486 94.6728 126.539 94.6649 126.591 94.657 cv
126.643 94.649 126.693 94.6411 126.731 94.6411 cv
126.765 94.6411 126.789 94.6474 126.796 94.6655 cv
126.855 94.8588 126.309 94.9036 125.746 94.9427 cv
.34902 .737255 .85098 rgb
f
123.661 133.153 mo
122.652 129.754 122.003 125.785 121.715 121.655 cv
122.259 122.16 122.626 122.821 122.577 123.833 cv
122.818 123.364 123.051 123.203 123.264 123.203 cv
123.701 123.203 124.053 123.884 124.203 123.982 cv
124.962 124.265 126.39 124.256 127.179 124.88 cv
127.227 124.919 127.243 124.932 127.243 124.932 cv
127.243 124.932 127.226 124.919 127.21 124.905 cv
127.201 124.898 127.192 124.891 127.185 124.886 cv
127.926 125.53 125.631 131.289 124.733 131.597 cv
124.327 131.736 123.963 132.441 123.661 133.153 cv
122.715 103.998 mo
122.818 103.483 122.928 102.975 123.044 102.478 cv
123.132 102.508 123.246 102.528 123.392 102.534 cv
123.57 102.782 li
123.537 102.839 123.458 102.86 123.367 102.873 cv
123.762 102.983 123.624 103.936 122.715 103.998 cv
123.089 102.911 mo
123.038 102.925 122.994 102.946 122.965 102.98 cv
123.009 102.952 123.05 102.929 123.089 102.911 cv
124.092 98.7883 mo
124.136 98.6599 124.182 98.5299 124.227 98.4035 cv
124.436 98.5038 124.612 98.5865 124.65 98.6016 cv
124.538 98.6536 124.33 98.7226 124.092 98.7883 cv
.419608 .858823 .603922 rgb
f
123.538 105.615 mo
123.473 105.615 123.422 105.589 123.389 105.549 cv
123.532 105.216 li
123.522 105.227 123.114 105.545 122.961 105.545 cv
122.919 105.545 122.897 105.522 122.905 105.464 cv
123.157 105.302 li
122.479 105.259 li
122.516 105.045 122.555 104.83 122.595 104.618 cv
123.078 104.274 123.666 103.92 123.667 103.85 cv
123.667 103.96 123.11 104.225 123.062 104.439 cv
123.429 104.357 li
123.521 104.47 123.517 104.5 123.524 104.5 cv
123.533 104.5 123.558 104.455 123.791 104.455 cv
123.917 104.6 li
123.671 105.022 li
123.749 105.022 123.827 104.837 123.91 104.837 cv
123.921 104.837 123.932 104.84 123.943 104.848 cv
123.734 105.158 li
123.765 105.126 123.797 105.113 123.826 105.113 cv
123.933 105.113 123.999 105.302 123.85 105.454 cv
123.73 105.57 123.623 105.615 123.538 105.615 cv
f
122.777 105.563 mo
122.777 105.563 122.812 105.511 122.85 105.452 cv
122.797 105.533 122.777 105.563 122.777 105.563 cv
f
125.943 94.5881 mo
126.078 94.3526 126.215 94.1247 126.356 93.9036 cv
126.978 93.9277 127.589 94.0017 128.178 94.1495 cv
127.884 94.1875 127.489 94.187 127.201 94.2485 cv
127.281 94.2871 li
126.808 94.3979 126.364 94.4972 125.943 94.5881 cv
f
128.003 100.973 mo
127.789 100.973 126.551 100.364 126.73 100.124 cv
126.929 99.8424 126.344 98.4298 126.831 97.8024 cv
126.733 97.7899 126.675 97.756 126.711 97.6885 cv
126.881 97.3692 126.992 97.284 127.11 97.284 cv
127.177 97.284 127.246 97.312 127.329 97.3399 cv
127.413 97.3678 127.51 97.3957 127.635 97.3957 cv
127.675 97.3957 127.719 97.3927 127.766 97.3857 cv
127.801 97.2895 li
127.763 97.2978 127.728 97.3017 127.696 97.3017 cv
127.509 97.3017 127.428 97.1679 127.465 96.9932 cv
127.373 97.0744 127.214 97.1805 127.067 97.1805 cv
127.002 97.1805 126.94 97.1598 126.888 97.1069 cv
126.786 97.0059 127.287 96.6123 127.295 96.5322 cv
127.266 96.5456 127.242 96.5518 127.221 96.5518 cv
127.041 96.5518 127.111 96.1026 127.095 95.8624 cv
127.088 95.741 126.895 95.7062 126.618 95.7062 cv
126.432 95.7062 126.208 95.722 125.979 95.7378 cv
125.756 95.7531 125.527 95.7685 125.322 95.7692 cv
125.46 95.4849 125.6 95.2107 125.746 94.9427 cv
126.309 94.9036 126.855 94.8588 126.796 94.6655 cv
126.789 94.6474 126.765 94.6411 126.731 94.6411 cv
126.693 94.6411 126.643 94.649 126.591 94.657 cv
126.539 94.6649 126.486 94.6728 126.442 94.6728 cv
126.39 94.6728 126.351 94.6617 126.344 94.6264 cv
126.315 94.4754 128.688 94.2217 129.348 94.2217 cv
129.467 94.2217 129.531 94.23 129.514 94.2486 cv
129.561 94.2409 129.732 94.239 129.906 94.2379 cv
130.298 95.3905 130.968 96.7065 131.849 98.1195 cv
131.621 98.3639 131.223 98.5075 130.829 98.8487 cv
128.003 100.973 li
127.219 97.5 mo
127.278 97.5327 li
127.368 97.5123 127.469 97.5014 127.584 97.5014 cv
127.219 97.5 li
f
140.156 108.311 mo
140.155 108.311 140.094 108.306 139.917 108.291 cv
139.903 108.29 139.898 108.289 139.898 108.289 cv
139.9 108.289 139.964 108.295 140.028 108.3 cv
140.092 108.306 140.156 108.311 140.156 108.311 cv
f
134.391 112.347 mo
134.389 112.347 134.464 112.312 134.692 112.207 cv
134.729 112.192 134.746 112.186 134.747 112.186 cv
134.753 112.186 134.665 112.226 134.575 112.267 cv
134.486 112.307 134.394 112.347 134.391 112.347 cv
f
133.967 112.637 mo
133.945 112.637 133.966 112.529 134.054 112.469 cv
134.012 112.594 133.981 112.637 133.967 112.637 cv
f
133.744 112.478 mo
133.716 112.478 133.699 112.453 133.693 112.428 cv
133.686 112.403 133.691 112.378 133.705 112.378 cv
133.719 112.378 133.742 112.401 133.774 112.47 cv
133.763 112.476 133.753 112.478 133.744 112.478 cv
f
133.335 112.742 mo
133.335 112.742 133.354 112.706 133.374 112.671 cv
133.394 112.635 133.414 112.6 133.415 112.6 cv
133.415 112.6 133.408 112.614 133.389 112.65 cv
133.35 112.718 133.336 112.742 133.335 112.742 cv
f
133.786 110.857 mo
133.78 110.857 133.749 110.855 133.679 110.847 cv
133.622 110.839 133.606 110.835 133.612 110.835 cv
133.621 110.835 133.669 110.841 133.712 110.846 cv
133.756 110.852 133.795 110.857 133.786 110.857 cv
f
133.374 110.595 mo
133.373 110.595 133.428 110.583 133.482 110.572 cv
133.537 110.56 133.592 110.548 133.593 110.548 cv
133.594 110.548 133.564 110.555 133.48 110.573 cv
133.404 110.589 133.375 110.595 133.374 110.595 cv
f
131.367 108.948 mo
131.367 108.948 131.367 108.938 131.367 108.914 cv
131.367 108.83 131.367 108.801 131.367 108.801 cv
131.367 108.801 131.367 108.838 131.367 108.874 cv
131.367 108.911 131.367 108.948 131.367 108.948 cv
f
130.849 108.57 mo
130.849 108.57 130.847 108.564 130.842 108.548 cv
130.818 108.476 130.81 108.451 130.811 108.451 cv
130.811 108.451 130.82 108.481 130.83 108.511 cv
130.84 108.54 130.849 108.57 130.849 108.57 cv
f
130.604 108.75 mo
130.604 108.75 130.616 108.707 130.628 108.664 cv
130.641 108.621 130.653 108.578 130.653 108.578 cv
130.653 108.578 130.65 108.588 130.643 108.614 cv
130.614 108.715 130.604 108.75 130.604 108.75 cv
f
130.789 116.554 mo
130.786 116.554 130.775 116.553 130.756 116.55 cv
130.659 116.526 130.63 116.517 130.635 116.517 cv
130.641 116.517 130.684 116.527 130.723 116.536 cv
130.763 116.545 130.799 116.554 130.789 116.554 cv
f
130.977 116.86 mo
130.972 116.86 130.989 116.83 131.057 116.742 cv
131.09 116.742 130.988 116.86 130.977 116.86 cv
f
131.585 116.98 mo
131.584 116.98 131.563 116.964 131.507 116.919 cv
131.477 116.892 131.466 116.881 131.467 116.881 cv
131.469 116.881 131.499 116.906 131.529 116.931 cv
131.558 116.955 131.587 116.98 131.585 116.98 cv
f
131.433 116.814 mo
131.409 116.814 131.414 116.669 131.422 116.669 cv
131.426 116.669 131.431 116.705 131.433 116.814 cv
f
131.312 117.472 mo
131.311 117.472 131.299 117.404 131.287 117.336 cv
131.275 117.267 131.262 117.199 131.263 117.199 cv
131.263 117.199 131.272 117.246 131.296 117.379 cv
131.308 117.446 131.312 117.472 131.312 117.472 cv
f
131.421 117.286 mo
131.421 117.286 131.422 117.236 131.423 117.087 cv
131.423 117.121 131.421 117.286 131.421 117.286 cv
f
131.027 117.402 mo
131.026 117.402 130.991 117.377 130.956 117.353 cv
130.921 117.328 130.887 117.304 130.888 117.304 cv
130.889 117.304 130.916 117.322 130.991 117.374 cv
131.018 117.394 131.028 117.402 131.027 117.402 cv
f
145.899 136.247 mo
145.497 136.247 145.11 136.022 144.762 135.481 cv
144.101 134.456 144.106 132.049 143.304 130.864 cv
142.147 129.133 143.765 127.961 143.165 126.396 cv
142.471 124.512 142.412 120.621 140.061 120.621 cv
139.988 120.621 139.912 120.625 139.834 120.632 cv
138.867 120.749 137.799 121.283 136.818 121.283 cv
136.217 121.283 135.65 121.083 135.158 120.465 cv
134.458 119.689 133.905 118.711 133.364 118.11 cv
132.081 116.674 135.06 111.399 136.37 110.576 cv
136.748 110.33 139.144 109.318 140.853 108.984 cv
144.929 113.027 149.393 116.63 152.953 118.5 cv
152.944 118.573 152.923 118.64 152.888 118.7 cv
152.858 118.7 153.001 118.702 153.237 118.702 cv
153.272 118.702 153.309 118.702 153.347 118.702 cv
154.146 119.1 154.893 119.404 155.577 119.599 cv
154.662 121.542 151.208 125.043 151.704 125.348 cv
154.078 126.912 150.182 129.915 150.341 130.849 cv
149.896 131.581 147.732 136.247 145.899 136.247 cv
136.627 109.275 mo
136.507 109.275 136.398 109.259 136.302 109.225 cv
136.26 107.868 136.123 106.73 137.605 106.73 cv
138.061 106.73 138.364 106.687 138.556 106.613 cv
138.964 107.052 139.38 107.488 139.801 107.921 cv
139.724 107.966 139.647 108.01 139.569 108.055 cv
138.511 108.665 137.367 109.275 136.627 109.275 cv
f
153.329 132.391 mo
153.268 132.391 153.205 132.387 153.14 132.378 cv
152.902 132.354 153.177 129.12 153.292 128.922 cv
153.287 128.931 153.289 128.934 153.295 128.934 cv
153.408 128.934 155.059 127.819 155.172 127.508 cv
155.297 127.762 155.375 128.541 155.404 128.589 cv
155.556 128.843 155.419 128.917 155.295 128.917 cv
155.216 128.917 155.141 128.887 155.15 128.853 cv
154.905 129.826 154.84 132.391 153.329 132.391 cv
153.292 128.922 mo
153.292 128.922 153.292 128.922 153.293 128.922 cv
153.292 128.922 153.292 128.922 153.292 128.922 cv
153.293 128.922 mo
153.293 128.922 153.293 128.922 153.293 128.921 cv
153.293 128.922 153.293 128.922 153.293 128.922 cv
153.293 128.921 mo
153.293 128.921 153.293 128.921 153.293 128.92 cv
153.293 128.921 153.293 128.921 153.293 128.921 cv
155.172 127.508 mo
155.148 127.458 155.121 127.429 155.093 127.429 cv
155.169 127.429 155.191 127.458 155.172 127.508 cv
f
131.142 89.8846 mo
131.573 89.7466 132.095 89.6739 132.715 89.6739 cv
132.172 89.6739 131.646 89.7461 131.142 89.8846 cv
.34902 .737255 .85098 rgb
f
157.164 119.852 mo
156.688 119.852 156.156 119.765 155.577 119.599 cv
155.793 119.141 155.867 118.769 155.715 118.546 cv
155.715 118.545 155.714 118.544 155.713 118.543 cv
155.714 118.544 155.714 118.545 155.715 118.546 cv
155.793 118.679 154.17 118.7 153.347 118.702 cv
153.217 118.637 153.085 118.569 152.953 118.5 cv
153.108 117.15 148.956 113.607 149.317 111.842 cv
149.397 112.013 149.694 112.633 149.91 112.633 cv
149.995 112.633 150.045 112.194 150.064 112.088 cv
150.115 112.847 153.789 118.01 153.599 118.22 cv
154.816 116.859 158.411 116.869 158.349 114.637 cv
158.349 114.641 158.347 114.643 158.343 114.643 cv
158.233 114.643 156.669 113.225 156.999 113.225 cv
156.573 113.225 156.331 114.041 155.707 114.041 cv
155.295 114.041 155.784 113.192 155.335 113.192 cv
155.229 113.192 155.261 113.52 155.242 113.539 cv
155.249 113.519 153.743 111.742 154.557 111.742 cv
154.59 111.742 154.628 111.745 154.67 111.751 cv
154.826 111.769 155.803 113.116 156.388 113.116 cv
156.483 113.116 156.568 113.08 156.638 112.997 cv
156.685 112.94 156.772 112.915 156.891 112.915 cv
157.353 112.915 158.297 113.293 159.234 113.672 cv
159.336 113.713 159.438 113.754 159.54 113.795 cv
159.638 114.732 159.689 115.684 159.689 116.647 cv
159.689 116.647 li
159.689 118.897 158.733 119.852 157.164 119.852 cv
156.49 118.138 mo
156.489 118.138 156.552 118.17 156.742 118.267 cv
156.744 118.268 156.745 118.268 156.745 118.268 cv
156.747 118.268 156.683 118.235 156.619 118.203 cv
156.555 118.171 156.49 118.138 156.49 118.138 cv
144.932 111.598 mo
144.384 111.125 143.111 110.548 142.507 110.403 cv
141.955 110.259 142.775 109.477 142.538 109.127 cv
142.419 108.95 142.15 108.876 141.786 108.876 cv
141.519 108.876 141.2 108.916 140.853 108.984 cv
140.5 108.633 140.148 108.277 139.801 107.921 cv
140.767 107.359 141.628 106.836 141.994 106.836 cv
142.114 106.836 142.18 106.892 142.18 107.021 cv
142.18 107.273 145.634 108.708 143.021 108.708 cv
142.921 108.822 li
142.921 109.191 143.037 109.332 143.204 109.332 cv
143.683 109.332 144.586 108.181 144.415 107.932 cv
144.521 107.999 144.653 108.115 144.705 108.135 cv
144.711 108.138 144.715 108.139 144.718 108.139 cv
144.72 108.139 144.722 108.138 144.723 108.137 cv
144.721 108.138 144.72 108.138 144.718 108.138 cv
144.715 108.138 144.71 108.137 144.705 108.135 cv
144.515 108.041 142.966 106.325 142.88 106.065 cv
143.098 105.965 li
143.449 105.965 145.934 108.997 146.47 108.997 cv
146.502 108.997 146.527 108.986 146.544 108.963 cv
146.542 108.965 146.542 108.966 146.541 108.966 cv
146.54 108.966 146.576 108.91 146.616 108.854 cv
146.645 108.814 146.675 108.775 146.695 108.755 cv
146.705 108.763 146.712 108.767 146.715 108.767 cv
146.716 108.767 146.716 108.767 146.716 108.766 cv
146.721 108.749 146.72 108.741 146.715 108.741 cv
146.71 108.741 146.704 108.746 146.695 108.755 cv
146.562 108.648 145.857 107.877 146.005 107.877 cv
146.096 107.877 146.574 107.719 146.905 107.719 cv
147.076 107.719 147.207 107.762 147.224 107.891 cv
146.997 108.357 li
147.031 108.435 147.067 108.465 147.101 108.465 cv
147.204 108.465 147.298 108.208 147.299 108.206 cv
147.334 108.457 li
147.367 108.566 146.809 108.484 147.03 108.721 cv
147.463 108.796 li
147.456 108.899 147.362 109.032 147.363 109.381 cv
147.721 109.167 li
147.721 109.282 147.522 109.359 147.639 109.568 cv
147.639 109.568 li
147.639 109.568 li
147.565 109.434 147.844 109.403 148.241 109.403 cv
148.405 109.403 148.589 109.408 148.776 109.414 cv
148.964 109.419 149.155 109.424 149.334 109.424 cv
149.797 109.424 150.173 109.389 150.173 109.228 cv
150.575 110.827 149.619 111.325 148.392 111.325 cv
148.033 111.325 147.651 111.282 147.272 111.212 cv
147.158 111.191 146.456 111.116 145.827 111.116 cv
145.112 111.116 144.492 111.213 144.932 111.598 cv
145.597 108.651 mo
145.479 108.651 145.386 108.704 145.364 108.853 cv
145.323 109.113 145.603 109.198 145.87 109.198 cv
146.193 109.198 146.495 109.073 146.178 108.984 cv
146.191 108.986 146.202 108.988 146.21 108.988 cv
146.276 108.988 146.197 108.904 146.064 108.819 cv
145.931 108.735 145.744 108.651 145.597 108.651 cv
145.367 108.631 mo
145.365 108.631 145.402 108.637 145.439 108.643 cv
145.476 108.649 145.515 108.655 145.516 108.655 cv
145.517 108.655 145.504 108.653 145.465 108.646 cv
145.394 108.635 145.368 108.631 145.367 108.631 cv
141.997 106.959 mo
141.517 106.959 141.9 107.536 141.877 107.574 cv
141.855 107.611 141.242 108.466 141.8 108.466 cv
142.399 108.466 141.897 106.959 141.997 106.959 cv
140.269 108.088 mo
140.269 108.088 140.306 108.102 140.417 108.145 cv
140.419 108.145 140.42 108.146 140.42 108.146 cv
140.42 108.146 140.382 108.131 140.345 108.117 cv
140.307 108.103 140.269 108.088 140.269 108.088 cv
138.556 106.613 mo
135.871 103.73 133.492 100.756 131.849 98.1195 cv
131.877 98.0889 131.903 98.0568 131.926 98.0225 cv
132.093 98.1363 132.32 98.184 132.563 98.184 cv
132.846 98.184 133.152 98.1197 133.415 98.02 cv
133.571 97.9566 134.559 97.5313 134.555 97.5205 cv
134.236 97.4814 133.888 97.5019 133.569 97.4776 cv
134.007 97.4761 134.128 97.4755 134.737 97.4755 cv
135.141 97.4755 134.095 96.5947 134.08 96.5805 cv
134.469 96.5781 li
134.068 96.8471 134.476 96.7276 134.687 96.8975 cv
134.676 96.9139 134.681 96.9239 134.716 96.9239 cv
134.707 96.9144 134.697 96.9056 134.687 96.8975 cv
134.724 96.8438 134.941 96.7213 134.922 96.6543 cv
134.62 96.5215 li
134.744 96.4458 135.173 96.4644 135.334 96.3759 cv
135.768 96.1675 li
135.743 96.0751 135.532 95.8457 135.476 95.5947 cv
135.458 95.5205 135.484 95.4922 135.531 95.4922 cv
135.65 95.4922 135.907 95.6738 135.946 95.7505 cv
135.923 95.7842 li
135.951 95.7842 135.956 95.7711 135.946 95.7505 cv
136.143 95.4614 li
136.122 95.3699 136.077 95.347 136.023 95.347 cv
135.995 95.347 135.965 95.3528 135.935 95.3587 cv
135.905 95.3645 135.874 95.3704 135.844 95.3704 cv
135.798 95.3704 135.755 95.3563 135.722 95.3062 cv
135.722 95.3062 135.723 95.3062 135.723 95.3062 cv
135.732 95.3062 135.766 95.3156 135.807 95.3251 cv
135.849 95.3346 135.898 95.344 135.938 95.344 cv
135.982 95.344 136.015 95.3324 136.013 95.2964 cv
136.013 95.2674 136.01 95.2431 136.003 95.2227 cv
136.045 95.2227 136.115 95.2227 136.115 95.2227 cv
136.115 95.2227 136.045 95.2227 136.003 95.2227 cv
135.982 95.1569 135.931 95.1332 135.866 95.1332 cv
135.782 95.1332 135.677 95.1726 135.588 95.2121 cv
135.5 95.2516 135.428 95.2911 135.411 95.2911 cv
135.41 95.2911 135.41 95.291 135.41 95.291 cv
135.479 95.1396 137.273 94.2281 137.713 94.2281 cv
137.751 94.2281 137.779 94.235 137.794 94.2498 cv
137.795 94.2504 137.795 94.2509 137.796 94.2514 cv
137.795 94.2509 137.795 94.2504 137.794 94.2498 cv
137.63 94.0868 137.425 94.0285 137.201 94.0285 cv
136.921 94.0285 136.612 94.1203 136.32 94.2121 cv
136.027 94.304 135.75 94.3958 135.534 94.3958 cv
135.371 94.3958 135.242 94.3437 135.167 94.2002 cv
135.27 94.1938 136.033 94.1211 136.033 94.0581 cv
136.033 93.924 135.69 93.8828 135.26 93.8828 cv
134.917 93.8828 134.519 93.9091 134.194 93.9353 cv
133.87 93.9615 133.62 93.9877 133.574 93.9877 cv
133.571 93.9877 133.569 93.9876 133.568 93.9874 cv
133.857 93.8642 li
133.849 93.802 133.736 93.7779 133.558 93.7779 cv
133.255 93.7779 132.764 93.8476 132.285 93.9174 cv
131.805 93.9872 131.337 94.0569 131.081 94.0569 cv
130.975 94.0569 130.905 94.0451 130.885 94.0166 cv
130.778 93.9414 li
130.668 93.9414 131.163 94.1786 131.291 94.2116 cv
131.218 94.2097 131.035 94.1885 130.838 94.1674 cv
130.631 94.1452 130.408 94.123 130.278 94.123 cv
130.136 94.123 130.106 94.1493 130.327 94.2305 cv
130.284 94.2363 130.093 94.2367 129.906 94.2379 cv
129.158 92.0411 129.417 90.4375 131.142 89.8846 cv
131.646 89.7461 132.172 89.6739 132.715 89.6739 cv
132.715 89.6739 li
140.42 89.6739 147.37 92.9035 152.285 98.0839 cv
152.209 98.1147 152.13 98.1469 152.048 98.1791 cv
151.658 98.3327 151.225 98.4863 150.967 98.4864 cv
150.846 98.4864 150.764 98.4526 150.742 98.3691 cv
150.802 98.2739 151.105 98.3247 151.113 98.2475 cv
150.263 97.9736 li
150.676 98.5698 li
150.622 98.7959 li
150.437 98.6692 150.297 98.6196 150.189 98.6196 cv
149.831 98.6196 149.831 99.1619 149.79 99.25 cv
149.764 99.291 149.717 99.3073 149.658 99.3073 cv
149.546 99.3073 149.391 99.2487 149.252 99.1902 cv
149.114 99.1318 148.992 99.0733 148.947 99.0733 cv
148.94 99.0733 148.934 99.075 148.931 99.0786 cv
148.802 99.185 li
148.742 99.2788 149.221 99.4306 149.265 99.48 cv
149.195 99.5155 149.124 99.5313 149.052 99.5313 cv
148.561 99.5314 148.063 98.7844 147.794 98.5742 cv
147.853 98.5561 147.942 98.5489 148.051 98.5489 cv
148.249 98.5489 148.512 98.5721 148.774 98.5954 cv
149.037 98.6187 149.299 98.6419 149.496 98.6419 cv
149.9 98.6419 150.026 98.5436 149.302 98.1446 cv
148.299 97.5937 147.67 97.7349 146.825 97.6089 cv
147.172 97.4497 li
147.151 97.3391 147.046 97.3047 146.921 97.3047 cv
146.819 97.3047 146.703 97.3278 146.61 97.3509 cv
146.516 97.374 146.445 97.3972 146.431 97.3972 cv
146.431 97.3972 146.43 97.3971 146.43 97.397 cv
146.508 97.2699 146.49 97.2247 146.423 97.2247 cv
146.262 97.2247 145.813 97.4902 145.742 97.4937 cv
145.927 97.1982 li
144.906 97.3413 li
145.115 97.4814 li
145.013 97.4701 144.917 97.4648 144.826 97.4648 cv
144.061 97.4648 143.663 97.8407 142.877 98.1806 cv
142.88 98.2842 li
142.886 98.2921 142.898 98.2956 142.914 98.2956 cv
143.024 98.2956 143.337 98.1193 143.423 98.103 cv
143.453 99.1591 141.439 99.5678 141.417 99.9243 cv
141.418 99.9171 141.419 99.9136 141.42 99.9136 cv
141.431 99.9136 141.463 100.391 141.535 100.869 cv
141.608 101.346 141.722 101.824 141.897 101.824 cv
141.906 101.824 141.914 101.823 141.923 101.82 cv
141.83 102.237 141.878 102.929 141.88 102.935 cv
141.894 103 138.916 104.434 138.772 104.434 cv
139.315 104.434 138.228 104.997 137.927 104.997 cv
137.897 104.997 137.875 104.992 137.863 104.979 cv
137.856 104.956 137.855 104.936 137.861 104.919 cv
137.849 104.947 137.851 104.967 137.863 104.979 cv
137.968 105.32 139.427 106.279 138.556 106.613 cv
138.522 103.857 mo
138.319 104.028 137.832 104.042 137.657 104.317 cv
137.625 104.366 137.64 104.387 137.688 104.387 cv
137.866 104.387 138.504 104.1 139.046 103.813 cv
139.588 103.527 140.035 103.24 139.829 103.24 cv
139.766 103.24 139.644 103.266 139.447 103.327 cv
139.445 103.329 139.442 103.33 139.44 103.33 cv
139.392 103.33 139.283 102.917 139.186 102.503 cv
139.09 102.09 139.007 101.676 139.012 101.676 cv
139.013 101.676 139.013 101.677 139.014 101.679 cv
139.014 101.679 li
139.014 101.679 li
138.992 101.614 138.942 101.592 138.88 101.592 cv
138.817 101.592 138.743 101.614 138.67 101.635 cv
138.598 101.656 138.529 101.677 138.477 101.677 cv
138.445 101.677 138.42 101.669 138.405 101.647 cv
138.406 101.648 138.407 101.649 138.408 101.649 cv
138.458 101.649 138.993 101.158 138.879 101.084 cv
138.767 101.036 li
138.714 101.036 138.171 101.478 138.022 101.589 cv
138.001 101.604 137.361 101.967 137.571 102.136 cv
137.601 102.162 li
137.697 102.162 137.748 101.939 137.839 101.896 cv
137.839 101.915 137.784 102.158 137.791 102.246 cv
137.714 102.299 137.644 102.35 137.662 102.384 cv
137.676 102.406 137.684 102.412 137.69 102.412 cv
137.693 102.412 137.696 102.41 137.699 102.409 cv
137.702 102.408 137.705 102.407 137.709 102.407 cv
137.724 102.407 137.75 102.427 137.821 102.551 cv
138.107 102.339 li
138.215 102.422 138.251 102.741 138.593 102.895 cv
138.514 103.233 137.981 103.126 137.981 103.236 cv
137.981 103.389 138.06 103.366 138.209 103.409 cv
137.875 103.763 li
137.9 103.838 138.171 103.867 138.364 103.867 cv
138.431 103.867 138.488 103.863 138.522 103.857 cv
136.402 103.764 mo
136.448 103.83 136.538 103.857 136.651 103.857 cv
137.005 103.857 137.577 103.592 137.643 103.476 cv
138.041 102.815 137.687 102.518 137.4 102.518 cv
137.252 102.518 137.123 102.597 137.123 102.744 cv
137.056 102.824 136.706 102.853 136.619 102.853 cv
136.607 102.853 136.6 102.853 136.6 102.852 cv
136.597 102.866 136.475 103.769 136.41 103.769 cv
136.407 103.769 136.405 103.768 136.402 103.764 cv
136.402 103.764 136.402 103.764 136.401 103.763 cv
136.402 103.764 136.402 103.764 136.402 103.764 cv
138.047 102.939 mo
138.14 102.983 138.171 102.997 138.171 102.997 cv
138.172 102.997 138.058 102.944 138.047 102.939 cv
137.789 101.311 mo
137.598 101.311 137.455 101.851 137.425 101.906 cv
137.423 101.911 137.423 101.913 137.424 101.913 cv
137.453 101.913 137.959 101.411 137.86 101.336 cv
137.836 101.319 137.812 101.311 137.789 101.311 cv
135.654 101.622 mo
135.654 101.622 135.654 101.645 135.654 101.667 cv
135.654 101.69 135.654 101.713 135.654 101.713 cv
135.654 101.713 135.654 101.701 135.654 101.667 cv
135.654 101.634 135.654 101.622 135.654 101.622 cv
139.13 100.827 mo
139.228 100.827 139.268 100.827 139.268 100.827 cv
139.268 100.827 139.212 100.827 139.13 100.827 cv
137.944 100.051 mo
137.801 100.208 137.739 100.279 137.74 100.279 cv
137.742 100.279 137.817 100.198 137.944 100.051 cv
134.106 99.3608 mo
134.061 99.459 133.788 99.4863 133.868 99.5971 cv
133.952 99.7134 134.081 99.7568 134.235 99.7568 cv
134.461 99.7568 134.739 99.6634 135.003 99.5701 cv
135.267 99.4768 135.517 99.3835 135.686 99.3835 cv
135.728 99.3835 135.764 99.3893 135.795 99.4024 cv
135.879 99.4325 135.946 99.4458 136.001 99.4458 cv
136.208 99.4458 136.228 99.2549 136.204 99.0641 cv
136.181 98.8732 136.113 98.6823 136.142 98.6823 cv
136.144 98.6823 136.146 98.683 136.148 98.6845 cv
136.148 98.6845 li
136.148 98.6845 li
136.086 98.6483 135.987 98.633 135.867 98.633 cv
135.349 98.633 134.44 98.9166 134.43 99.043 cv
134.35 98.8725 134.145 98.8063 133.952 98.8063 cv
133.711 98.8063 133.488 98.9085 133.544 99.0401 cv
133.557 99.0704 133.592 99.0812 133.639 99.0812 cv
133.697 99.0812 133.772 99.0651 133.847 99.049 cv
133.922 99.0329 133.996 99.0168 134.052 99.0168 cv
134.082 99.0168 134.106 99.0215 134.122 99.0332 cv
133.636 99.1787 li
133.574 99.2656 133.627 99.291 133.712 99.291 cv
133.833 99.291 134.018 99.2398 134.032 99.2398 cv
134.036 99.2829 134.017 99.3804 134.061 99.3804 cv
134.072 99.3804 134.087 99.3746 134.106 99.3608 cv
151.275 97.7356 mo
151.274 97.7356 151.285 97.7813 151.316 97.9062 cv
151.352 98.032 151.366 98.078 151.367 98.078 cv
151.369 98.078 151.347 97.9924 151.324 97.9068 cv
151.301 97.8212 151.277 97.7356 151.275 97.7356 cv
137.891 97.184 mo
137.837 97.184 137.73 97.2202 137.7 97.3027 cv
137.944 97.228 137.95 97.184 137.891 97.184 cv
144.131 96.1318 mo
144.265 96.1318 li
144.131 96.1318 li
136.027 96.0335 mo
135.995 96.0335 135.938 96.0543 135.855 96.1157 cv
135.884 96.123 135.91 96.1261 135.932 96.1261 cv
135.995 96.1261 136.036 96.103 136.053 96.0798 cv
136.069 96.0566 136.062 96.0335 136.027 96.0335 cv
145.509 95.536 mo
145.509 95.536 145.508 95.5363 145.507 95.5371 cv
145.426 95.5955 145.4 95.615 145.4 95.615 cv
145.4 95.615 145.428 95.5952 145.455 95.5754 cv
145.483 95.5557 145.51 95.536 145.509 95.536 cv
143.259 95.0591 mo
143.29 95.0591 143.311 95.0634 143.319 95.0742 cv
143.323 95.2036 142.865 95.1489 142.915 95.2964 cv
142.954 95.3964 143.137 95.4316 143.387 95.4316 cv
143.687 95.4316 144.084 95.3808 144.443 95.3299 cv
144.802 95.2791 145.123 95.2283 145.272 95.2283 cv
145.31 95.2283 145.337 95.2316 145.35 95.2391 cv
145.357 95.2442 145.36 95.2491 145.36 95.2539 cv
145.36 95.2478 145.357 95.2429 145.35 95.2391 cv
145.249 95.1626 144.398 95.0537 144.405 94.8706 cv
144.504 94.8888 144.772 94.92 145.043 94.92 cv
145.372 94.92 145.705 94.8739 145.742 94.7026 cv
143.828 94.5654 li
143.789 94.6582 li
144.187 94.8096 li
142.879 94.7881 li
143.02 94.7817 142.802 94.6859 142.604 94.6859 cv
142.486 94.6859 142.374 94.7204 142.352 94.8291 cv
142.314 95.0156 142.574 95.0429 142.379 95.0952 cv
142.43 95.1264 142.505 95.1377 142.592 95.1377 cv
142.706 95.1377 142.84 95.118 142.962 95.0983 cv
143.084 95.0787 143.194 95.0591 143.259 95.0591 cv
136.168 95.2828 mo
136.164 95.3064 136.226 95.3154 136.269 95.3154 cv
136.324 95.3154 136.348 95.3008 136.168 95.2828 cv
146.236 94.9211 mo
146.231 94.9211 146.153 94.9551 145.935 95.0571 cv
145.966 95.0571 146.247 94.9211 146.236 94.9211 cv
136.248 95.0464 mo
136.333 95.0464 li
136.248 95.0464 li
136.12 94.9572 mo
136.118 94.9572 136.084 94.9712 136.052 94.9852 cv
136.019 94.9993 135.988 95.0133 135.992 95.0133 cv
135.993 95.0133 135.998 95.0119 136.007 95.0088 cv
136.094 94.9702 136.122 94.9572 136.12 94.9572 cv
136.179 95.0117 mo
136.261 95.0117 li
136.179 95.0117 li
145.745 94.9551 mo
145.745 94.9551 145.71 94.9622 145.676 94.9692 cv
145.641 94.9763 145.607 94.9833 145.607 94.9833 cv
145.607 94.9833 145.624 94.9799 145.669 94.9707 cv
145.725 94.9593 145.745 94.9551 145.745 94.9551 cv
136.48 94.8608 mo
136.48 94.8608 136.48 94.8743 136.48 94.9111 cv
136.48 94.948 136.48 94.9614 136.48 94.9614 cv
136.48 94.9614 136.48 94.9363 136.48 94.9111 cv
136.48 94.8859 136.48 94.8608 136.48 94.8608 cv
145.774 94.6762 mo
145.772 94.6762 145.779 94.679 145.803 94.6865 cv
145.854 94.6996 145.874 94.7043 145.877 94.7043 cv
145.879 94.7043 145.856 94.6972 145.83 94.6902 cv
145.805 94.6832 145.778 94.6762 145.774 94.6762 cv
146.979 94.6616 mo
146.977 94.6616 146.906 94.6641 146.706 94.6714 cv
146.642 94.6738 146.618 94.6748 146.62 94.6748 cv
146.624 94.6748 146.715 94.6715 146.805 94.6682 cv
146.894 94.6649 146.982 94.6616 146.979 94.6616 cv
136.761 103.251 mo
136.75 103.251 136.772 103.248 136.797 103.245 cv
136.822 103.242 136.851 103.24 136.856 103.24 cv
136.862 103.24 136.845 103.242 136.782 103.25 cv
136.771 103.25 136.764 103.251 136.761 103.251 cv
143.092 103.095 mo
142.865 103.095 142.642 103.05 142.43 102.944 cv
142.395 102.97 142.367 102.981 142.344 102.981 cv
142.106 102.981 142.437 101.729 142.359 101.646 cv
142.282 101.564 142.216 101.523 142.161 101.514 cv
142.214 101.4 142.269 101.251 142.329 101.061 cv
142.71 102.259 142.548 102.005 142.476 102.684 cv
142.643 102.783 li
143.632 102.783 143.968 101.584 144.586 100.963 cv
144.643 100.91 143.657 100.232 144.347 99.8897 cv
144.72 99.7028 145.267 99.4897 145.635 99.3443 cv
145.223 99.6114 144.736 100.158 145.133 100.555 cv
145.365 100.793 145.842 100.822 146.341 100.822 cv
146.425 100.822 146.51 100.822 146.594 100.821 cv
146.678 100.82 146.762 100.819 146.844 100.819 cv
147.035 100.819 147.218 100.824 147.379 100.843 cv
147.003 100.931 145.344 100.977 145.3 101.425 cv
145.384 101.603 li
145.518 101.545 145.93 101.43 146.012 101.43 cv
146.025 101.43 146.029 101.433 146.024 101.439 cv
146.002 101.579 146.06 101.72 146.02 101.845 cv
145.44 102.022 144.21 103.095 143.092 103.095 cv
143.456 102.572 mo
143.451 102.572 143.475 102.592 143.502 102.611 cv
143.528 102.631 143.557 102.651 143.56 102.651 cv
143.563 102.651 143.545 102.634 143.485 102.587 cv
143.467 102.576 143.458 102.572 143.456 102.572 cv
144.614 101.658 mo
144.614 101.658 144.612 101.658 144.609 101.66 cv
144.435 101.828 144.38 101.885 144.383 101.885 cv
144.386 101.885 144.448 101.828 144.507 101.771 cv
144.566 101.714 144.622 101.658 144.614 101.658 cv
137.884 102.181 mo
137.902 102.15 137.922 102.11 137.946 102.061 cv
137.991 102.088 137.949 102.133 137.884 102.181 cv
144.204 94.9332 mo
144.193 94.9332 144.185 94.9245 144.185 94.9023 cv
144.259 94.8389 144.295 94.8168 144.308 94.8168 cv
144.323 94.8168 144.307 94.8459 144.283 94.8749 cv
144.258 94.9041 144.224 94.9332 144.204 94.9332 cv
.537255 .811765 .894118 rgb
f
132.563 98.184 mo
132.32 98.184 132.093 98.1363 131.926 98.0225 cv
131.903 98.0568 131.877 98.0889 131.849 98.1195 cv
130.968 96.7065 130.298 95.3905 129.906 94.2379 cv
130.093 94.2367 130.284 94.2363 130.327 94.2305 cv
130.106 94.1493 130.136 94.123 130.278 94.123 cv
130.408 94.123 130.631 94.1452 130.838 94.1674 cv
131.035 94.1885 131.218 94.2097 131.291 94.2116 cv
131.163 94.1786 130.668 93.9414 130.778 93.9414 cv
130.885 94.0166 li
130.905 94.0451 130.975 94.0569 131.081 94.0569 cv
131.337 94.0569 131.805 93.9872 132.285 93.9174 cv
132.764 93.8476 133.255 93.7779 133.558 93.7779 cv
133.736 93.7779 133.849 93.802 133.857 93.8642 cv
133.568 93.9874 li
133.569 93.9876 133.571 93.9877 133.574 93.9877 cv
133.62 93.9877 133.87 93.9615 134.194 93.9353 cv
134.519 93.9091 134.917 93.8828 135.26 93.8828 cv
135.69 93.8828 136.033 93.924 136.033 94.0581 cv
136.033 94.1211 135.27 94.1938 135.167 94.2002 cv
135.242 94.3437 135.371 94.3958 135.534 94.3958 cv
135.75 94.3958 136.027 94.304 136.32 94.2121 cv
136.612 94.1203 136.921 94.0285 137.201 94.0285 cv
137.425 94.0285 137.63 94.0868 137.794 94.2498 cv
137.779 94.235 137.751 94.2281 137.713 94.2281 cv
137.273 94.2281 135.479 95.1396 135.41 95.291 cv
135.41 95.291 135.41 95.2911 135.411 95.2911 cv
135.428 95.2911 135.5 95.2516 135.588 95.2121 cv
135.677 95.1726 135.782 95.1332 135.866 95.1332 cv
135.931 95.1332 135.982 95.1569 136.003 95.2227 cv
135.986 95.2227 135.974 95.2227 135.974 95.2227 cv
135.974 95.2227 135.986 95.2227 136.003 95.2227 cv
136.01 95.2431 136.013 95.2674 136.013 95.2964 cv
136.015 95.3324 135.982 95.344 135.938 95.344 cv
135.898 95.344 135.849 95.3346 135.807 95.3251 cv
135.766 95.3156 135.732 95.3062 135.723 95.3062 cv
135.723 95.3062 135.722 95.3062 135.722 95.3062 cv
135.755 95.3563 135.798 95.3704 135.844 95.3704 cv
135.874 95.3704 135.905 95.3645 135.935 95.3587 cv
135.965 95.3528 135.995 95.347 136.023 95.347 cv
136.077 95.347 136.122 95.3699 136.143 95.4614 cv
135.946 95.7505 li
135.907 95.6738 135.65 95.4922 135.531 95.4922 cv
135.484 95.4922 135.458 95.5205 135.476 95.5947 cv
135.532 95.8457 135.743 96.0751 135.768 96.1675 cv
135.334 96.3759 li
135.173 96.4644 134.744 96.4458 134.62 96.5215 cv
134.922 96.6543 li
134.941 96.7213 134.724 96.8438 134.687 96.8975 cv
134.476 96.7276 134.068 96.8471 134.469 96.5781 cv
134.08 96.5805 li
134.095 96.5947 135.141 97.4755 134.737 97.4755 cv
134.128 97.4755 134.007 97.4761 133.569 97.4776 cv
133.888 97.5019 134.236 97.4814 134.555 97.5205 cv
134.559 97.5313 133.571 97.9566 133.415 98.02 cv
133.152 98.1197 132.846 98.184 132.563 98.184 cv
134.716 96.9239 mo
134.681 96.9239 134.676 96.9139 134.687 96.8975 cv
134.697 96.9056 134.707 96.9144 134.716 96.9239 cv
135.923 95.7842 mo
135.946 95.7505 li
135.956 95.7711 135.951 95.7842 135.923 95.7842 cv
137.796 94.2514 mo
137.795 94.2509 137.795 94.2504 137.794 94.2498 cv
137.795 94.2504 137.795 94.2509 137.796 94.2514 cv
.588235 .898039 .717647 rgb
f
135.932 96.1261 mo
135.91 96.1261 135.884 96.123 135.855 96.1157 cv
135.938 96.0543 135.995 96.0335 136.027 96.0335 cv
136.062 96.0335 136.069 96.0566 136.053 96.0798 cv
136.036 96.103 135.995 96.1261 135.932 96.1261 cv
f
135.992 95.0133 mo
135.988 95.0133 136.019 94.9993 136.052 94.9852 cv
136.084 94.9712 136.118 94.9572 136.12 94.9572 cv
136.122 94.9572 136.094 94.9702 136.007 95.0088 cv
135.998 95.0119 135.993 95.0133 135.992 95.0133 cv
f
136.269 95.3154 mo
136.226 95.3154 136.164 95.3064 136.168 95.2828 cv
136.348 95.3008 136.324 95.3154 136.269 95.3154 cv
f
136.48 94.9614 mo
136.48 94.9614 136.48 94.948 136.48 94.9111 cv
136.48 94.8743 136.48 94.8608 136.48 94.8608 cv
136.48 94.8608 136.48 94.8859 136.48 94.9111 cv
136.48 94.9363 136.48 94.9614 136.48 94.9614 cv
f
134.235 99.7568 mo
134.081 99.7568 133.952 99.7134 133.868 99.5971 cv
133.788 99.4863 134.061 99.459 134.106 99.3608 cv
134.087 99.3746 134.072 99.3804 134.061 99.3804 cv
134.017 99.3804 134.036 99.2829 134.032 99.2398 cv
134.018 99.2398 133.833 99.291 133.712 99.291 cv
133.627 99.291 133.574 99.2656 133.636 99.1787 cv
134.122 99.0332 li
134.106 99.0215 134.082 99.0168 134.052 99.0168 cv
133.996 99.0168 133.922 99.0329 133.847 99.049 cv
133.772 99.0651 133.697 99.0812 133.639 99.0812 cv
133.592 99.0812 133.557 99.0704 133.544 99.0401 cv
133.488 98.9085 133.711 98.8063 133.952 98.8063 cv
134.145 98.8063 134.35 98.8725 134.43 99.043 cv
134.44 98.9166 135.349 98.633 135.867 98.633 cv
135.987 98.633 136.086 98.6483 136.148 98.6845 cv
136.146 98.683 136.144 98.6823 136.142 98.6823 cv
136.113 98.6823 136.181 98.8732 136.204 99.0641 cv
136.228 99.2549 136.208 99.4458 136.001 99.4458 cv
135.946 99.4458 135.879 99.4325 135.795 99.4024 cv
135.764 99.3893 135.728 99.3835 135.686 99.3835 cv
135.517 99.3835 135.267 99.4768 135.003 99.5701 cv
134.739 99.6634 134.461 99.7568 134.235 99.7568 cv
f
137.74 100.279 mo
137.739 100.279 137.801 100.208 137.944 100.051 cv
137.817 100.198 137.742 100.279 137.74 100.279 cv
f
143.387 95.4316 mo
143.137 95.4316 142.954 95.3964 142.915 95.2964 cv
142.865 95.1489 143.323 95.2036 143.319 95.0742 cv
143.311 95.0634 143.29 95.0591 143.259 95.0591 cv
143.194 95.0591 143.084 95.0787 142.962 95.0983 cv
142.84 95.118 142.706 95.1377 142.592 95.1377 cv
142.505 95.1377 142.43 95.1264 142.379 95.0952 cv
142.574 95.0429 142.314 95.0156 142.352 94.8291 cv
142.374 94.7204 142.486 94.6859 142.604 94.6859 cv
142.802 94.6859 143.02 94.7817 142.879 94.7881 cv
144.187 94.8096 li
143.789 94.6582 li
143.828 94.5654 li
145.742 94.7026 li
145.705 94.8739 145.372 94.92 145.043 94.92 cv
144.772 94.92 144.504 94.8888 144.405 94.8706 cv
144.398 95.0537 145.249 95.1626 145.35 95.2391 cv
145.337 95.2316 145.31 95.2283 145.272 95.2283 cv
145.123 95.2283 144.802 95.2791 144.443 95.3299 cv
144.084 95.3808 143.687 95.4316 143.387 95.4316 cv
144.308 94.8168 mo
144.295 94.8168 144.259 94.8389 144.185 94.9023 cv
144.185 94.9245 144.193 94.9332 144.204 94.9332 cv
144.224 94.9332 144.258 94.9041 144.283 94.8749 cv
144.307 94.8459 144.323 94.8168 144.308 94.8168 cv
145.36 95.2539 mo
145.36 95.2491 145.357 95.2442 145.35 95.2391 cv
145.357 95.2429 145.36 95.2478 145.36 95.2539 cv
f
145.607 94.9833 mo
145.607 94.9833 145.641 94.9763 145.676 94.9692 cv
145.71 94.9622 145.745 94.9551 145.745 94.9551 cv
145.745 94.9551 145.725 94.9593 145.669 94.9707 cv
145.624 94.9799 145.607 94.9833 145.607 94.9833 cv
f
145.935 95.0571 mo
146.153 94.9551 146.231 94.9211 146.236 94.9211 cv
146.247 94.9211 145.966 95.0571 145.935 95.0571 cv
f
146.62 94.6748 mo
146.618 94.6748 146.642 94.6738 146.706 94.6714 cv
146.906 94.6641 146.977 94.6616 146.979 94.6616 cv
146.982 94.6616 146.894 94.6649 146.805 94.6682 cv
146.715 94.6715 146.624 94.6748 146.62 94.6748 cv
f
145.877 94.7043 mo
145.874 94.7043 145.854 94.6996 145.803 94.6865 cv
145.779 94.679 145.772 94.6762 145.774 94.6762 cv
145.778 94.6762 145.805 94.6832 145.83 94.6902 cv
145.856 94.6972 145.879 94.7043 145.877 94.7043 cv
f
145.4 95.615 mo
145.4 95.615 145.426 95.5955 145.507 95.5371 cv
145.508 95.5363 145.509 95.536 145.509 95.536 cv
145.51 95.536 145.483 95.5557 145.455 95.5754 cv
145.428 95.5952 145.4 95.615 145.4 95.615 cv
f
137.7 97.3027 mo
137.73 97.2202 137.837 97.184 137.891 97.184 cv
137.95 97.184 137.944 97.228 137.7 97.3027 cv
f
139.268 100.827 mo
139.268 100.827 139.228 100.827 139.13 100.827 cv
139.212 100.827 139.268 100.827 139.268 100.827 cv
f
137.424 101.913 mo
137.423 101.913 137.423 101.911 137.425 101.906 cv
137.455 101.851 137.598 101.311 137.789 101.311 cv
137.812 101.311 137.836 101.319 137.86 101.336 cv
137.959 101.411 137.453 101.913 137.424 101.913 cv
f
137.688 104.387 mo
137.64 104.387 137.625 104.366 137.657 104.317 cv
137.832 104.042 138.319 104.028 138.522 103.857 cv
138.488 103.863 138.431 103.867 138.364 103.867 cv
138.171 103.867 137.9 103.838 137.875 103.763 cv
138.209 103.409 li
138.06 103.366 137.981 103.389 137.981 103.236 cv
137.981 103.126 138.514 103.233 138.593 102.895 cv
138.251 102.741 138.215 102.422 138.107 102.339 cv
137.821 102.551 li
137.75 102.427 137.724 102.407 137.709 102.407 cv
137.705 102.407 137.702 102.408 137.699 102.409 cv
137.696 102.41 137.693 102.412 137.69 102.412 cv
137.684 102.412 137.676 102.406 137.662 102.384 cv
137.644 102.35 137.714 102.299 137.791 102.246 cv
137.784 102.158 137.839 101.915 137.839 101.896 cv
137.748 101.939 137.697 102.162 137.601 102.162 cv
137.571 102.136 li
137.361 101.967 138.001 101.604 138.022 101.589 cv
138.171 101.478 138.714 101.036 138.767 101.036 cv
138.879 101.084 li
138.993 101.158 138.458 101.649 138.408 101.649 cv
138.407 101.649 138.406 101.648 138.405 101.647 cv
138.42 101.669 138.445 101.677 138.477 101.677 cv
138.529 101.677 138.598 101.656 138.67 101.635 cv
138.743 101.614 138.817 101.592 138.88 101.592 cv
138.942 101.592 138.992 101.614 139.014 101.679 cv
139.013 101.677 139.013 101.676 139.012 101.676 cv
139.007 101.676 139.09 102.09 139.186 102.503 cv
139.283 102.917 139.392 103.33 139.44 103.33 cv
139.442 103.33 139.445 103.329 139.447 103.327 cv
139.644 103.266 139.766 103.24 139.829 103.24 cv
140.035 103.24 139.588 103.527 139.046 103.813 cv
138.504 104.1 137.866 104.387 137.688 104.387 cv
137.946 102.061 mo
137.922 102.11 137.902 102.15 137.884 102.181 cv
137.949 102.133 137.991 102.088 137.946 102.061 cv
f
136.651 103.857 mo
136.538 103.857 136.448 103.83 136.402 103.764 cv
136.405 103.768 136.407 103.769 136.41 103.769 cv
136.475 103.769 136.597 102.866 136.6 102.852 cv
136.6 102.853 136.607 102.853 136.619 102.853 cv
136.706 102.853 137.056 102.824 137.123 102.744 cv
137.123 102.597 137.252 102.518 137.4 102.518 cv
137.687 102.518 138.041 102.815 137.643 103.476 cv
137.577 103.592 137.005 103.857 136.651 103.857 cv
136.856 103.24 mo
136.851 103.24 136.822 103.242 136.797 103.245 cv
136.772 103.248 136.75 103.251 136.761 103.251 cv
136.764 103.251 136.771 103.25 136.782 103.25 cv
136.845 103.242 136.862 103.24 136.856 103.24 cv
136.402 103.764 mo
136.402 103.764 136.402 103.764 136.401 103.763 cv
136.402 103.764 136.402 103.764 136.402 103.764 cv
f
138.171 102.997 mo
138.171 102.997 138.14 102.983 138.047 102.939 cv
138.058 102.944 138.172 102.997 138.171 102.997 cv
f
135.654 101.713 mo
135.654 101.713 135.654 101.69 135.654 101.667 cv
135.654 101.645 135.654 101.622 135.654 101.622 cv
135.654 101.622 135.654 101.634 135.654 101.667 cv
135.654 101.701 135.654 101.713 135.654 101.713 cv
f
141.8 108.466 mo
141.242 108.466 141.855 107.611 141.877 107.574 cv
141.9 107.536 141.517 106.959 141.997 106.959 cv
141.897 106.959 142.399 108.466 141.8 108.466 cv
f
140.42 108.146 mo
140.42 108.146 140.419 108.145 140.417 108.145 cv
140.306 108.102 140.269 108.088 140.269 108.088 cv
140.269 108.088 140.307 108.103 140.345 108.117 cv
140.382 108.131 140.42 108.146 140.42 108.146 cv
f
145.516 108.655 mo
145.515 108.655 145.476 108.649 145.439 108.643 cv
145.402 108.637 145.365 108.631 145.367 108.631 cv
145.368 108.631 145.394 108.635 145.465 108.646 cv
145.504 108.653 145.517 108.655 145.516 108.655 cv
f
145.87 109.198 mo
145.603 109.198 145.323 109.113 145.364 108.853 cv
145.386 108.704 145.479 108.651 145.597 108.651 cv
145.744 108.651 145.931 108.735 146.064 108.819 cv
146.197 108.904 146.276 108.988 146.21 108.988 cv
146.202 108.988 146.191 108.986 146.178 108.984 cv
146.495 109.073 146.193 109.198 145.87 109.198 cv
f
156.745 118.268 mo
156.745 118.268 156.744 118.268 156.742 118.267 cv
156.552 118.17 156.489 118.138 156.49 118.138 cv
156.49 118.138 156.555 118.171 156.619 118.203 cv
156.683 118.235 156.747 118.268 156.745 118.268 cv
f
155.577 119.599 mo
154.893 119.404 154.146 119.1 153.347 118.702 cv
154.17 118.7 155.793 118.679 155.715 118.546 cv
155.867 118.769 155.793 119.141 155.577 119.599 cv
155.715 118.546 mo
155.714 118.545 155.714 118.544 155.713 118.543 cv
155.714 118.544 155.715 118.545 155.715 118.546 cv
152.953 118.5 mo
149.393 116.63 144.929 113.027 140.853 108.984 cv
141.2 108.916 141.519 108.876 141.786 108.876 cv
142.15 108.876 142.419 108.95 142.538 109.127 cv
142.775 109.477 141.955 110.259 142.507 110.403 cv
143.111 110.548 144.384 111.125 144.932 111.598 cv
144.492 111.213 145.112 111.116 145.827 111.116 cv
146.456 111.116 147.158 111.191 147.272 111.212 cv
147.651 111.282 148.033 111.325 148.392 111.325 cv
149.619 111.325 150.575 110.827 150.173 109.228 cv
150.173 109.389 149.797 109.424 149.334 109.424 cv
149.155 109.424 148.964 109.419 148.776 109.414 cv
148.589 109.408 148.405 109.403 148.241 109.403 cv
147.844 109.403 147.565 109.434 147.639 109.568 cv
147.522 109.359 147.721 109.282 147.721 109.167 cv
147.363 109.381 li
147.362 109.032 147.456 108.899 147.463 108.796 cv
147.03 108.721 li
146.809 108.484 147.367 108.566 147.334 108.457 cv
147.299 108.206 li
147.298 108.208 147.204 108.465 147.101 108.465 cv
147.067 108.465 147.031 108.435 146.997 108.357 cv
147.224 107.891 li
147.207 107.762 147.076 107.719 146.905 107.719 cv
146.574 107.719 146.096 107.877 146.005 107.877 cv
145.857 107.877 146.562 108.648 146.695 108.755 cv
146.675 108.775 146.645 108.814 146.616 108.854 cv
146.576 108.91 146.54 108.966 146.541 108.966 cv
146.542 108.966 146.542 108.965 146.544 108.963 cv
146.527 108.986 146.502 108.997 146.47 108.997 cv
145.934 108.997 143.449 105.965 143.098 105.965 cv
142.88 106.065 li
142.966 106.325 144.515 108.041 144.705 108.135 cv
144.653 108.115 144.521 107.999 144.415 107.932 cv
144.586 108.181 143.683 109.332 143.204 109.332 cv
143.037 109.332 142.921 109.191 142.921 108.822 cv
143.021 108.708 li
145.634 108.708 142.18 107.273 142.18 107.021 cv
142.18 106.892 142.114 106.836 141.994 106.836 cv
141.628 106.836 140.767 107.359 139.801 107.921 cv
139.38 107.488 138.964 107.052 138.556 106.613 cv
139.427 106.279 137.968 105.32 137.863 104.979 cv
137.875 104.992 137.897 104.997 137.927 104.997 cv
138.228 104.997 139.315 104.434 138.772 104.434 cv
138.916 104.434 141.894 103 141.88 102.935 cv
141.878 102.929 141.83 102.237 141.923 101.82 cv
141.914 101.823 141.906 101.824 141.897 101.824 cv
141.722 101.824 141.608 101.346 141.535 100.869 cv
141.463 100.391 141.431 99.9136 141.42 99.9136 cv
141.419 99.9136 141.418 99.9171 141.417 99.9243 cv
141.439 99.5678 143.453 99.1591 143.423 98.103 cv
143.337 98.1193 143.024 98.2956 142.914 98.2956 cv
142.898 98.2956 142.886 98.2921 142.88 98.2842 cv
142.877 98.1806 li
143.663 97.8407 144.061 97.4648 144.826 97.4648 cv
144.917 97.4648 145.013 97.4701 145.115 97.4814 cv
144.906 97.3413 li
145.927 97.1982 li
145.742 97.4937 li
145.813 97.4902 146.262 97.2247 146.423 97.2247 cv
146.49 97.2247 146.508 97.2699 146.43 97.397 cv
146.43 97.3971 146.431 97.3972 146.431 97.3972 cv
146.445 97.3972 146.516 97.374 146.61 97.3509 cv
146.703 97.3278 146.819 97.3047 146.921 97.3047 cv
147.046 97.3047 147.151 97.3391 147.172 97.4497 cv
146.825 97.6089 li
147.67 97.7349 148.299 97.5937 149.302 98.1446 cv
150.026 98.5436 149.9 98.6419 149.496 98.6419 cv
149.299 98.6419 149.037 98.6187 148.774 98.5954 cv
148.512 98.5721 148.249 98.5489 148.051 98.5489 cv
147.942 98.5489 147.853 98.5561 147.794 98.5742 cv
148.063 98.7844 148.561 99.5314 149.052 99.5313 cv
149.124 99.5313 149.195 99.5155 149.265 99.48 cv
149.221 99.4306 148.742 99.2788 148.802 99.185 cv
148.931 99.0786 li
148.934 99.075 148.94 99.0733 148.947 99.0733 cv
148.992 99.0733 149.114 99.1318 149.252 99.1902 cv
149.391 99.2487 149.546 99.3073 149.658 99.3073 cv
149.717 99.3073 149.764 99.291 149.79 99.25 cv
149.831 99.1619 149.831 98.6196 150.189 98.6196 cv
150.297 98.6196 150.437 98.6692 150.622 98.7959 cv
150.676 98.5698 li
150.263 97.9736 li
151.113 98.2475 li
151.105 98.3247 150.802 98.2739 150.742 98.3691 cv
150.764 98.4526 150.846 98.4864 150.967 98.4864 cv
151.225 98.4863 151.658 98.3327 152.048 98.1791 cv
152.13 98.1469 152.209 98.1147 152.285 98.0839 cv
156.258 102.272 158.903 107.735 159.54 113.795 cv
159.438 113.754 159.336 113.713 159.234 113.672 cv
158.297 113.293 157.353 112.915 156.891 112.915 cv
156.772 112.915 156.685 112.94 156.638 112.997 cv
156.568 113.08 156.483 113.116 156.388 113.116 cv
155.803 113.116 154.826 111.769 154.67 111.751 cv
154.628 111.745 154.59 111.742 154.557 111.742 cv
153.743 111.742 155.249 113.519 155.242 113.539 cv
155.261 113.52 155.229 113.192 155.335 113.192 cv
155.784 113.192 155.295 114.041 155.707 114.041 cv
156.331 114.041 156.573 113.225 156.999 113.225 cv
156.669 113.225 158.233 114.643 158.343 114.643 cv
158.347 114.643 158.349 114.641 158.349 114.637 cv
158.411 116.869 154.816 116.859 153.599 118.22 cv
153.789 118.01 150.115 112.847 150.064 112.088 cv
150.045 112.194 149.995 112.633 149.91 112.633 cv
149.694 112.633 149.397 112.013 149.317 111.842 cv
148.956 113.607 153.108 117.15 152.953 118.5 cv
142.43 102.944 mo
142.642 103.05 142.865 103.095 143.092 103.095 cv
144.21 103.095 145.44 102.022 146.02 101.845 cv
146.06 101.72 146.002 101.579 146.024 101.439 cv
146.029 101.433 146.025 101.43 146.012 101.43 cv
145.93 101.43 145.518 101.545 145.384 101.603 cv
145.3 101.425 li
145.344 100.977 147.003 100.931 147.379 100.843 cv
147.218 100.824 147.035 100.819 146.844 100.819 cv
146.762 100.819 146.678 100.82 146.594 100.821 cv
146.51 100.822 146.425 100.822 146.341 100.822 cv
145.842 100.822 145.365 100.793 145.133 100.555 cv
144.736 100.158 145.223 99.6114 145.635 99.3443 cv
145.267 99.4897 144.72 99.7028 144.347 99.8897 cv
143.657 100.232 144.643 100.91 144.586 100.963 cv
143.968 101.584 143.632 102.783 142.643 102.783 cv
142.476 102.684 li
142.548 102.005 142.71 102.259 142.329 101.061 cv
142.269 101.251 142.214 101.4 142.161 101.514 cv
142.216 101.523 142.282 101.564 142.359 101.646 cv
142.437 101.729 142.106 102.981 142.344 102.981 cv
142.367 102.981 142.395 102.97 142.43 102.944 cv
146.715 108.767 mo
146.712 108.767 146.705 108.763 146.695 108.755 cv
146.704 108.746 146.71 108.741 146.715 108.741 cv
146.72 108.741 146.721 108.749 146.716 108.766 cv
146.716 108.767 146.716 108.767 146.715 108.767 cv
144.718 108.139 mo
144.715 108.139 144.711 108.138 144.705 108.135 cv
144.71 108.137 144.715 108.138 144.718 108.138 cv
144.72 108.138 144.721 108.138 144.723 108.137 cv
144.722 108.138 144.72 108.139 144.718 108.139 cv
137.863 104.979 mo
137.851 104.967 137.849 104.947 137.861 104.919 cv
137.855 104.936 137.856 104.956 137.863 104.979 cv
f
151.367 98.078 mo
151.366 98.078 151.352 98.032 151.316 97.9062 cv
151.285 97.7813 151.274 97.7356 151.275 97.7356 cv
151.277 97.7356 151.301 97.8212 151.324 97.9068 cv
151.347 97.9924 151.369 98.078 151.367 98.078 cv
f
144.383 101.885 mo
144.38 101.885 144.435 101.828 144.609 101.66 cv
144.612 101.658 144.614 101.658 144.614 101.658 cv
144.622 101.658 144.566 101.714 144.507 101.771 cv
144.448 101.828 144.386 101.885 144.383 101.885 cv
f
143.56 102.651 mo
143.557 102.651 143.528 102.631 143.502 102.611 cv
143.475 102.592 143.451 102.572 143.456 102.572 cv
143.458 102.572 143.467 102.576 143.485 102.587 cv
143.545 102.634 143.563 102.651 143.56 102.651 cv
f
190.412 42.9312 mo
190.981 40.272 li
188.799 41.895 li
190.412 42.9312 li
cp
190.116 44.2891 mo
187.698 42.7339 li
186.377 43.7148 li
186.147 43.877 185.855 43.8711 185.636 43.731 cv
185.466 43.5791 li
185.248 43.2847 185.313 42.876 185.598 42.6514 cv
191.568 38.2007 li
191.797 38.0396 192.106 38.0405 192.319 38.1909 cv
192.554 38.3286 192.674 38.6021 192.623 38.8789 cv
191.055 46.1577 li
190.969 46.5103 190.625 46.7393 190.265 46.6631 cv
190.057 46.5713 li
189.838 46.4307 189.712 46.1665 189.773 45.897 cv
190.116 44.2891 li
cp
.435294 .521569 .74902 rgb
f
96.9419 170.124 mo
101.868 172.358 li
104.133 173.337 106.75 172.385 107.789 170.1 cv
108.807 167.853 107.798 165.257 105.569 164.199 cv
100.642 161.964 li
96.9419 170.124 li
cp
102.627 157.588 mo
106.017 159.125 li
107.75 159.912 109.792 159.08 110.579 157.345 cv
111.365 155.611 110.611 153.606 108.877 152.819 cv
105.487 151.282 li
102.627 157.588 li
cp
91.5645 170.346 mo
102.113 147.09 li
102.667 145.867 104.083 145.368 105.264 145.905 cv
105.382 145.958 li
105.422 145.976 li
110.861 148.443 li
115 150.321 116.831 155.19 114.954 159.331 cv
114.185 161.025 112.936 162.312 111.417 163.145 cv
113.104 165.714 113.522 169.088 112.164 172.084 cv
110.035 176.775 104.536 178.843 99.8843 176.732 cv
92.9082 173.568 li
92.8857 173.511 li
92.75 173.497 li
91.5674 172.961 91.0288 171.529 91.5645 170.346 cv
cp
.898039 .45098 .407843 rgb
f
272.949 96.5659 mo
272.965 93.4399 275.586 90.8994 278.742 90.8833 cv
280.131 90.8833 281.394 91.3413 282.388 92.1147 cv
282.767 92.4302 282.83 92.9829 282.546 93.3774 cv
282.229 93.772 281.646 93.8354 281.283 93.5508 cv
280.589 92.9829 279.72 92.6826 278.742 92.6826 cv
277.652 92.6826 276.643 93.1255 275.901 93.8198 cv
275.191 94.5459 274.748 95.4922 274.748 96.5659 cv
274.748 97.6392 275.191 98.6177 275.901 99.312 cv
276.643 100.006 277.652 100.448 278.742 100.448 cv
279.72 100.448 280.573 100.148 281.283 99.5806 cv
281.646 99.312 282.229 99.3755 282.546 99.7539 cv
282.83 100.148 282.767 100.717 282.388 101.017 cv
281.394 101.79 280.131 102.248 278.742 102.248 cv
275.586 102.248 272.965 99.707 272.949 96.5659 cv
cp
.258824 .258824 .258824 rgb
f
138.308 164.264 mo
139.584 163.845 li
142.297 162.933 143.765 160.032 142.866 157.291 cv
141.98 154.592 139.073 153.104 136.353 153.996 cv
135.077 154.415 li
138.308 164.264 li
cp
136.398 166.168 mo
132.41 154.012 li
132.201 153.373 132.533 152.716 133.171 152.506 cv
135.603 151.708 li
139.579 150.404 143.855 152.585 145.153 156.541 cv
146.464 160.538 144.311 164.827 140.334 166.132 cv
137.903 166.93 li
137.265 167.139 136.601 166.787 136.398 166.168 cv
cp
f
101.621 199.932 mo
101.989 195.291 li
102.008 195.047 102.212 194.874 102.457 194.893 cv
102.464 194.893 li
102.479 194.895 li
105.028 195.096 li
105.256 195.114 105.446 195.319 105.427 195.563 cv
105.408 195.807 105.188 195.987 104.96 195.969 cv
102.828 195.8 li
102.713 197.24 li
104.547 197.385 li
104.783 197.404 104.963 197.624 104.945 197.852 cv
104.925 198.096 104.713 198.276 104.477 198.258 cv
102.644 198.113 li
102.53 199.561 li
104.662 199.729 li
104.89 199.747 105.079 199.961 105.059 200.205 cv
105.041 200.44 104.82 200.621 104.593 200.603 cv
102.043 200.401 li
102.028 200.392 li
102.02 200.399 li
101.776 200.38 101.604 200.168 101.621 199.932 cv
cp
f
349.272 205.361 mo
349.272 187.755 li
349.272 186.83 349.988 186.113 350.913 186.113 cv
351.839 186.113 352.585 186.83 352.585 187.755 cv
352.585 194.917 li
360.313 194.917 li
360.313 187.755 li
360.313 186.83 361.03 186.113 361.955 186.113 cv
362.88 186.113 363.626 186.83 363.626 187.755 cv
363.626 205.361 li
363.626 206.287 362.88 207.003 361.955 207.003 cv
361.03 207.003 360.313 206.287 360.313 205.361 cv
360.313 198.199 li
352.585 198.199 li
352.585 205.361 li
352.585 206.287 351.839 207.003 350.913 207.003 cv
349.988 207.003 349.272 206.287 349.272 205.361 cv
cp
.101961 .737255 .611765 rgb
f
160.446 83.3262 mo
165.515 64.0425 li
165.773 63.0615 166.772 62.4502 167.785 62.7163 cv
167.818 62.7246 li
167.884 62.7417 li
178.473 65.5259 li
179.421 65.7744 180.057 66.8159 179.799 67.7964 cv
179.532 68.8086 178.467 69.4033 177.52 69.1543 cv
168.663 66.8262 li
167.09 72.8071 li
174.706 74.8091 li
175.687 75.0669 176.28 76.1309 176.031 77.0791 cv
175.764 78.0918 174.732 78.6938 173.752 78.4365 cv
166.137 76.4346 li
164.074 84.2803 li
163.816 85.2607 162.785 85.8623 161.772 85.5962 cv
160.759 85.3301 160.189 84.3071 160.446 83.3262 cv
cp
.976471 .698039 .337255 rgb
f
339.698 227.904 mo
339.641 228.587 340.022 229.263 340.688 229.545 cv
341.517 229.896 342.478 229.506 342.823 228.689 cv
344.657 224.364 li
344.801 224.025 345.185 223.879 345.522 224.021 cv
345.849 224.161 346.01 224.538 345.867 224.876 cv
344.034 229.202 li
343.4 230.694 341.667 231.387 340.175 230.755 cv
338.976 230.246 338.283 229.027 338.397 227.79 cv
338.428 227.417 338.755 227.157 339.098 227.2 cv
339.471 227.229 339.734 227.547 339.698 227.904 cv
cp
.152941 .682353 .376471 rgb
f
92.1323 251.818 mo
84.2397 225.087 li
83.8491 223.763 84.5942 222.251 86.0098 221.833 cv
87.4268 221.415 88.8745 222.279 89.2661 223.604 cv
93.1377 236.718 li
103.557 217.496 li
104.266 216.193 105.819 215.734 107.122 216.443 cv
108.364 217.12 108.836 218.719 108.174 220.007 cv
101.076 232.983 li
115.146 243.285 li
116.369 244.065 116.659 245.719 115.818 246.91 cv
115.483 247.457 114.989 247.801 114.395 247.977 cv
113.709 248.179 112.929 248.062 112.251 247.616 cv
98.564 237.599 li
95.2422 243.846 li
97.1577 250.334 li
97.562 251.705 96.8032 253.17 95.3862 253.589 cv
93.9702 254.007 92.5366 253.188 92.1323 251.818 cv
cp
1 .882353 .403922 rgb
f
168.9 152.849 mo
176.115 141.415 li
176.481 140.834 177.252 140.643 177.854 141.021 cv
178.455 141.401 178.633 142.192 178.266 142.773 cv
171.736 153.121 li
176.987 156.436 li
177.549 156.79 177.748 157.592 177.369 158.192 cv
177.001 158.774 176.192 158.94 175.63 158.585 cv
169.351 154.624 li
169.313 154.6 li
169.293 154.587 li
168.692 154.208 168.533 153.43 168.9 152.849 cv
cp
.258824 .258824 .258824 rgb
f
272.932 138.29 mo
266.755 155.364 li
266.44 156.233 265.425 156.684 264.559 156.37 cv
263.66 156.045 263.227 155.071 263.541 154.202 cv
267.949 142.019 li
261.688 146.298 li
261.213 146.618 260.666 146.682 260.145 146.494 cv
260.116 146.484 li
260.087 146.473 li
259.566 146.285 259.158 145.875 258.997 145.325 cv
256.952 138.041 li
252.545 150.224 li
252.23 151.093 251.246 151.554 250.35 151.229 cv
249.48 150.915 249.018 149.93 249.332 149.062 cv
255.51 131.987 li
255.824 131.119 256.809 130.657 257.677 130.971 cv
257.765 131.003 li
258.228 131.17 258.664 131.591 258.796 132.13 cv
261.666 142.2 li
270.313 136.297 li
270.789 135.978 271.337 135.913 271.858 136.102 cv
271.887 136.112 li
272.745 136.455 273.245 137.422 272.932 138.29 cv
cp
.552941 .764706 .458824 rgb
f
260.434 83.2593 mo
260.354 83.4819 260.101 83.6001 259.886 83.5225 cv
259.655 83.4395 259.544 83.1895 259.625 82.9668 cv
261.186 78.6548 li
261.188 78.6479 li
261.227 78.519 261.335 78.4067 261.476 78.3652 cv
261.707 78.3066 261.946 78.4346 262.008 78.6592 cv
263.204 82.8438 li
264.311 79.7861 li
264.388 79.5713 264.634 79.4502 264.856 79.5308 cv
265.078 79.6113 265.197 79.8643 265.119 80.0791 cv
263.559 84.3906 li
263.478 84.6133 263.225 84.7314 263.003 84.6509 cv
262.884 84.6074 262.794 84.5083 262.752 84.3921 cv
262.73 84.334 li
261.549 80.1797 li
260.434 83.2593 li
cp
.258824 .258824 .258824 rgb
f
150.729 79.8013 mo
150.729 78.6514 150.272 77.5859 149.58 76.8423 cv
148.87 76.0811 147.923 75.6411 146.908 75.6411 cv
145.825 75.6411 144.879 76.0811 144.168 76.8423 cv
143.458 77.5859 143.019 78.6514 143.019 79.8013 cv
143.019 80.9512 143.458 82.0166 144.168 82.7437 cv
144.879 83.5049 145.825 83.9609 146.908 83.9609 cv
147.923 83.9609 148.87 83.5049 149.58 82.7437 cv
150.272 82.0166 150.729 80.9512 150.729 79.8013 cv
cp
150.95 75.5229 mo
151.999 76.6387 152.658 78.1274 152.658 79.8013 cv
152.658 81.4756 151.999 82.981 150.95 84.0796 cv
149.952 85.1792 148.464 85.8896 146.908 85.8896 cv
145.285 85.8896 143.796 85.1792 142.765 84.0796 cv
141.716 82.981 141.09 81.4756 141.09 79.8013 cv
141.09 78.1274 141.716 76.6387 142.765 75.5229 cv
143.796 74.4063 145.285 73.7139 146.908 73.7139 cv
148.464 73.7139 149.952 74.4063 150.95 75.5229 cv
cp
f
352.798 152.799 mo
356.329 151.523 li
357.994 150.921 358.809 149.134 358.256 147.515 cv
357.625 145.86 355.855 145.006 354.19 145.608 cv
350.659 146.884 li
352.798 152.799 li
cp
357.48 154.71 mo
353.948 155.986 li
356.2 162.217 li
356.513 163.079 356.053 164.056 355.163 164.376 cv
354.301 164.688 353.324 164.23 353.012 163.368 cv
346.891 146.428 li
346.569 145.538 347.037 144.589 347.9 144.278 cv
347.928 144.267 li
353.039 142.421 li
356.455 141.186 360.208 142.947 361.443 146.364 cv
362.657 149.723 360.896 153.476 357.48 154.71 cv
cp
.619608 .411765 .686275 rgb
f
332.112 139.633 mo
332.785 139.979 333.566 140.048 334.323 139.766 cv
335.069 139.489 335.616 138.928 335.935 138.212 cv
336.235 137.49 336.266 136.644 335.958 135.816 cv
335.651 134.989 335.075 134.367 334.384 134.042 cv
333.671 133.696 332.89 133.628 332.145 133.906 cv
331.388 134.188 330.84 134.749 330.563 135.462 cv
330.252 136.161 330.222 137.008 330.529 137.835 cv
330.836 138.663 331.412 139.283 332.112 139.633 cv
cp
339.729 140.25 mo
339.27 140.978 338.695 141.469 338.079 141.698 cv
338.044 141.712 li
337.228 142.015 336.419 141.944 335.652 141.805 cv
335.372 141.764 335.109 141.808 334.876 141.895 cv
334.492 142.038 334.156 142.348 334.122 142.4 cv
333.938 142.615 333.66 142.691 333.435 142.617 cv
333.355 142.619 li
333.327 142.617 li
333.239 142.556 333.144 142.512 333.064 142.409 cv
332.761 142.125 332.781 141.679 333.046 141.395 cv
333.072 141.358 li
332.524 141.311 331.969 141.172 331.45 140.954 cv
330.444 140.425 329.592 139.523 329.154 138.346 cv
328.721 137.181 328.781 135.952 329.201 134.907 cv
329.647 133.826 330.491 132.956 331.633 132.531 cv
332.775 132.107 333.994 132.21 335.004 132.75 cv
336.039 133.253 336.877 134.149 337.31 135.314 cv
337.747 136.491 337.703 137.727 337.252 138.797 cv
337.028 139.304 336.703 139.783 336.301 140.198 cv
336.071 140.402 li
336.661 140.488 337.159 140.475 337.533 140.336 cv
337.87 140.211 338.166 140.008 338.51 139.469 cv
338.715 139.128 339.156 139.03 339.497 139.235 cv
339.838 139.44 339.948 139.877 339.729 140.25 cv
cp
.258824 .258824 .258824 rgb
f
278.707 52.1152 mo
277.986 50.6328 276.238 50.0283 274.782 50.7363 cv
271.639 52.2646 li
274.198 57.5303 li
277.342 56.0015 li
278.799 55.2935 279.403 53.5464 278.707 52.1152 cv
cp
287.279 60.6494 mo
287.895 61.2671 287.872 62.2583 287.253 62.873 cv
287.165 62.9487 286.984 63.0991 286.729 63.2227 cv
286.704 63.2349 li
286.447 63.3599 286.04 63.4951 285.569 63.4395 cv
285.138 63.396 284.696 63.2012 284.317 62.9429 cv
283.6 62.3755 282.973 61.542 282.29 60.1362 cv
282.029 59.6631 281.765 59.3813 281.449 59.1865 cv
281.159 58.9805 280.729 58.8735 280.322 58.8184 cv
279.612 58.7217 278.848 58.8398 278.594 58.9004 cv
275.576 60.3667 li
278.272 65.9116 li
278.646 66.6792 278.317 67.6279 277.524 68.0132 cv
276.732 68.3979 275.809 68.0581 275.436 67.291 cv
268.107 52.2119 li
267.721 51.4199 268.036 50.5088 268.829 50.123 cv
268.854 50.1108 li
273.403 47.8999 li
276.444 46.4214 280.066 47.6948 281.544 50.7368 cv
282.363 52.4233 282.317 54.2778 281.587 55.8955 cv
282.045 55.9902 282.5 56.1475 282.941 56.4072 cv
283.814 56.9004 284.604 57.6846 285.127 58.7573 cv
285.475 59.5366 285.787 59.9849 285.962 60.2153 cv
286.434 60.144 286.915 60.2891 287.279 60.6494 cv
cp
.301961 .74902 .85098 rgb
f
301.828 84.6582 mo
301.806 84.4351 301.972 84.2344 302.196 84.2124 cv
302.642 84.167 303.302 83.9775 303.691 83.5762 cv
303.971 83.2969 304.138 82.9619 304.183 82.6719 cv
304.228 82.3818 304.16 82.1694 304.021 82.0303 cv
303.792 81.9019 li
303.702 81.8794 303.598 81.8735 303.457 81.9019 cv
303.188 81.9575 302.821 82.1357 302.43 82.4043 cv
302.419 82.4155 li
302.107 82.6274 301.795 82.8057 301.481 82.9175 cv
301.169 83.0288 300.845 83.0737 300.527 83.0015 cv
300.31 82.9507 300.108 82.8394 299.941 82.6724 cv
299.606 82.3369 299.506 81.8569 299.573 81.4102 cv
299.646 80.9585 299.88 80.5122 300.243 80.1499 cv
300.778 79.6138 301.437 79.4795 301.905 79.3789 cv
302.124 79.3403 302.342 79.48 302.38 79.6978 cv
302.43 79.915 302.291 80.1323 302.067 80.1777 cv
301.594 80.272 301.152 80.3779 300.813 80.7188 cv
300.561 80.9697 300.416 81.271 300.377 81.5337 cv
300.338 81.7959 300.399 81.98 300.517 82.0972 cv
300.711 82.2144 li
300.784 82.2314 300.885 82.2314 301.008 82.209 cv
301.253 82.1636 301.594 82.0024 301.95 81.7563 cv
301.962 81.7456 li
302.302 81.5166 302.638 81.3271 302.967 81.21 cv
303.307 81.0928 303.652 81.0366 303.987 81.1147 cv
304.205 81.165 304.423 81.2822 304.596 81.4556 cv
304.953 81.8125 305.059 82.3203 304.98 82.8003 cv
304.907 83.2744 304.662 83.7544 304.267 84.1509 cv
303.658 84.7476 302.85 84.9541 302.279 85.021 cv
302.057 85.0435 301.854 84.8765 301.828 84.6582 cv
cp
.258824 .258824 .258824 rgb
f
151.991 220.32 mo
148.865 224.604 li
118.043 202.115 li
121.17 197.831 li
151.991 220.32 li
cp
1 .6 0 rgb
f
118.817 196.115 mo
115.691 200.399 li
118.043 202.115 li
121.17 197.831 li
118.817 196.115 li
cp
.972549 .792157 0 rgb
f
115.431 195.817 mo
114.374 197.264 li
113.803 198.047 113.974 199.146 114.757 199.717 cv
115.691 200.399 li
118.817 196.115 li
117.884 195.434 li
117.101 194.862 116.002 195.034 115.431 195.817 cv
cp
1 .517647 .486275 rgb
f
157.97 227.965 mo
148.865 224.604 li
151.991 220.32 li
157.97 227.965 li
cp
.996078 .807843 .658824 rgb
f
157.97 227.965 mo
155.432 227.027 li
156.303 225.833 li
157.97 227.965 li
cp
.258824 .258824 .258824 rgb
f
150.428 222.462 mo
151.991 220.32 li
121.17 197.831 li
119.606 199.973 li
150.428 222.462 li
cp
.988235 .670588 .247059 rgb
f
155.516 398.694 mo
155.516 402.276 li
157.821 402.276 li
159.18 402.276 159.859 401.597 159.859 400.526 cv
159.859 399.354 159.035 398.694 157.944 398.694 cv
155.516 398.694 li
cp
157.883 396.06 mo
158.604 396.06 159.468 395.566 159.468 394.454 cv
159.468 393.672 159.098 392.973 158.027 392.973 cv
155.516 392.973 li
155.516 396.06 li
157.883 396.06 li
cp
154.239 404.891 mo
153.334 404.891 152.634 404.211 152.634 403.408 cv
152.634 391.861 li
152.634 391.017 153.375 390.379 154.239 390.379 cv
157.718 390.379 li
160.806 390.379 162.35 392.354 162.35 394.413 cv
162.35 395.854 161.424 396.739 160.188 397.336 cv
161.465 397.851 162.741 398.777 162.741 400.568 cv
162.741 402.977 160.806 404.891 157.636 404.891 cv
154.239 404.891 li
cp
.101961 .737255 .611765 rgb
f
168.157 395.587 mo
168.157 399.662 li
168.157 401.309 168.939 402.462 170.627 402.462 cv
172.314 402.462 173.097 401.309 173.097 399.662 cv
173.097 395.587 li
173.097 393.919 172.438 392.808 170.627 392.808 cv
168.815 392.808 168.157 393.919 168.157 395.587 cv
cp
165.275 399.662 mo
165.275 395.587 li
165.275 392.664 166.777 390.193 170.627 390.193 cv
174.477 390.193 175.979 392.664 175.979 395.587 cv
175.979 399.662 li
175.979 402.668 174.188 405.076 170.627 405.076 cv
167.066 405.076 165.275 402.668 165.275 399.662 cv
cp
f
181.745 395.587 mo
181.745 399.662 li
181.745 401.309 182.527 402.462 184.215 402.462 cv
185.902 402.462 186.685 401.309 186.685 399.662 cv
186.685 395.587 li
186.685 393.919 186.026 392.808 184.215 392.808 cv
182.403 392.808 181.745 393.919 181.745 395.587 cv
cp
178.863 399.662 mo
178.863 395.587 li
178.863 392.664 180.365 390.193 184.215 390.193 cv
188.064 390.193 189.566 392.664 189.566 395.587 cv
189.566 399.662 li
189.566 402.668 187.776 405.076 184.215 405.076 cv
180.654 405.076 178.863 402.668 178.863 399.662 cv
cp
f
197.927 397.027 mo
202.435 402.997 li
202.64 403.265 202.661 403.491 202.661 403.696 cv
202.661 404.294 202.146 405.076 201.261 405.076 cv
200.787 405.076 200.376 404.891 200.067 404.479 cv
196.074 399.127 li
195.703 399.539 li
195.703 403.738 li
195.703 404.458 195.045 405.076 194.263 405.076 cv
193.46 405.076 192.821 404.458 192.821 403.738 cv
192.821 391.511 li
192.821 390.812 193.46 390.193 194.263 390.193 cv
195.045 390.193 195.703 390.812 195.703 391.511 cv
195.703 395.422 li
199.779 390.79 li
200.026 390.481 200.499 390.193 200.952 390.193 cv
201.569 390.193 202.372 390.79 202.372 391.511 cv
202.372 391.819 202.352 392.025 202.022 392.396 cv
197.927 397.027 li
cp
f
214.809 399.662 mo
214.809 401.433 215.427 402.544 217.279 402.544 cv
217.938 402.544 218.473 402.379 218.987 402.05 cv
219.193 401.927 li
219.461 401.762 219.605 401.618 220.078 401.618 cv
220.861 401.618 221.438 402.194 221.438 402.853 cv
221.438 404.047 219.358 405.056 217.176 405.056 cv
213.574 405.056 211.927 402.915 211.927 399.662 cv
211.927 395.587 li
211.927 392.334 213.574 390.193 217.176 390.193 cv
219.358 390.193 221.438 391.202 221.438 392.396 cv
221.438 393.055 220.861 393.631 220.078 393.631 cv
219.605 393.631 219.461 393.487 219.193 393.322 cv
218.987 393.199 li
218.473 392.869 217.938 392.705 217.279 392.705 cv
215.427 392.705 214.809 393.816 214.809 395.587 cv
214.809 399.662 li
cp
f
226.709 395.587 mo
226.709 399.662 li
226.709 401.309 227.491 402.462 229.18 402.462 cv
230.867 402.462 231.648 401.309 231.648 399.662 cv
231.648 395.587 li
231.648 393.919 230.99 392.808 229.18 392.808 cv
227.367 392.808 226.709 393.919 226.709 395.587 cv
cp
223.827 399.662 mo
223.827 395.587 li
223.827 392.664 225.33 390.193 229.18 390.193 cv
233.028 390.193 234.531 392.664 234.531 395.587 cv
234.531 399.662 li
234.531 402.668 232.74 405.076 229.18 405.076 cv
225.618 405.076 223.827 402.668 223.827 399.662 cv
cp
f
245.443 404.355 mo
240.668 396.039 li
240.668 403.738 li
240.668 404.458 239.988 405.076 239.207 405.076 cv
238.404 405.076 237.786 404.458 237.786 403.738 cv
237.786 391.594 li
237.786 390.79 238.424 390.193 239.289 390.193 cv
239.844 390.193 240.4 390.502 240.688 390.955 cv
242.521 394.125 243.57 395.998 245.464 399.313 cv
245.464 391.531 li
245.464 390.812 246.143 390.193 246.926 390.193 cv
247.729 390.193 248.346 390.812 248.346 391.531 cv
248.346 403.676 li
248.346 404.438 247.729 405.076 246.822 405.076 cv
246.287 405.076 245.711 404.788 245.443 404.355 cv
cp
f
254.297 399.662 mo
254.297 401.433 254.915 402.544 256.768 402.544 cv
257.426 402.544 257.961 402.379 258.476 402.05 cv
258.682 401.927 li
258.949 401.762 259.093 401.618 259.566 401.618 cv
260.349 401.618 260.925 402.194 260.925 402.853 cv
260.925 404.047 258.846 405.056 256.664 405.056 cv
253.062 405.056 251.415 402.915 251.415 399.662 cv
251.415 395.587 li
251.415 392.334 253.062 390.193 256.664 390.193 cv
258.846 390.193 260.925 391.202 260.925 392.396 cv
260.925 393.055 260.349 393.631 259.566 393.631 cv
259.093 393.631 258.949 393.487 258.682 393.322 cv
258.476 393.199 li
257.961 392.869 257.426 392.705 256.768 392.705 cv
254.915 392.705 254.297 393.816 254.297 395.587 cv
254.297 399.662 li
cp
f
271.138 404.891 mo
265.683 404.891 li
264.674 404.891 263.769 404.541 263.769 403.429 cv
263.769 391.84 li
263.769 391.12 264.447 390.379 265.354 390.379 cv
270.932 390.379 li
271.714 390.379 272.373 390.996 272.373 391.717 cv
272.373 392.458 271.714 392.993 270.932 392.993 cv
266.65 392.993 li
266.65 396.307 li
270.541 396.307 li
271.261 396.307 271.961 396.863 271.961 397.604 cv
271.961 398.345 271.344 398.921 270.541 398.921 cv
266.65 398.921 li
266.65 402.276 li
271.138 402.276 li
271.899 402.276 272.578 402.853 272.578 403.553 cv
272.578 404.294 271.92 404.891 271.138 404.891 cv
cp
f
278.262 397.336 mo
280.012 397.336 li
281.555 397.336 282.378 396.657 282.378 395.175 cv
282.378 394.104 281.946 392.993 280.012 392.993 cv
278.262 392.993 li
278.262 397.336 li
cp
278.262 399.95 mo
278.262 403.718 li
278.262 404.438 277.603 405.076 276.82 405.076 cv
276.059 405.076 275.38 404.458 275.38 403.718 cv
275.38 391.861 li
275.38 391.058 276.121 390.379 276.985 390.379 cv
280.012 390.379 li
283.881 390.379 285.26 392.685 285.26 395.195 cv
285.26 398.242 283.202 399.95 280.012 399.95 cv
278.262 399.95 li
cp
f
290.841 392.993 mo
288.659 392.993 li
287.836 392.993 287.218 392.396 287.218 391.696 cv
287.218 391.12 287.856 390.379 288.659 390.379 cv
295.904 390.379 li
296.646 390.379 297.366 390.955 297.366 391.696 cv
297.366 392.396 296.687 392.993 295.904 392.993 cv
293.723 392.993 li
293.723 403.759 li
293.723 404.458 293.063 405.076 292.281 405.076 cv
291.479 405.076 290.841 404.458 290.841 403.759 cv
290.841 392.993 li
cp
f
154.697 421.381 mo
154.29 421.381 153.988 421.105 153.988 420.725 cv
153.988 415.253 li
153.988 414.898 154.29 414.597 154.697 414.597 cv
155.09 414.597 155.405 414.898 155.405 415.253 cv
155.405 420.725 li
155.405 421.105 155.09 421.381 154.697 421.381 cv
cp
154.697 413.455 mo
154.224 413.455 153.87 413.101 153.87 412.681 cv
153.87 412.248 154.224 411.906 154.697 411.906 cv
155.156 411.906 155.523 412.261 155.523 412.681 cv
155.51 413.113 155.156 413.455 154.697 413.455 cv
cp
.768627 .803922 .839216 rgb
f
172.452 416.867 mo
172.452 416.276 172.11 415.804 171.467 415.804 cv
171.021 415.804 170.562 416.04 170.221 416.381 cv
170.247 416.525 170.273 416.683 170.273 416.841 cv
170.273 420.725 li
170.273 421.092 170.037 421.381 169.564 421.381 cv
169.092 421.381 168.856 421.092 168.856 420.725 cv
168.856 417.129 li
168.856 416.354 168.725 415.804 167.963 415.804 cv
167.517 415.804 167.032 416.001 166.651 416.237 cv
166.665 416.329 166.677 416.434 166.677 416.513 cv
166.677 420.725 li
166.677 421.092 166.441 421.381 165.969 421.381 cv
165.497 421.381 165.26 421.092 165.26 420.725 cv
165.26 416.513 li
165.26 415.935 165.168 415.909 165.09 415.777 cv
164.985 415.62 164.932 415.528 164.932 415.397 cv
164.932 415.029 165.234 414.78 165.602 414.78 cv
165.864 414.78 166.061 414.925 166.205 415.135 cv
166.795 414.768 167.425 414.558 168.055 414.558 cv
168.685 414.558 169.171 414.768 169.578 415.174 cv
170.208 414.78 170.798 414.558 171.52 414.558 cv
173.002 414.558 173.869 415.476 173.869 416.841 cv
173.869 420.725 li
173.869 421.092 173.632 421.381 173.16 421.381 cv
172.688 421.381 172.452 421.092 172.452 420.725 cv
172.452 416.867 li
cp
f
184.59 419.334 mo
184.59 419.373 li
184.59 419.898 184.852 420.2 185.574 420.2 cv
186.02 420.2 186.414 420.068 186.82 419.74 cv
186.82 418.56 li
186.44 418.468 186.007 418.415 185.679 418.415 cv
184.76 418.415 184.59 418.835 184.59 419.334 cv
cp
186.82 416.919 mo
186.82 416.146 186.427 415.765 185.613 415.765 cv
185.272 415.765 185.062 415.843 184.839 415.935 cv
184.59 416.04 li
184.511 416.079 184.367 416.105 184.249 416.105 cv
183.868 416.105 183.71 415.804 183.71 415.528 cv
183.71 414.833 184.721 414.558 185.745 414.558 cv
187.516 414.558 188.238 415.489 188.238 417.234 cv
188.238 419.898 li
188.238 420.227 188.369 420.278 188.566 420.318 cv
188.841 420.37 188.959 420.541 188.959 420.79 cv
188.959 421.158 188.684 421.342 188.185 421.342 cv
187.726 421.342 187.385 421.158 187.135 420.751 cv
186.65 421.171 186.073 421.381 185.351 421.381 cv
183.92 421.381 183.186 420.58 183.186 419.36 cv
183.186 419.32 li
183.186 418.009 183.999 417.339 185.64 417.339 cv
186.046 417.339 186.44 417.392 186.82 417.497 cv
186.82 416.919 li
cp
f
201.426 416.053 mo
201.045 415.856 200.691 415.738 200.297 415.738 cv
199.471 415.738 199.051 416.197 199.051 417.024 cv
199.051 417.785 199.405 418.284 200.258 418.284 cv
201.045 418.284 201.413 417.838 201.413 417.116 cv
201.413 416.696 li
201.413 416.486 201.413 416.263 201.426 416.053 cv
cp
199.3 421.473 mo
199.064 421.709 198.958 421.945 198.958 422.26 cv
198.958 422.89 199.392 423.258 200.284 423.258 cv
201.124 423.258 201.728 422.93 201.728 422.3 cv
201.728 421.762 201.281 421.512 200.35 421.512 cv
200.074 421.512 li
199.798 421.512 199.536 421.486 199.3 421.473 cv
cp
201.859 415.003 mo
202.174 414.491 202.633 414.255 202.961 414.255 cv
203.289 414.255 203.63 414.531 203.63 414.872 cv
203.63 415.043 203.539 415.174 203.473 415.239 cv
203.276 415.437 li
202.935 415.777 202.817 415.922 202.83 416.315 cv
202.83 417.09 li
202.83 418.441 201.977 419.465 200.231 419.465 cv
199.93 419.465 199.615 419.438 199.353 419.347 cv
199.261 419.544 199.234 419.675 199.234 419.807 cv
199.234 420.213 199.549 420.305 199.772 420.305 cv
200.324 420.305 li
201.924 420.305 203.145 420.922 203.145 422.273 cv
203.145 423.625 201.924 424.465 200.258 424.465 cv
198.657 424.465 197.542 423.69 197.542 422.392 cv
197.542 421.813 197.778 421.354 198.303 420.896 cv
198.053 420.554 197.975 420.134 197.975 419.846 cv
197.975 419.557 198.08 419.189 198.408 418.835 cv
197.896 418.376 197.633 417.746 197.633 416.998 cv
197.633 415.607 198.486 414.558 200.114 414.558 cv
200.756 414.558 201.321 414.715 201.859 415.003 cv
cp
f
213.354 421.381 mo
212.947 421.381 212.645 421.105 212.645 420.725 cv
212.645 415.253 li
212.645 414.898 212.947 414.597 213.354 414.597 cv
213.748 414.597 214.063 414.898 214.063 415.253 cv
214.063 420.725 li
214.063 421.105 213.748 421.381 213.354 421.381 cv
cp
213.354 413.455 mo
212.881 413.455 212.527 413.101 212.527 412.681 cv
212.527 412.248 212.881 411.906 213.354 411.906 cv
213.813 411.906 214.181 412.261 214.181 412.681 cv
214.167 413.113 213.813 413.455 213.354 413.455 cv
cp
f
225.335 420.725 mo
225.335 421.092 225.099 421.381 224.626 421.381 cv
224.154 421.381 223.918 421.092 223.918 420.725 cv
223.918 416.513 li
223.918 415.935 223.826 415.909 223.748 415.777 cv
223.642 415.62 223.59 415.541 223.59 415.384 cv
223.59 415.043 223.878 414.78 224.272 414.78 cv
224.522 414.78 224.732 414.925 224.889 415.161 cv
225.48 414.754 226.123 414.583 226.699 414.583 cv
228.223 414.583 228.982 415.594 228.982 417.103 cv
228.982 420.725 li
228.982 421.092 228.721 421.381 228.275 421.381 cv
227.814 421.381 227.566 421.092 227.566 420.725 cv
227.566 417.103 li
227.566 416.276 227.186 415.791 226.529 415.791 cv
226.135 415.791 225.729 415.935 225.295 416.197 cv
225.322 416.315 225.335 416.421 225.335 416.513 cv
225.335 420.725 li
cp
f
239.717 419.334 mo
239.717 419.373 li
239.717 419.898 239.979 420.2 240.701 420.2 cv
241.146 420.2 241.541 420.068 241.947 419.74 cv
241.947 418.56 li
241.566 418.468 241.135 418.415 240.807 418.415 cv
239.887 418.415 239.717 418.835 239.717 419.334 cv
cp
241.947 416.919 mo
241.947 416.146 241.555 415.765 240.74 415.765 cv
240.398 415.765 240.189 415.843 239.967 415.935 cv
239.717 416.04 li
239.639 416.079 239.494 416.105 239.375 416.105 cv
238.994 416.105 238.838 415.804 238.838 415.528 cv
238.838 414.833 239.848 414.558 240.871 414.558 cv
242.643 414.558 243.365 415.489 243.365 417.234 cv
243.365 419.898 li
243.365 420.227 243.496 420.278 243.693 420.318 cv
243.969 420.37 244.086 420.541 244.086 420.79 cv
244.086 421.158 243.811 421.342 243.313 421.342 cv
242.854 421.342 242.512 421.158 242.262 420.751 cv
241.777 421.171 241.199 421.381 240.479 421.381 cv
239.047 421.381 238.313 420.58 238.313 419.36 cv
238.313 419.32 li
238.313 418.009 239.127 417.339 240.766 417.339 cv
241.174 417.339 241.566 417.392 241.947 417.497 cv
241.947 416.919 li
cp
f
252.971 413.311 mo
252.971 412.943 253.219 412.654 253.68 412.654 cv
254.125 412.654 254.387 412.956 254.387 413.311 cv
254.387 414.938 li
255.555 414.938 li
255.924 414.938 256.225 415.213 256.225 415.581 cv
256.225 415.935 255.924 416.211 255.555 416.211 cv
254.387 416.211 li
254.387 418.507 li
254.387 419.662 254.492 420.082 255.279 420.082 cv
255.371 420.082 255.463 420.068 255.516 420.068 cv
256.08 420.068 256.395 420.213 256.395 420.659 cv
256.395 421.263 255.896 421.342 255.385 421.342 cv
253.455 421.342 252.971 420.396 252.971 418.599 cv
252.971 413.311 li
cp
f
266.146 421.381 mo
265.738 421.381 265.438 421.105 265.438 420.725 cv
265.438 415.253 li
265.438 414.898 265.738 414.597 266.146 414.597 cv
266.539 414.597 266.854 414.898 266.854 415.253 cv
266.854 420.725 li
266.854 421.105 266.539 421.381 266.146 421.381 cv
cp
266.146 413.455 mo
265.674 413.455 265.318 413.101 265.318 412.681 cv
265.318 412.248 265.674 411.906 266.146 411.906 cv
266.605 411.906 266.973 412.261 266.973 412.681 cv
266.959 413.113 266.605 413.455 266.146 413.455 cv
cp
f
280.238 419.006 mo
280.238 416.919 li
280.238 416.224 279.818 415.791 279.006 415.791 cv
278.191 415.791 277.771 416.224 277.771 416.919 cv
277.771 419.006 li
277.771 419.714 278.191 420.147 279.006 420.147 cv
279.818 420.147 280.238 419.714 280.238 419.006 cv
cp
276.355 419.006 mo
276.355 416.933 li
276.355 415.581 277.273 414.544 279.006 414.544 cv
280.738 414.544 281.656 415.581 281.656 416.933 cv
281.656 419.006 li
281.656 420.345 280.738 421.394 279.006 421.394 cv
277.273 421.394 276.355 420.345 276.355 419.006 cv
cp
f
292.482 420.725 mo
292.482 421.092 292.246 421.381 291.773 421.381 cv
291.301 421.381 291.064 421.092 291.064 420.725 cv
291.064 416.513 li
291.064 415.935 290.973 415.909 290.895 415.777 cv
290.789 415.62 290.738 415.541 290.738 415.384 cv
290.738 415.043 291.025 414.78 291.42 414.78 cv
291.67 414.78 291.879 414.925 292.037 415.161 cv
292.627 414.754 293.27 414.583 293.848 414.583 cv
295.369 414.583 296.131 415.594 296.131 417.103 cv
296.131 420.725 li
296.131 421.092 295.869 421.381 295.422 421.381 cv
294.963 421.381 294.713 421.092 294.713 420.725 cv
294.713 417.103 li
294.713 416.276 294.332 415.791 293.678 415.791 cv
293.283 415.791 292.877 415.935 292.443 416.197 cv
292.469 416.315 292.482 416.421 292.482 416.513 cv
292.482 420.725 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (kot) ()
%%Title: (1512.i120.001.S.m007.c10.book concept.eps)
%%CreationDate: 12/16/2015 6:41 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj]W9n+cqQp[d)4O<1d95k'1%D/l)56IS8Ph?PopJWsEadG=5CheW6bRMgIBK:$Pg8_DDPOu5%Y7\c)&j71PqU"+'^CX)H;
%l`Z;<P$9_9-&4/8O8gd`4fo_oh((4;X\->?21#S!<[I$SrDpV^l#,S[+(6u"4?SBL@I@E#YIFMT($]5h'$>I2k"/CM7mX3)#^\Q^
%Y7OMpTu+"E:^S\fmf^*qFrLEBML%E.!pZY+%sJA$P=QPi>Q/RYS_(Hd:=uVTR\(WDWjccKWfNlta=]_h)`\Z4/]5P40ff^>oc@m)
%QXIY]hLceKZ'*j[,G[u//8.SNIgZ4rI]6'N&HC<\r1BVkJ&C_Y:<sfZSV)P=[\5DY$RH7K2-rNgC&fF#6mPCo3,5hd@5"@XdPNau
%k181?r'MSo*t[G#C#CjA0ls4D?WGk>3(`j6heUW3)nDkD=H,AS(VNT4W:i1B(0:eP54$mrcDtQZ#NE#pk->JAhPs%f?nWrMe3iM!
%M*$%H(rp(J4R.J-[d&:*s$k:2`3gE[7QLAYTsgr5Oo9IQ4DqhZ6J$>"JZb`]EAT!).Yd.0a3(BM-?YiW'$Fd!;6Pt-EWF7khl30u
%RN$#PFJkt7>VC:^[;)G%[[)!e)f^s`UmET<S5<V*f8H)LE`G3kT1]NojI[Oa2NBHeNRMKA6a:>8]s)F@$D?P+@b;%hDQ&j%*V3@8
%n=peBiMls/\rQ6FL$u1&n%LHJ\rNDoN`U?DYNe0\)?a$0'sfGZZRl#c=bpZmLh9dU+=_M>`,T)$ET)t9].Thg/u%;`Hq-$N7l9,D
%U:u[iHlm?[!3ZTXAPqt?5_L7fKc&3rA4@/HP?l/%iju9[EVr'Yj9siW%J^XlZ>7Mq^*=+CL$usl&-j_EI,R0d6Dj5mX(&qT<?kH;
%:;#U'"=%:+.[)<V!7?lcHq0\L5a^a],+_Apac_JfhcWgr4_'#)c_t@@'Chft":G#n1uo8+Yq"=eN,s0%G8u&t1uqO+1_U<KN'-)]
%r^$gW*oK+-*^TR]BZMF4Zd*+H_M$)\^c$m!&Fi)N7+X.+RHtNF#uAWsER,IEiYcI3AQH;(2MNFT&-j'e3f4>DEQ1#NN'-)]U+oqD
%*gp88@=1QbA.XV+/JfXgM3#'\1gR&d:`?$O6p+BcVA*L$Lq[HKBCmq3Z^.$KLj7<%Jj2^gU5ASHorJ4<Sc*Qffg',;c2+"<LfG&6
%+&h93oWp;L>`@NMS-`UMj+(jT(^#UA;Xm/E`5k`#>KAki%AZROPDU_3&`a:^7E_cA<`E'6qSQ*H.TQJGC$\agao2^$rD#Q0*u$Y.
%#"h)4T5CplaX?t,*;8-,imo.LkBZDlo#^k<"nk%RA:IFg=Ce)cPPpb=m!&$Brfm2=gNi-QHtWE$IZ%S"'7&(9h_9[lJ5YLt^'Crc
%rF/U19CT(E>O]mgD]X:=,luE6iqu.$>B$:7\Ej8^2+.sI">r0''ssoKB%-Yj>W.3W7e;$U-sD<IE"(1tQr!+IMHW&@>sob$+L"M1
%b7STZ30'q_$=!`s%k:Tea;@`bZf46](K_$K>;V8V+4B+eH5JH2J5?71"ANqEQK":C:W4oT&3S>eCY)'^#%iBfRpEu`=Nh.p+0"1^
%&JDp)pQ;*][:Ab#XFt@^YuH*r0ltjUklju>5&tRe-KCVr771JA5H)ldjI6np;cHN4Uk0'_X_8p))Z8#cX&.HG_@BRY#I5=c)OMX,
%,0:K4334%EL-hL#H<eMK]C!48S/t:Ve-:Ds0TZb/)M<@iiN8AiBCRUNIYS9tU8a:'o"'roPmWeTRR!fEXF$i.<i!tmP2nb2^ECW^
%'4Ogihg0k,P$!QWI(,$H>0fVa9ZB.,%Q'Ok''-;0TJ7;d9eKqm0iV4s*DblDdR(m1)Q@9]gAlPu6>DKqTW](m@*W?6lFs8;a?(lD
%V#h+/@sIM2@1P&cfcVX.&[3He;0h8`Vs8R/rqY(49Wjt>s&dMo%K()Tad/[dTP]SHTuoD#B;u5Zd!-q;ZhCV(e^])]?t`jXG9IbE
%<f:c;%I?0C4Dt[jbl@mBklik^>a(BcgCK1Ab([kB-R$og296&f=:;cjMgqKda$?#cj#<Mg7qSE'[&Auc9^D0LY#H;FX9CtdQQOtT
%dP)']EN\LX@R(ZcX+R@ts"llF4`>pr,>!V#)/N)fKeG]$\lKGq&nAb!W-a0L:m9=*X3dUOX2=MM1dFWKOgRkG@545knD7OdZ%D7s
%m3AgU1J1ZD;$APj65@`/*XGS@%3>Cj`Z]L?Zt3W,-5L#A3FjU3_H^N9b"SPX(:]5W"lZ"A*7DV[2&I&X[Z$D2(&+D5+71,W:-?,+
%-h8Zh-DThh9MEB0MF#V4'%;+f&6"ff<l@Eq6!c_).+ji`6H_WNDK=/WhPJ`j^p@T]q_V<7@X';TJto$=p2&53d'j)*2cO7*Kh-2\
%lO%WepsdVb4Q^m"^qGV+JbY#JW>C-[!id!q>t%YQ(e+a,iR7K[M$DEZ1+==TfZ?YdWf@mWSTh:WHqP&7^rD_=g6PSI/Xdddlu/T?
%n59GY-2^>Od>Q5#L-6#oX"YE[fHS,HP%/!\#,HbpYEGI>I9W@!^j&49<(VXHA;i6rQ*:9N`#I.?G[kE'fUD$9WuuhI!>M*IKr-P.
%-G=M1^d592ce3HBPWBR&A8/_B$q]!*LB]OS%Om7WHUm1W&E/4crme?g,3''u%CKLBBRha/+U5.ggYn>7.Q?'BhDU@>"oB7_V2iGJ
%l(Y[P#!Rlfp6CAc.</uupWuTH3Y#n1a`KX,G1.EAN>8)`4^j:gSeLh<Md6rM*oq2p4Yi9XLiJFZJZD?CLPMRsog@sdn*j+c2MepB
%!HX=Kjl>qm2ooITGa\m/OD`)PWK39(#1Ik_B,F]f8h^E*@GD(abXBhEK)VX-j3b]9_^d_c(C)rdSjCf/EIRT:6G[m+=j=BJn.-qt
%:$*WbnUaOhB2Q0.2U1U*<T449)(SudTHFaeB*7/LdJ7%EHUZoNEERg=$oHUEpH3?9d'M8=LJ`SqXp6S_%5c(1LUPao;mp9GrrVP#
%@;n+K6VY"S9gG.$;/"qE'([GA$7H:O=/99gK7/<i;.s8:U,R+GZp]?'ko+7Kh?Q*cb`SRLfjp'$!8FVr3HL))$06PX;7p@Z8i]V4
%G6Gj^-irN<?3Tr&R.?o]#fes&Jn588a\(=uHMQKRq:p=>@pO%_.6-Z4'Xqqo^tO";"det7`A@SX=ATRm*U4f5'a&#6rs'o#ZR!k%
%Q<!G5U)/.g9_P4\Mp-#c-ee55ZEu$,:BfFH8$0?DnRdZh#27X5*G#9a\*%f)J`"f]bqbmLW5Q6e3JT+;lU$i?8\>_WXS:c%%ECOC
%WhYB#474\IN'-</PD'&D,L,/cY[q1:=iMsWgRb2:3)RNYih5=IEW5br0Blf*[uONp`]O"dcoOeTV)B=S%QW[oj5Dk(ckpPP!f_Co
%EAU\i9Fi*Q'3^"0!F,;(=1"RaF]UOVkioG)1&1B'e`T%^;,+RX,S<Ls>;.b<pJD_d_j$dE0;r$^Y@+D96l)1['7/GG5qu*jcluX8
%K/8:Wiu3r+.Y]Ip)8$&^!32]0(!Hh-W"#2HMH!sC*@HRifMi$"9\T'aW)@CbUuL?l"!"pUKEH0*lEl[mcnjQV@H%F,_.c1/Lq;#9
%iL;1dO[]F&X`2?p>e=u[fPStR%T?>?)TWCKaX%cd$4G)11graeQKL=`C`pORfa;ajYm1?h?]1k8(t3cNq+OWoMU!Xj6&-:i38i/*
%5s7JY$Z*n)7^6.90.+=J*Rt5ccU(\=S0IC[QB5=`#1e=$-=#gs&),$2<"t)oYs8?(_M>=YKSDfOTH$!%>ob6-fODerM(jI)R,u`_
%6s<u)=%ua?fsV9G:E^%u"q8;p3)fj?4u!r=gd,@<N5aF52W9JFL3aoKNWMm[&rR,g-19$(i0l?fnB_Q2j>-6^Zurro-5ciNknP:A
%"pO#5+3\:BUJ_.3<"W,oG@=](&/sfo4!=c<$8I.?Gh\OG#JMSp09NNf!r,jFbp:fe9$DZ:H&0`Ye2WsF1c*!/;,Af1T="[1_*V`'
%a?@sD0Y[e<AqBatYr$:ZcZA*m%3gB=%0@'B6lgr,k\A0OUB6^8I0OZsbhOfdA<Q=WI?:92]M2Jt[1Z;8"T?^32cQBUDN0#-4r5$J
%CF,2WpHoA.2`3?,,TpA@%MP#A69s*jJ;g5!='QSlO\76`@f-Vq!]%PX#%Pa8"',]G'q[$`oRg73?'GM["!A\>WKhGX.i)h>#pHDd
%K;p-1Ch*RXOocIM:0jS%hI@E+/9[g$^m#b6@@J/NB2qcJpubK0Bms!5AIsm5TUSp9"$pn&81On.K1G;aG7@%e+(,ZC@WC`S7LZ:$
%;M+I6G_c+O`:8oW9H.JE.5YH.-0e^S(Imb]!gEj+'XVdf:iY)AFq59Z,F+YLUqu(GAVK(OjuHH]PS8k3klG]C`IJ_!IPGii2(HUb
%)"C.j9iEo*Q&3SpfXL"sN?16\%TD48),%>fl<;D:&4u+^`BnhU9cs$p)N"6BZUB&>$6i?UImf\<].C8OW-?A^j,P4^7T>fPV!d?1
%2D);s`<[00j.B4LP\B`Be<oj;Sd!maEk%^Wa>7rsh@_9B`/DHf;5hc[U(T,IOWhj$0Z2X-92?JPk#G;.qW)'&=J139SsFc(#>2l@
%-,4,Z&RqKdLoO9o=`EdVR;/P9iU]-*"u&'5(`@^`.])7BL`[q;ZjNX9MD+O5XQ(^?b9uL==Rmu,-4h*28)31WT[L%\ZZXJ[#k9Ut
%8DXbIKB\*Ll\8<a%:#E502)J@6a#[n,ZREH6.Pb)$7LoV#f;ot+WbrpVU!7^TlU/'Ue_L7&Ce9o;Dg:%j+iY4g',s!Wk<FR-oqAa
%R*0'f)AV:uOZ;XT"SJX"7+G\F/GQ5.U_L(>E?Hm<U#8aI=Bq-Qa`=bUC'U)oENX?M7ssmYnHIAFL*N2q`\h@,fSBOL(e@$*$IQFi
%/,N)8.-BT!a:nboK.l)$m%o7pCdZ9X(Eff`49[eVFi#QZVQ$li:q9>a(bS#?jljq'2Zoi_2,\N:'d)d:*Ps2fBc$A>(`8`n#nhgQ
%"^VlkKC[_"?)MMt#bBtIe@$U_+pKLfG!-!rC",1;8fDa5V>D$QL%#\#T`e,]V]2#2AsjYY-RfT6&>L%,:^2BGX,?QN)Su,0$XO07
%g2(2Or"nq!BE9n3CTl3o#mG!)ZKaDJ+:Aur!D\Z1`-XZ]%>:DH%ME7q15IBR%)iAbO;ot58FBCrLj@K"\*PXOjA\sC@cP00ehX99
%25&l@e@Gsh(<20WU5>Ml[R!&Q83Y8u6=3I\"$#`r?_1kYN2$bifdE461Os@A(itpE;8mYrmr@_IMcn`#pN`KiZc-!]WRhM?_P>p-
%)U)t__AS@u]tgu`Clj@U:;R2@c4W\KV9"6#Nsj-p>6GtqJlmOJ?R0oO/f#!I)"VQ=8\dMQ'uc(@):7B$CS\>SrDhnge&Sp(<9]"o
%@H(F;lr#3f697p1)D"/FEKlP1.+nmDNs(15L+g4#kWF1OmUo-!_F]`p:@9%W4VZ45g;c:?=,/h'3@jH?)GO9'6G4.-kWp=kiVH.=
%8s"'cfuk6^1-P?EKHeB&L@Zf!P(j2@V"?/^=dQ*!0(Hm*9(`8tXq_dHbe$F1G04cKgma;(U"m'Nc(,O"f7\UXd0=Y%C3<]kh19;l
%TsX5QbH_I@qjJat1G?cBP2_*ImbM=["2##*+o4?aoE[1j*J\-6\/Di"=bM`IPH0WVhkjb;WD"cZnMr"I+J!*LQ=0FkA84f<DLCak
%Dp?4_Xm+Vk%#!j(;s=,o-mLoc8uXe;*uNrn`oKFKTrNsOa)%\P021ARbU\c]"3"cU@4DabZ2>??la<=sE-\(2"3_&7SD.h,HBb1J
%=V_]!5tZ[3>ugEnp1uqi\\l\]7-jMMAtPgX3!_KQ>Be(+Xjg"2b+TUu1;TO0=aJaiJN4>N"3%H%PLj`$i.Yt^p^B*[o@IgmpVjH!
%.()glF6.&Us/FS)Meg8%H_!pD8ou\.>X;o<;'5gpjSrZ/i<r/DSS%=4M2lFtk'b>#Es14dSF`dC0(kr%&>iRP]]t1lo`Q!&_?DLU
%9^G:jgp_BF10HZI-b@r]nB4uW>9"HY<LqS7Qpc!h/c-ngI10E08le3c`Y9F#=4hXhF],Za0(IM4F-='*93NG3aVGjqNV;(@CgX"K
%j?UZ`1S7X:IAM'ffC3XHfiHis1leRjk+p>OYAJ^K-aZ>mXL$,-DW$[B0np\KAbfjeP9)7"<o7TpaK\BpXOAiH@/cnO`M[B4I>P't
%839LB)Z8\`S4rLX7I+206$accr/M.u@QU=:EU*'O.5QCoUn+<KU%]P8T@=8DhC!sLHI9#.gJ3R,e$_?Yn4G#Aa-S3SRi\9f"cmhr
%U;E?7>;9\CMB[$fUIiY.\AQbS)ip\M&oCA64Bg[>AOYD)lLC]P[ZF+(JXiYG,+Vp0O]8--IH#2#ZGW]^L'"g8Llq%3&tiY'Kk-5r
%(BPRbCfda;RLsEM4.LO`U-2K`,99@p4c[#oK^J*$AQ2pMVlE$\6l/WS41$i$gRE2D(TS[75A>UYgcMlTL`01NCX=-[2iZ7`?$1l<
%0AW:QP\=2Wi1#IRU8?9+5SSF\`a?7f>8?7=#'Jt,r%lHVMgaX2+Nd]V]_15V5`mRX!m;FWeu\Ng\]7h(;Q3g<qsF/[^X^-s,4TP4
%Ft_]<Vc@Z+o;ftD\one\qX$N"4ba)!H-q3F[3jc"pW*;?Y\VP+6+mdFG<2jTHae:OqW!(K?F=noj^(HB?E7$%40%H::VXc-#J&rW
%\u'lY:&_(1n?Q$e1)1!L/V(`];o@o]G/:EY"Z7`Bi,9:e-H!**W&nlM+4f-V-4h!C_bQG+=.q2DK[2IPbYl.lS[CM<Uk4Z=U+ptU
%/mCn\1K@u(i(UqaV8IM%fg_"P<GHuDlE)tQ0>?ScAi9<0m'O+GE_m:9@4+P]rZN`"TeOR@ep6FLSRpP9ef"5b$W6**]lb8t0%[f>
%2'HX(-F0CA[gdaTKa9&<@3U;F.8s/Rmiki38'PfCT*n2t=[<Z/I[U=&Q2tbN$Y;gm)Q0]`XkOu0<)/?&HQp9so\Isji)*sP=]OsV
%L.Y2Z-Rp@#b*[E>bp>`;C=O.*121]pW;nY-@2\1]M`T,]-51L!hn@)O[p&HS/o46X/-&7o/"ht*BdIMeW?brZW@,>RNtM$Ai#kMg
%V:;R$o%G#65`H@H'eZHJeGE[f?9@V/m>G00f.s!jp/]gN?(+%g::m`%Wj'NF1,jsE9EqOa,@us0<G8mQ\`gNI35uhiE@_NY+m]p[
%$(q*3@@T/$"Z/Y8:#79b\`q5$W\s9Q`_;(fiZ.n7p*plhEp^4IG&#EXM$K=BXOaHSTh#&b04JgeRMLf)-?h'T2L?:(#')<&opC0/
%305Uba=pE*]p.?n[C(jOV5gbX8$@,g>.o^3GHAjBEuXW7mITn,<]-W?`EEG+g'Bc)-=#9K/cXA"2rWa7aL"l-mIqfD$<@2TlZC!0
%SB=:&?L:-T_U*>h]?OZ&&`7n!cuF\rbGq9f4ij`I6)Dit1t)-&hWJ!jeuHEA0keh9_6AFiNjh'ubZmQDo8?oZD?St+fP+1_,+T#s
%RC=tM1cc0p"+r&hBlWD)Sp9r%7<kP%B!57[^_J%fMjZ-mpEKbN5A$C=ELJ;^n5oO!&tQ@@'79]'Bchr#8i0Z`XOKXH`0F,r9Cn$$
%R?c7*)[2er>9>iNU8%hcdpc(AbZV:0fWXqamnjjq-mMNGVe57n<s.o)12C14_t1jQn<Uq_(3;IJ-8X50])?r@=]uq[1cFB-<j/6C
%o"5n^:GNh$bu[PeL-)6_*&lSL'/3li9=lm_3Ji_r46hJ1P%<Js6(JcY8$.6<'()p52bOrulCk2<(VeL6\%39qAJd&7M$ig'-PN^j
%N6ZI5Mbn<RQs#)_ZPgn'Mbn:'b0>N44R7[YbL^+.C>G?mb[j>0b\8Vp_/:f5\OA'YLufDWg`i%g`,[drQ8<DV/=23]\V]Djasfa9
%U\`A,=De"^,F5I_Zl9SDA7OV2a#e*hTcj9b:+rpl%Wm'J@e@?'&!=up1s>+3ip3u.+#d-CZ.HW%p:K-afIW!EDRTN+%-gm<@KW[;
%*C3c5R)%uoZT^K`hKlTTcFQmAMU=,u@sstoS'+Z88+.%6o2Y!gAq+-GO'>NRb`@(9g`XY,QHj'ok0`R?cGE1q<!flcPX8`EKR^oE
%hYse;+#e*:Tfndk3aDrL"0VOoYZ(D!h.fF(/8Pb3R2U_2q=@h8DD/X<In>b_%62r&!D\hioQLM5r&r$O;9d,#XG=T'-8'aa%/d_b
%N.Y05fdg].$Ea:k162-+/T\[8/tJSLjolMN"#K6\r3q*Eq,ugH2%,LS>.>R8lc>WJ8CLJ=/3JkaJ>@EDB%ilie?eY;cSc;:VNAtM
%c61^m\2->gL7MN:U(R((X=;KGXS<adbGUSOlHr0:MokK2$%LOgf'?jmk@IH0o;H^OTd8gLgW;Y+DJ"Cr<[nlsI"%>&V(QreN8nO(
%]6sT6GAR&V<kZk:U;&LcK$F9aVG'TAo3'iW4P]:O9PQc/D;Cbe>3ff=C'&BY*EoSq_^p_iEu:D&Pc\O8GaOsXfe!)A%7<<ZYIE%r
%?f1sW),0`4L*6p\2Y1PI-5`rDF:6[$o!0rUs,o$`"89WE\e/i2LNeLGQMDEU^\E8GBb'Vmh?A6.DiE#<=gL<CPq4!:SDN(o@<;#!
%mXEI99\eHRRO*9JRu&Kp1\3BlbkV8Cj7]t'UF#6n#uePk+cB7CrW\N)0m0(":ojDs<Z.9mq:-<8_buGC&N6+Ur@"\pPAmh/bR>5S
%(4V)WQ>*MJhf+],cSiaG[p9Lp&O(p5H.\_3.AmbEFW&bLk9A>OEoLGDkc:0K3gjFQR`-KdLbil[B7>l`OAhX@3U.D&o/KG`kMsh&
%c`]):ZYeSTou4"nN\'p.cK0<n))<<*1[6bMo;bC[XGsZpN;KHsC@un]X^LfNH5#=NIlZO+SS,5L*,f#^A?ZOV;fUhNLkCQ.%H($?
%a_%TA61r)eV;LKDZ!a3`9L><d>@n'sXCaIqLga#9ND;mH;MG[]<bqIYcn*udUX&AQI+E!hZIh3)S!oLOL]CX^ikO(:GR3VbL-IF%
%(2st6@4.gC_(_e+;SCY?_@/BL<5NtCGq7'$&/+8-,E&d/CLj`eX1sRE)fRLcR^:Y'1(s[ljX0@_ahl97Ub<KF;._7ARn9quIB;>i
%LB_?N[VW2bL%@29HVl7OBeN'oB'*[iRIe*?)-k?Ffo)"bWFgW5b)McN.lV/q8eu"SHVkQ*;>uR.B!E.``aYJF)c1G7?Be,!ETZG_
%S$WtX$T%D6;:#,GPY?K[l_EL;mR=,1UqJ0ZR$j:<s!q/bk&F0kVS9]teX0rUcM-:CR<Eg,H=Hj`VjO*:poRLhPCa`rI\F5t;PZ*W
%:4@2;BHH??//c4A8O$-<YjB@mI/05/bUi,7FmPR)Y\P+EYcqmN]=+qZF(*Zm*Io]r[@?9\7G+RIX1#6Is)"gFE7SokZaR)Q$`iun
%[VGAjd)d!Q[qAD\)+<siQXo8o!H9cPY!7m3`A#FWK#KEI%&9'4QqGZJY^qiiI@+^ZT7f9XDsT^[N2M<^?W$cp*r\-e_EEsdVTYO/
%d2IAu_RpoG;JT=.ZW_GJK/Z``]%U$6.qUh06c,B0CH(H^RRq[BE@B'[c=Z!2)E!Ec/l&72&m%$],a<0ccU+&Dda+M<17_:,;`?Q[
%Vjd+XjP[EPhr/Vi0'%K-D'@Ad5d#1fbH/6D2sZl\s$EA?Sc-*e*]-&>S+s=po3^:m59EN41Ohpj=@4sLX%4*ubcKR^8up?WFWkk_
%muOeRs3R?3dh);+]=G9M)3TE7j)R_3B->XP&dTA"(q6B,ik_"Vl^WN]EEei/4Qs,r6^C=)Ef+qZ2*KufT+f+;X`r0KH<I-?\XFJ@
%2lY$O*;Q'6?b?u7j?,%_>dJA3Ai%fn:;=dEmpc6>2V3GVE:Deel1/<^GHq.Z=T;[.s";lP8+k5<rV&cG$"J;<,H_#^b%=+=Ej=ag
%URA5%c^-36Hl$S4M`'C-]/^b!SD)Y!^Dm!N-HqRr/35[g@TpqJ,HB@"InjU\?9>pc!Q&"D&)b[IiF%59H)Xpu_bnF;lr2P8o,9BO
%np]a1gtJiGV9rr2p<EG-bD5g$RZoRK[)e?JBoPQ9Clon<20!Ph\Ta/_S(0@Kio.S/1ta'Ip.OD0c1=[E2)i?EN&G,4Wh$UW^XlZ^
%W41H:Wgg+cfGqN+]uZg?j2dc"g!$B)^G=r@,i#AeF!h&ciSV%4^GkRhK..0V0W1G<.FomZ;+=VsWd@[%/C5edT4]e,*fSK@cDW:W
%%l9c(kdI5npq30TG3?[-C)uKMoN)u@M+icYi?D310Z1OIW4bZtH+:p>nZk]u/.sUo`60@pZ:MVZ&hf0]bJ]eUdk!'?_Qtq\Ip"%'
%AiKit,[RX;GaY.EEHCjLbY/*&L^-%`SO'i$\('9E@j\@DA6G^eVJ2I\qlko.#6ZRfS!XX+B)Srj/3M/Q@2%<QU<W\=G[h8Qpl1@*
%R$+Z03s]V3oBhIXEJ=qV@WItJ-Y:jVa.%#\dl!n``<83u'?]+SNJeI;DUo+ffBCi*kt?r`Q_pUVs-[qcN\81`ld*O;C2Va2q&)qu
%>25B-1G6N!hp.hP6'9\+:F[ZdBrP,K*lcG,.3AJWp#.XseuNq:er=u8)EL_QUIh&d0u$LHrYK'pTBY1$)%=_mceR$*AM577)],3I
%L9`X=6iX5f1[WrVGgi,M<':UF(K%VX:bgtZVXOOeo_aW.pmhaNCT<dg"ge!n;fq!)0p0G3s(db;R#+AL>3%F#.&NF04GInZnebMS
%=QD2K2U\/*0u(e>/FjXaeh`4H`ZgHu-[C[N:9<4Y1[V]`l0HQ+SZpNMlRuGL/Gm[p\V]m5X.K_lQ!_1nB0&+do,5i*3=WStd##L0
%ULkfF*&)n-/`*e'!n6Kpp-CFJB=a@37\1Aoc.5aqeuOa&n"qiCLj*+)BAtLs4gcGu+f@:YV^uCfk,+XH`BckZ'Qr[G%:ug6Mo0g0
%EAdoSo.82L);dSU5FX$aK6>aZ26rT66CT#D)'4+RCM!%j>LVVAEE5u'EK`F6BmRmnlPpl9]+R?KrQ],l%eJ[B-Nt<aT8_`?qR<Y>
%$5;PI<I;EK]G?@P/3/ZY[,EMK1Q)]L;Ree%8aKsp4;iA+q)iNjb+aPF^?$jQ$TEFM=)X7+2K-bF8m]'=WV?n6Eu(0gcJ)$'ic05!
%]NmUW=Dhdn?GpmaqP[ObF,O^L&^:c*Z\[cCrFdg9_mtTcAqPf,*R3EUm9rUN_pJg4)U;pPC_=rE_RW)p[g;.$fN<fJMfA+HKQH9M
%$Kj0!ZO#`+/Y%1:C/rSA@2@lbo<I)>H39nPCeWXNGj_FlZlh`OZT+%TqR9^?]RbN,*Wn@qk=R;Na'>,b0o+pa9TclTA%[98!?'?X
%7b>JQB$Vp`33@t$bKV"/[G#&cf))_7.CIptrMXAN;KKKbl!;<LZ-UZSb/hoA%&3e;D_=Q-c^b`U893#@J6@+%;m^:F3c`]a=gi1]
%T9ko'oFLqK9u#5SkBU]s&dD!&9B#l_aE3nuSNds=m4'V11H8KE>5Vr\_U_R1biHd?Yc#H?LAa6jIci8`6s828UFu]$J&Fh=kO$R>
%]Ti@$_DhCc'.^t'6W"kQAP<V-\5P2GH3SF'r`s=31G*ObR+(&MVOf6,an*."VdbX5KQ=L)g""tO#T81KTA&JVS%IqacGDB)C!Y^@
%%i_)Zmi]dSI"Lt<?gUlMaqQ*1(Ra5164eL'+E4j3_C8YJ7DI5!>51M#S<+sZL?I8>>&7$,n_F)NgkLLrZq,B?7RuW^*0/elLbp^V
%b2A4`Na(+2nR0R!&*&]68b&J"2@irfP05<",h_d\ZTfspSQbKV&S68^_-G6F2f04K^",7NCL]`Q`T0"r#&Q(TcA%N<l]Yfo*bKh@
%]Ok-KQlp$k6<VNlo051Z@g75KYeaIbH@CqBR%OBQX]3N@7bkd8Hu@M6`Gb;JZ\rJ0c.e@K'+aQ"A"RV`%jl%E:gJeX1ZlQ/X#Yn6
%)tbe;9]hYTAf4nVE?7U#bYMD(:qD"mQF&Z\&p-4]o;fmbCn$9NjW31,,<gSV*HBOJ6Z[`H```S=I-(s]=M"m;AGj.mdo=uQs-N//
%S`]..j$P/BVL.H5XlRK=Z+Gbj3V+QuQP*-TNc3um_"56ri-Kf-o;\["H0k'+qU9ITA[n4KhF>oJ44H46@)"j_3^Kl(`VdcXol)QH
%c-j4FOe(!B)&=i\iR_5]O"'EE>Eb`;X;oN^)7`=2QFCp-m\[&<c9fdQX_-kC2eIcCD@W?O#B+lOmY&jQ=dCEabb36gHXHarlS7.S
%k?Rf09^ASA8M<s`UO%^(]Qs2H,/X.YI9gZor&n78IhN";HjJ/`\#Uu+V.MT6(_XYY"J*2=2%Q>q3b)i__[Fk;XXRWQj*r`95@)9?
%f=XlI#`l"RJtbAC[f1*k0@Z<L%mXe6j6[NLoE+5(ANHhKg@Zj`;KD[0-MH?T^UG@Q%cK!X3h!'P3V]<eL1]H^`RT&H^=]<Xg*V2E
%<Sc6S?PLt/[+njrlOeJihYt;tHgpDQ_#DQW9($um_^?a3r<"Yn@cp&+<M5HI0;F&]a%[!up<cq.O1&ca52);4?OZi50DKG$"[dk0
%-G89c[f-U1MILA:O^T[G12WtI@6*hr2-`R)"Dbc2;<h1Y"fYEJCWA_CO*\KqnSrMo%DnGr*'shb?AER1+=H70mGB>NoS#O/G>Nil
%+X&4NoQj\EL.Zri"&m?)/1+E`:Q?Y:_fYG48)psVa/]-24LPKfj'(Ag(0d&Q!s4$_fE4!73a!7!<&XZBR]-909k,D#O.R*d3M%#c
%X_N;^/*!`*d`Ic\n']>K]k7$"He@S#:7QV2))"YlARfJdl(<#MW[>ZZ=eo#8<A(&'V[*k\!d/W4(d+oXnHj6"2i%MfkfcoRHU6Ft
%?rTVqPtLSmKlX#BZZM@)'K++jA/Z=gH@"k6E.+LcnNFKe5ht$hGiZ3Zn+KqE))-QT<CJjX+Za<sLVc$pY,VH@\2g"jYNarAk@P1b
%mb+3gT\jfuah.4LjlVqM_c1[BLJ_0gK&]O#lm3R5BD0UUBA"?`912;]n=;a]CK[$o\4`7rpb=!E:$-*JL2#68N:6q(VU0'``Qr8!
%#>R]J3pZ0WC?Le%Q:/r9TpbEma=snV/Nm`m2B3!if4KVp7aqgHi*$![@bcH,bag4ZO(?[!#s1:L$hYpJ*k0k,V7P+l&(,(5QVDIF
%VqsHDl\A?L?gij]N.[s(bu9<R6ZY6YhQE=U42'*DfW"#s2#3Z-47>SBPU7Suih5!\:#-eMWod%i)CFId1e^;4BM^;:d:6.<^@K2(
%pTT!Dqg6DcGe9uE46T)gW:N0p*CkVPEi!NQ(S94C[GHrf<?Uon.0eXE^RYbt?n7s`e7&%BE`2*AG6F*-4R-86%`<0;lI>g1e7@u$
%lF-!VhM@c@!rMq&]AK)W6oAG&LP[O:c1?C/*p!l8m=&9,Z9^:L>GBeo=KNpG0GuabmcC+s]'WO:&21-:KX'#AKbII'fCHeDi#q6k
%:,4B5h43*c[:1b`_.nfY0m7T(buWr3"]@ALZsnd0i7:.k@4q\qM^[=8N:#c]@2jNq>ANlsTd3T3;R[]bMeIkd4Gs3.X]5E#n'$DU
%;L3I:hLL7jJZBNch918'g6aB\hkU#RQBg6.XFhXaHEA(H]"Ll)17>e0*9Qm0FqiK!L-<m(BKk_J(;"[6oZS-3Q<TWYNlms1Q8+CS
%`l"[-`DitPP*`ZL>^F"J^Kq^[q`=#8)2"t7fX)n^_e-*<"0$t0N:Q2Kcq[EVGgT9H5`s_OZ`RutVbT>_%tL<r"L@nGm6K!iTIhbo
%eJi/?$fkBbN:$DOaJu-f;o^T>('^f34mKC/Fl+5%74ur\_6inV=p$(()'YmR[]bopV-[qi2Ic+60<hD<cjr_'#qT%ZSSD+EThi5l
%(Th$?\emVBTYofY^0;SRN$AZ;T%4PsD#J/81k/]p2*r"r(m?E/\'H"[q,?XCf%F2t\U.dD)2mAX4."bHI!#QPl0A0%#S`X?5Y*H6
%H7>(aXoX9*4X)UOe&A8_]"NF(b3G^mO2TB^>q_pn4N[Q3!k2HPJEGIQfr8Xd-e?EqI0o&7/oA'Z*:G@C!toNR$n0^Ifn"Z%a3BX<
%NC-@XTW0dXXk&#J1LGn<T+SK_'(_6"gK1.n,RPM[]c&o-NQ[tr@*bj`diZ,0#>@^%N.PL6jp4a.V1aJ!)ip6sg(fm0-]V!&D@g`b
%k6[-FhCF]7/6&B^mCYGonfG`FEH0-RW[mB\bgoq!*b@VG]?E*;3@k_'h&jNcf/rdt1(B41WO/,@m6,R-Y2TO\j8":u3.;T_Vj_OH
%C+pBVC"#*Uo*hLRMcT$0,T7PW7_?\f(i%XkH2_Ofj@E`;6WM.#d7lZAD%dMr:Z/TaC"Fk"XtWZ\WRC->WQThAK8;j;6-!pN*EE^*
%)8s?'Y@<#o.>U<!U:Sba,?jZRpi-X7BZsjW"60_nd.gqLQOKS#2VN0r0%bDjdfsX9(%^i=Ue7Q8SqPPslWS(q[3jjTUtm:0gI5K?
%2!f=flG0e(+AFR.Y^8-4PE=mO-A12#;3CrATd0`G9Za5QFOog?X7ZeMO!1nmB<>SQGS%(55E3^Z5,u*'^hsc\NH@@qi,bW^H<$ke
%o?HJ]7&U$!/G-$[GO8/P+[h!_V`CHZ\r-070nZ7g*$F5s^8"GFQ*_)Ql<tg^"SraVN3$ptboUHns(^`G+\.\*(dRBqH1S$r#5*A.
%j$*m5:QJDh2l^d06l%4I5_TO5l;fV^V0Fh.j@<Xeg6J]i%UjI_l@-UKp>\^(GuUp=)cC-Y>g*3P-[6c)C8[P0`ZVXpI^='[Z7mOF
%?H*=.RPM_hS'<plF9UC:R%_ri]r:&\iD(Q*>OjAr[B)5;YE"O^)W8l^52RbI&s+fUW\q!./ZOXrm$5SO/)@?2Zdl[D6b?2I6g&Uh
%D)*:,=OGdrDT5gQglL]V&ihE0,)?).Os3#er>!inU<ZmUA#dY.(oBfDhJR5/'3<L8b_=:kcX@<D7*5@_;IrP55j2"?.'G\%\4j<,
%k"5kKf5HT_bL5+Pe"dXHQJcjOr`;^!@B("4<aOKTaB9UbdDnq>cSI;2WD(MImQSs8*Mr=TauHcg`%'J48tFqF%.*h+Q8C(e/@[`k
%]0D[=)T\%NVdpSP@S`-qX#$Ma)"M4jV")G1LEU5n%^0kK4K=omDRP]r?EVkTU`7(r-<#M4Pg)dOd<]*ZQERa-<!%._6L=<EVE_WR
%$#&/<=rS[1k#E`=nN,TQFh/0je<tiEH*XYuFgQ^EJnLL@Zt8$.SaM*90AFH;JmSG\>HdeConPa2<>dq>6O1TgjJW=7$:qnRSO`Mg
%2dXS;\m>JY75"-<aU/Z@4(5`a$'PXf*-i]aCW6oN\?Ya?^h&JTY#H9i)o*#4':lk?7=PXXI=)'],o:a!*))tbSghm7Z,+]Ph;"V=
%;)?f5^LLo1boHH>"6L<e5/lbM(O#>C=)FMF"AfNd"f-P6<L51ipF[t_Wq])bT50(jk??+MbS5;UaC(:)LG6)N9i`ko.FMr@)NH=]
%!rof;$S/5F\Jc?=0NScf\KA?2"as@R<S6kL[pQ[2Jp3\Qb'PG"Z'KZ^TLXF'\oj;M<9r]CbtG\a,sOkOKiUI`PtnGE.<Uj>_SZ]M
%?(sh?%"cS^6]ZkRIuY+OAhj^6Y&lGqnWcZIJU.;sEqei]JNuBde/C*]=,B6p4%lSN@TqiJD70LOMlmJqY-I7J3Wp+l4E!)]Q&AD<
%&J[SrfETo8&*aKh_Nq3Aos!+2?sYZn_1NLOXpCXi7H(OUJ:a\bh62t^T#[%VqQ/8,2ZR+)k>D6nCdS17p)snniGP.9KVn6<o:sgh
%oN4\8ae8IlGTbm&hQ!j[4-ip8ZNpPX*%&\cMgj]n):n(>;'rR--[>thCh!a@[,cOeDUT44%Y`rmDQ^6bUC"r<O;qt-C!Oft;EW^\
%8jWO#$T@+m<p*AL-Ejk!r%>5r0.&988VRh3B6]Cr?7M)skj!?DBEDUA;u-#>$.M8qo1!&d0h1;(jDge#UKq,BnkNEH-ZGA2"J^aF
%3QCQ#gB)GUKZ:e=K'Ou9O?2R)iP8H2e9Dh$L)OoWZ5UlEMs]+oNSQ'$gtGm_p7nfM<3jj(Bh@h8.DgOK@j\)c_A^iW,La"VVO''^
%Y$RsR3XpGtn42!mrfiKW-fJf0#=cWCVcc'(BEl^h@lX1"ZN>ToTV9K#Mkd`iNR@b4HY]dU8kD>OF6WAoU+g:o`gE_XXfu<`jk&.+
%G>2EoZXk$$TqR2aU]iSejnq*r*9a]ENCFt;4TK[[c7frI,3\][r7tZ!/4/9!V45\qN$nMs5-/S6H$"NlI(QtfhqMKgCj1%@(E;P^
%>C42ge`H[W/^/G->-FN`X?.BUYBCsO2kFiM5Mgn(h<A#-TVO_pQ;kc3UF=sXfAcV+Ed)m%F8k.lenVh/h0l0&6SmJdj]`aV[FZq!
%5CH\khD1fM^\6l2V3oTd59FX@>^Zhdg;RH6_g]AL.t7Fr0]'"8HAtt9lg5bd/lj#tGPXVQ\GN/m[=8,b1fHM8p.e-/G1Uo`m+3mT
%I.WHtr9NmTb'4kt[^RlA:YQiEHt0"_]$q7VGH,<&%*:$p!lMNmp?@QBW,L;FDO_FoHN&Ws?;4#PbIq@R/UuO3H?0#pWsFOLqOc(u
%\)?#SDoLPtm]F?poC]81[!&@hLj0k>qp:<!Fa9f]WgGH+r<qXrF3@e9n#[:1XF==*p@#a'r2BYbna!kM(Rp[^G_t<m/#BTC"`%:A
%ejI&J]DH07p3EiFW%U<E^XcQ`f_<NYpV%dQ&%4Fk/p(dHg3ij5gM9jX2c^t_hd!W0+!9$LHbFd'H_&<^\oP?T``6&sHem9r3W"89
%^X8>37a59NTp+$iO-\BuUI*d#BJ:LaQ'\rXh5rbW8uo+OLBA675?N+NgOAJ[b1>nDLCNYCc6oXdEH;FgH>GaWKAH+7H=OX)U8T+L
%/g"22>X;^ubDQ/\cL^%A\90I7[IV%abuf5L1Y"f?d#<!kHe4o4/!#<7rb^sqko%D5=%cn&D;%'g(GtohZL[d1BiQZI3IestHLkfc
%Zhj@6BBma/@]44[@#AOrX0<D(n0oMH?%-mO=HPm'o2_Q06K/4<n;1Se\%YnUj5S[Uin=17Dl#/#J%&gV^3[?_[!;/o42.Zc]S!h]
%kMEJ@UC)8>Vg!?X;"]8$m?]4!=@u84;qh*D19&Ntk;uI.VnHj\c]1Ut&h2<L5$3)XBCcSu-*.uQ.@mCfY7&A)]jSJ$\Th\%4FcsU
%HH@mW*=I2_iTa%/jaJ88At!jFoKlNYF0R3.Aom'2IlSq.eUk)>DSY"e;I^G)[SC&]S&`4shXOpU5:k'1hNUD]HN.jF(;c*ZVL?Y>
%]KoEf&)AX9^=Rhl?W`*P9;fq`_d_-[X=DW6UWo/=-BVCMjW3f#:F2Rd>5JrjOF<EJmXDQ2D?X.G3_/'Gcb05&L$+#:[c]((ZdW[I
%<u^VLP)ea]SO2.YoHpQmlBNI)00DD3o4WX[BEm[Vp5;#!9+eQ(EXRkdY+0@ABarNQLf].GX1b(tm8MVBfed"DaCKA$gH+qAh3pd0
%F7$krp>F6adtFpLB]ED$`q83l<3k[;O7qH!M,qqeJka_Ql;IH::@G"4n;b6L("[5^Q311(g&7h7GPo*r^A[nQ2[i=(bI>jBer!B%
%(e^Z1>&Ct"JpZ(g>Nkjr>H1qW]-gdTJPm#HRD/FSIMlt`U\inV^&:dIHPo!N;g@3(%kf!d]k?eoRa@"(d07D/p9B$ah_0I@<`;r<
%_gB?Yn,DM"P].HB-P(*#&0kS5Rh6&\o5roj:]Wto9[,[tnV8g#m^,Tea-B.;aHpgQLqgX8o(\?DdoGjMFh?niC+lX/gatoS/j=XU
%F=l,pR1JL2EHD,`amb@`D_DjjHV,@VlU*F(D<FLXTs=PW;JbrQo9Jl_\P[sfC-d-B<^$.nn(f3)^:eq'Y]*g$WTSM4MH#D,L:lTR
%j`=dnr!M=&\-Gu('Gi>4N4ggP"2K8(#iE?3)%%Qd1MXNI'8Tb27FY#+3*:r(IU$@NZ<H>M0Ue(aW.d)r`"8hG-2r9g3+=RJ)t?AA
%@.?N3EMA4m/T6bnW#;UUq83lFpg.lg$a<r#J[Z/]/5:lsH!:Ppl_Pj0-IVY_?\hlLHO2X1hR]G2YL+3i4i+Xb4%$Wf,NK$(Er6H/
%Kr@l^@<fmiVDP)4fQ;uV`_G6^Bl:4u$h;$H$,617q'S'V:-Brg`qrtORBK"cL,G<d)(R?eEtX4hLr;.pO-D.DLr=EtL_Y4=VlUGJ
%0WlWpNa.kerpVnt.b4j,ZG)/A_O=&?/JB4,af#>NN#FHVoN2OBJZPlA)sTmZ\;%N".1JlIm:3$?^`P3DpO6"rNQ6,?Vj*<CRgi/m
%"`"!e[4f6+9?7D!'h7r(<r421o<13I#[OXu*M/fd",HJNHXQjBNaG"d#2?/($-hffm@8^5@P1lJa3oIJZk],'NZW.W.L3F`9!@,9
%'m&-`?-1-K4GCU*9#cKq-uNEf%EusF;XgQp&C<Ni=SKWZI.1Q\\7KTm0*e(tH$>=DKJZ=P'L"c<:2<Y195CS@7e,/qDhd%@i?[t(
%Rn'ZpUY]m`Zr14;:1(+.g[7sD`#OOCP44F<Yl!DSS%%i&%`l!8?<8?t)[KBi4%o/pGp)fmjjg&;J)!+:mWBS")-)6#55hkS4aZc5
%I:uC1X/4"1mXE[E5%3+o^f::f+,:X-X$_fGisKfe6th.Zg%MIBdBhicbO3c(mGJ([B'Gf2S8hiHrSd$TBl'^Nc,e:1U8Z-Q$cLqK
%qa'c<RhNR1eQUimCFl$/lhaK^Yrr"pgP=;p;R_t%:#*WLWddX@6A=R0h5nE0H5J">*Z*/S*^!j_][S$Q!=*NB^43EYc<mb<I^Hrg
%.kRc#W,`3uT+@)u)3'X2%gPn0$_UMu%V?U$9_Z)X8sG9m3UT%BlCNreK;Wi#4Hf1V*?.PF\sLf#+'>PG"CFnF]>^=bp)-9c,u)d1
%N9>id^:a-sj$4$j26A,Brpm@>p1e//M,&\tp7PSu6]o5gF`lA]R1]>/FmjA+pp,OuT,uhq9$R>OD96WS63Xeun#h.Zlq2Q,nFBs+
%\9Z\N_%QkJG>$f9(ItZ]ie+8@OQ_)XSml(#:Ci]\ZdX(18Im-q[.fp>2u^e:>8o)RG>:ndIXT@+2s-_I/t]=tj*u$6%,MH;b'YgH
%C6*6Y(ZL+!Z;GJg'i7p'"Ub0UOr(s-E('$,\nRVaGjAfM\+;7ST"GQJM&)-=mEK;4DF95*E@Y>j^3?q_r<duEW2"4E]&cgS:a\A/
%mV<CahAKTaS+bp;gS^Wd?\4,gAj1uHa)SS1dT0/Q2dbCe91_"cXP_kslQ:NINaIM/TS8B:&q&KcJXiWRZ)o'@F^RD8*jj54l&?UV
%*fFGXf9UCnl_u/jeK\5E/FQp8e;0,3%V(>.*6.0?d(t?eqIWP\heOa'hgKf1>\/Y+J5gGi)TIL%aT[M8qrY/kf.Z7sX)$H/0>:c4
%F4RU=4)"IQRg:LRf)F7#("_>\D@;T`O4GtYcX0ME>u'3NnI[^XD]Y<+o4s'"raVJL;XVU6UTiY-hh/EL];:dJesS@K-/++]A_k&k
%c.Uruo<#HHp@S!)HfJrc=2jMb$h<%ObX:DA^:!g_H:jGqo/T<@Q6Dde<M0l[D\f,AI[PQllV?-CK.sG&m.gDDUj`,_]mL5Ehik[K
%';bN(G]m?1"EA.`ot9a]gYR]`je2T\^l.4*bk%Z(YcdD2]=\(%[<Gm4`pr8q%?nQ7]\Q_3qqf0JqPT>,BBK\LrQR^r)p.DSo@'IW
%d$sSnE*GN?$;NK4ed#F0*e.rj:S6Ourq<-#,o<f#qOVc^50p9*?a"JeF>Nc-a*5;#"j8Ll_8%r$[(NFcFi732')c:A:i@apTJW#(
%XiDCXn$Y10XuacHa.p?L<82]OH8l[u:c>?(dr3,Pn(3GSqu2'&8(OM\>R].Lh7;Pog?Q0$p;[*T3d$m-Ckd%g<];("hL:!k;ge!R
%*cHNI<ffCK^\6l:GC(Q:$EY],gE$<Js8#=R2HjS(Z+"J5&&mAIiBb;)U\0@fs7;dc0UX=BKB9coAbYH0TZ8'`hN<([[qF:SZb,'s
%nbgZ[_qo(iI;k?a&!O#\4,C;874m$&%pKS4/tJYuDj=)Lhm_'P3MXhZ^3B<"34X,!#WQ)b=Shs'=/!"_YXitaV:3<!AS>]9q250f
%4$LB&/#>!sG2mnl4K6;BUWcE;q"\ogQ9;hoptdCf*Og5I3uAZ5O3KZ/aQRb"^!a/u]8,RPnYOS42@IZ0'V#t+N27Ss2-5iK\*]:f
%@FULamB+EG>UCrMS'&DVF[Ur,qn9[pna?+OViO"[pG;?^rP);`bP@4KbiS7##Z"&EGlV%&/Y!pW0L6$SS,+.]+Ps_%*?2#"lUC=$
%h*KA6p.h_^XZh()U0=WVgsso3#LKmf7XtI/4L)oM,e(KmR*q(Uf05St?$Xio>!-m#lG_5-[3`<[V6^n]p#^,6TaiI[WW4XWDS5Jj
%58KkSgKJ5RSG)Me/L[T2bJApWG['h*Rq7rmNn:C'JbQZ^/[`j_DHL6a1.Ckg#9]R5LM0f]`FlflI5IMZOgMOM5Bmu\/%lV[puZ:0
%lf"iNEUG>.jD$B#oIhm>T/]`^qSVD"/-*)=mE]8;CO9c'$'38<1K`LNGj`Pk(O(Jj_=OF0WGR0VGnZ`el\5(&1+9\W"Q'j,M\Z@W
%qrj(/_<^@Zelr'hk[kClh@:m#56=kW+!,6B/j3^Tn>`kN4oL$l73.VZdTq8sSH'mZmG7PLNlhOm_:eA"3n4%R<=Gt$H**#'LN7'N
%eW;*EO+Y;"#=+fgs$/(?fO%f:4PKV@ZaB>G!N!?n9?=een-N'%q_%[l[+%Z2['fkFR,>[2P*G^G[Fts/5$55.4#3*Edb(_ORcS/B
%<aPB?4DXDNbc@87GbPA2X1+9PIot1\WOuM"$^RFP\8kB/b.ddu#;=T?UXSoS$Rdmup3E?Og\E<Z:tne#hr<U_bW"%q)gs6D2dbtp
%GXq^6g@,5TG)Enk=r6>+63Bc[>JZZh9C@&.@"2YoPE>e8CAH0=4r966j0mMhV:4#E[0_)upYL9IKjT"A(E+guUcCNf1s%+jo&;6C
%G>6cr0Mn5q!/Gg<$0LRW3qDOQDr?ZE^5+.N18\D?pYQ2LqX(4hoEu3;5sR&VmY'"jG/0X19D-0RY6Wh$h<N0iEGp+__"H2_[drM0
%_ZkB[V;AoA>GC@F>[AH0f9Soe\(nmggo7%AXa2WBT"pk!BrJ=WhWsp#h%)SO"2dHE")^cnGiQd+dsgfJZdqB9e)Rk3pTd+KM@.dJ
%J0UXW@S+-.!-?-6jl4t,p)U4.XS4,&WTVm^c."q\SjSQ\+5.[+=,q5gBk=MeoES)2S-1)/N;N?RY57;6]'&F%HajRe*511tm<86?
%gY9\[H_8"eUTMkOP>5U"_&!3NmB\]QP)nq[`p*K9XMqHG$dmSTVnksndoru(5<;QCkZK`K\?QWc_ZA!4gM7T81q:-'oA2M,=?8V=
%hA";\HaNlI()nu:^Z(*>R4R2H-0buqrI@P/rl'YpDh3,:h;3D5mC1Ns7*GG(\qe7^+'o^)f%)AFQ<oG@n'?/MECuEkNaV2q"ZTS;
%T!O`tNEMGcZ=$@>#Oh'?02L2P@c*sBc'R@Cgg;Q9:%(*dW5fDUQ^_2pghdq-nf3VE;?+.pC^+=6O]VDMG/8P;i'*W.Fea16R8/c]
%I"t@`MslpTfIDBU*e/NU.0nEPk/.)!EbY2Fi>.[.)G*Pfj9;m[`u5<Pn[F:#`RD<D+Ul!':NtZd[(h^=N/,dtl,Og_1Q.=0S?E*?
%XNo"e:V\-"!XAPT[fXqkVc:'jb<=@T/aLqQFWH5'X4:TL?&%S>jl'ron(*mNo>$IBWqH5CR7B&$YZ/%i"tG[r;:C,Dn'@KBZdu#h
%8i2N$HumJ<E%n>?][P395C:`55B%5M^b#`a99oMDcd)MgrRfY%pGRYfe^kamgr'pJQWaJiH+K_'rqT!%+4nl1'[^n(D/71-II"&r
%QBD.*VqSaEWMT(%'Q!,iYFd0d8-Ra$_)Hfagtu6ASi5T<#pQ<,GOreePrkkuFM2n-<&n6dd^Fffg(Os6gqJQWItE^9<[pW=akknP
%][lh;IJX-kdjbL[lYE3GntI8#Nn'jWH^icZT3`9!k3fKXr,hp0_n<c^I=#8L#,^FR$3RQA"[&]qe5C7(Vqb%U3ot;9F'i/&?L?N/
%?@2EQ/)=AZXC!fbiEc3U9a?K&MJ%/K<53VB_gNL`.h=/fMTXb_-;F<u/cVLO+[b9J"9Yi&G;.jaV!A!SplG2F1C`e-bO*c<1Yl;u
%Ni>_0rAV5Bn#.+r)IqO)Hn\^'.VZNUEcRW^gBEDRCpY&9i6A6A'dNF8ic`@nqdA/e1HlE0B9)5V2)":O?G=kQa#AL)S+(TjQT9F)
%adDsgO2CA5o7"ASCY'eLi;Q/f!h*2o+%<[S1;8rhEs02)")8%3F0^Hp8jWIVOIimI)i!&+DH-UW*.56OS>nS0br"C7M9thX+9,Ol
%m%!np=)O2fJ@8<f<57-=Jh.f5$",RJ-msQE.R"p`#sH,fiR!4&hYr@"GjR#Qp65=*4a8a_*I?L+7/Bqr<L2=WpkuY*2NA_OA=riO
%N4ur?Bo7TT>V^-EFERN@=:0LlR]>$87C>#%^h<N-iesM_NhI+:Wc$o57<<NcRcWZHa*!JAeZn\"V&985e@adEG-:hbs"r!G4-&_/
%e5>e6Tt:RN;+$na:]T1R$uFRMb,A`C2%?>s-o4kN]TB"[RVOU_20qA!re?Pg`+b[&[qnuuWbjP1g;"L9VcaKp'kgEdlo_5$JIOp[
%S6(e[\8'cQ_$D)301^-n_e.m`("4J_FMh*M?CIq,80g>/8QU&(M%rQm1=JoKY?SGiEj1'cdjDA*$_TO;VRfOZ0Q`J1Y%`1+eql(B
%&!`PNfPh:Y0NHZpY![fM61Bor;KnLGhUP`Y<o2=`efBX9GGmgPd@`R#lAaa0inaZAk`JWO%a'CIl';]n@<ZCbV;Th6:dGeKLeiqC
%#rH#jnQ;gmS`d#k1$F7!W@!^<)L3!=!6Kh96'B/*#[Q%>U2.7C7b=\*ro`F0+6;:mM,cWUCR/]i.W!I2;B3r)D,Ot5V(Xn.i>:R5
%E-)oK+F4L9jeC.Fcrj(QMIU=F'tZAT,/(RW[hY!2!nH4e%FcU.0"PGA,S8J"koeplQ5tRC&INqo)]"'00R,G!"n'3_&]E)%6HtaD
%@9jdp#d>o>i8L7%oX(D<("GljcA."(YdssqkuXR"?.5(L<8\/LIKHOBkjnLN[^;!$Lr3cf83e1Vd<(15lm=D:&d6ig<"b8qFRirF
%:d/PkZpC&[P11'W`eNHff[Nk&eI*O4*`U_Q1)%Dnram2UWsmMe'0%o[\KY_-FVIbh&]A:[:tAI&1`\?9ZVaLc3P,J(2!?]!P0"!3
%WsB`DaT=R_9@@r@]As^WG"B_T(M&4H&3A4dl'Z=4f7ed4K@XHh)b)):/'m/Id7e?N#R[g1*'LK/UuBtfRRJG6D7F(Ph^CNdD\:KN
%IP<@/5ulCPdGTQ?kR:o\cpsa?@,P;V65==AbPF7o:&Wu3I"^3W?s@d%H&6GSAgu80h)+"=fIG.=+VXILWaHZ[R;^X$S#2q[!ks3e
%A/EH%HUsm+!(GsM5au0C<J&YcOo/so$i3VoBV:0AUS@IN3g`rH9*9r<;]`$Er%AYa6RQ'[!.A7;@<OGs6)o]>q0HSXs0<`5#GLZJ
%",NU!hH%J*U6:'4@iNLS%?lU)?h!P/`?B.+-5Pa*W&2P!1'9?rgHrai"#:Q*)bQCE22m8:22q22Q]YVPPJWAI_5i*EIFq.4-TQP]
%p!?"c4JiC")]R_KpVQ'<4keQ@D:\2uXdAttchA8;/U7?Na%*iA=c:VQ66>docIi6ZVt/*<bIc$f@D+!P:i<N*<i6gXn<W3r%IL&c
%WIos>N5RjfX0mD#@meSt`Z^ph$5ZepU)ZiG->:kq[baQq/RFKrT;>3VWReAA9"1,"LXP:ef14Q&YU@ugiQ&?@<0Bckn]J9.dEtC=
%HlRg1YRqsKSZ63c'N1X&@C'-u3p?kTVJst'.^OAF1DPS'2;B\6'ZXf/2:rAe1i^[WE6H$G=0jIM/C?Mq]Pic8E+*no^RKTPE2atI
%1!&Y5i"XUE!uc+Di*N*#ZZKg/'%Aa;;dmh&J@1oIFu30u@>pTr#Ta]5fW,@h4D<b,a(<9I;H3E`6;WbM&-B@qoPe8q!aTF]162/D
%e;\$c,fsQK)lbb7G<\4slS^r_f>6t3Kil-t.DXOM#CL;+_aKl<a@4.Z%H;L#o>'lNF.*DQ]'YU6#iU]9=;5V&UQ*Y?q,B%nJtHR>
%bD)$>5t%``NWUC;7B/*"abIT`*$kjfE(_QV+EVb!;c!fJ;#sB05VfibkiZXm#f?p@bsTu'6Zica:m6I'CL%4o-'7.R<uO+MRm<OW
%$3>0BWm8El(7Y`2>lgt0Uk6^/)Zm$J/8j*$@tI$aEfb-ngd6gFD=Aa'T^_d.6m0Pb`8\Wn:bVmgI"VZ1F#ntTQ>>^t#i!<:;786S
%bG#j]TTN+iJeP<16mY-m6XA%S\Mf-R0/q'?e3OX'WY,^A15P$Hi<,;`"<e!YS.rlLQp.H.he<^\C-b[Te0O]p<WY*D9/icCK8mu&
%)3LL-mRYjNTS-#Wb/>IT`apJURg9hS*81No7W](Fk3Q&S@<J$=V)oCs[:3$nUA%[*"rUR0Ua&usU$68s!p-ao,$4j(dq$lAMCCh(
%"\sS7d?CTKBLl<k7ZFEV>cYr`9*NRAFBb#bT^!B,IX/#HV5.X`(t:G[P%)Eu+1o^M&Zo6\6C=oC)?E-0?JuW.ZOVcsq@Y+TakGC_
%+$M,;YtEBA%=UGZ=lB1H?uOCoWg*N[0\$IF%j9g,;r++I@+_Ct";&/#e4]sp5Q[<+<)j)X;\0$tK8r9Q(E`o96sO3,:fk2I<%Upq
%9MQG9Na/;jK72"<MCYK<R*@EQ;/*7""K#iJ&uU:?>Q]%.5a,YSL]S4j#U0F=.q.q/0nFr7/-phb*)i_OZ4mE&^NbWls.Ws<VHm+K
%0\.X1:[3c[EdKN;cip,1CK%kb;\+N:V8QYs9uDO>.A%6r_ZB@Cl*cZlQuO'TGW'akdKMcI3?@Gi(jCK9U9m<DJ^b/q5`qW*;Otfg
%AUd,"6S+L(2;=DgA&RHJ1+l/ZLHT9KL)c-T19=l$<_!G?R3p/!'_q2$1^1$CW4Y_7.14c_9bqagQp]CMBUqH"^'H-=<(5mkb5"XP
%kU9N[RD"lY>fu_*-r3:MNPsM^KGl;m,Z1.*EIs`S7F%,W1EF"4)+(-Tr#,ZXWp;Dojt<f$(;[3X/+Xe.Wi4EM!nnHm:*ZiI1S29T
%TfAQnY11M>1a]*m:?cka_,t5W:obIInD,W]m<)P,BtBP$BheEVf!M&$p_-r0?,+IginNhMc:!b`4l4Z(b0V&mU+(seZ*"HU,"j8P
%@Ze_dD"Ip>9#9:&2tu7U\2NKi<L=M$'4O?dpBirm(pq0,#<QS7g^5/h`W\#;X\;A^J\Y'f24B(A.!c32_u'j^?3(3#R#2Kd$^3=@
%=>>Uo0,okL-0%!>BtChBWe/X-E!fPbLtBJ+,7#\`ijn5`gXHAU@CUgm/f"/.('?iOn<:]Q<I&F$KWW*bWemGYca**k-4YP^>a5Ig
%#@rp?2-P:U9UNjP>(8l2;J0PEPgZ1SCZ*o^$rmb(UG_[(:sS"k=t,QP<ct[e@;%Y)L#<nt3KQq_Lr$bFM&HC=^YR#t\BLC,`M/Pb
%dLf=6%buA3QPtuO&re-/jYRZFVPUTXR\:BN)?fOHC(Dhb0AI=>>JniBUsCRLfsiL`KchD[?ZA>\_*q7HN^CuP(+L'ok+i.ies3\(
%C*eD?jPd'$Wk.E2R@4P8kZHkSO+H6eRi9ID-SUdXNVXm"#=UL$TI$9u5Y.TqC"?3r3bT$V9d`r[&D!N#at]9VXIK>!#3+oX-AQ-j
%:KSYL3>G%sgCtV:*,(H]KDs?A9Q9`&a5e(('P9Y`Ee&^VkSDRL.$i0P:?X63&d-<nq:dfI#uUa8JtF:sLqt?e,fCO3iHg0GPNouL
%:N4m]juC:T&]TBdO@#QJ]U5KG`ioe&;8i,T&;c8I-tl>T''p$`i_&J8F4"JMahb1a)g2s^S\mEj8$>hkd?mg0!YraVFB+'/&4@)#
%#n5q_(bD_S!5W].".W#aVsQ-Nd:+R.KSRj5DO;'*MZsmE89%W9KX]$d$Ok*J/#Qc0"/>XFa[''gQi2a-(B:`l=?)+[R:9ut/bRd4
%e"7IZAjF=8,Tp],C^7ju9F,%;-O#(CL]tL!&-I(\$cZ2_r.hfdWC7<e;m^OPR/nlALJ1t(;0c%mY!7J.AB7#*D,QYWBLj&VG9CQa
%YsV0>TLgi^1#E-PF1=OM&0\'+#oB8\_444,@Y-O,nqr!cHI3FdFdiN01fI::Fp!hk9?7YUl8G+-1`=PL3<Z<2#sp6?X<7TPg<'L_
%c@W!%Ahu#uIs!04K;>H5M#r0YX>2@<@mCK3EXXKT+BVMl!TJF1K=dZc64"M9@Ukjd-0Aa2M4UPCQ-D2e8M/Zd2Bdo845Quj5i$E*
%+@:$OQrLg/M9/;=K%d"M_9n?$Ie0([Bmg4l58/H1PD4[(5q)uZ&jV+P$Do=mJO=QkJAOd^ccRu8Jc7FZ*@(XpE/VL;-e00'BQWlO
%6A9qh(ho:IVQjC[?'<\O6[47=[q7lk=uca#%.Msa('c/UY7:Z],Oc@[@j%_/@QQCVE6jJQTb3?ZAHk#rL'3AVAoCYd@V[B+O:FH=
%,mdLHKbB>BFYIGn#agh1jWHc^,DVR&PcYB?`<#&ZC7<XC$5?F&JhjX.l3)1GZMD2/JsP%;7u@>3K52D8#1Z[AL>mq%=(/oZ:2dY`
%Q3+lZBJ\$^:`VnFK8E?XC(Sk8D.r.,3'!BD%]V3l>g%:gLgo7X;O\)g<df7CD+nA`&B\-Ig5$UfP0C[&9Ipj3/ZsY<i+djn6QKYc
%gpN09aH-]2)E@K1:^!1IW\oANqJfFVM\?"(<\sgq.OuqtK,>\O,]]q*jJN:E5U==#;..a#DGhBBJZ2gN'.Ja16im^QV9/pJ6W3a)
%j29=?hG.;h!=)#(h4X9e1km2F_^1$pgs55qQ8nq#<Ap4U..23^8XIn&*B+M?3N3Sj;+N68,=!M7gd"/@RgGh7dR6uM0nd%$Z]Z<L
%#qQSe3?rMG1:mX/aZMU^]C)hacbSA7[*s'?`/W;*>B^*@XLk-;0b>/V<QkYtWo-pYppXbk[)Y</+WQ3<)'u\h.P>hQ$,gI\'F2uQ
%74)mc!S*&.\sc^:\u/_iObS]6i[p@#K/V0oI8F>[;fHPkXLOH]lrN1m9\a!+p(hrfFIq80f7f4gb9gU6\m#ZIi``j[<KeT7NK+6>
%Qjog)Hs'P#">7-VimL$r:pE<^U`N5*.CoYE]r_l[",%2)pT)8g$f)NoXb#V=i;0a=12>Z"E"-(QC%2e!+D]>tRZ.]Q#mC0D>A#,'
%#W.<j,Z7W'$pRgnS-fb$`Dtm^4f0K7LhX,)>e3@a2GF$&Nt\>aPN*M$dM9uOi\i6Dm@D*'0rfs%)[ISY66;]H28%n!2XeZdPqDp_
%4rOo`iTB>b9ns#`G=6t&OOO^TbsqY'8.Z=@87C^"\mrlr%a59i&Lsb0L@>D(#QYX(PuGJcISkU3ih.PPWU2Q2NJUI@P<YG3-Q+bn
%9fNh2-W&N,6S&/G-@n7H,QM3:T[5cO63n$A.#YbP-n`PE:/5Oj7>c)5,b[YW-jsGD<SCV&+e%a=+M#&d`7srfi^Z6oNTE!]ZP#3Z
%YWF+s?S$Ir`*$o=_SCOK:I3^E<hi;a]X7a[+K#/ZRhfoF!-dh70c7fI,E9R8bnt'O%L=X6<N[1GnKsr\""MM!doMb;$[;$;7]IpE
%`*;;J@h'6\Q.&RG6IJ??k+F\_[AKu?Rr?pBFsPmORkd5u\mZsOg-1'gI8)Y/.Q:$=Ji=Pr/CP=9_9K>@_,jA4/\L*Sn!as_CF496
%<1>!t5\MO#%DuFDTfIBm_\KbYWYiTW,VfL!crNmB@hqK2$(HRqpsnBDAM'28;<08cf\R.V5uia:"M3j@)TK@&J.<VJQZ`dj!K4F\
%PuB@Bd*\@2[0+#n/g;Q/#`-"V%Xj$6/%Hm(e.b8PHe_,$0L8f$"Vg%haqFsajm];SD8Ij+=_q6W;(S$L2&2!pA!dHDWm4PhNe=eB
%`W-6f'XM!E@i2`IWlpRn0ardf\l`t&2J/t/%6Gn%5Uu+9<R\kiSHKCGI:=rVW@<Skp1UIbJXirb$7NuVl]4%GP/Aph[#$lYal_j3
%F_rg>!l@;tJg.U_5tg8GppdJ9Va)`$of92alConHVVm^ATg"9&E_-osmO-";dkN9Q_S$WPgGBcW1n=7l-WS+shP/='113d\3=UtY
%&1pGc%LM5EOrt<c.d[.>8$sK%B&U5:DCu]K)Hc>1".WK_k$kcL%=Z(6[`YW:G!qce%D3.?Drjtm*TIFZV.d*Fb[&qq$X.4Q"rcs3
%-9'Oh9DY:l1g9G;5E"o5eK*F$MF538^u'n*N&M;@&=bZgS)&6<iIU[+//)k<pj.<`Ysu2B9/fu5`!K8`f(m$k\fDhXY"cXmKPf(D
%?t_?LKSUeG6G'86ZZ.SP6TZhJek`f@>HnW7WG/[9"mtTN`/<fb8<ii3ZAle5'#:m5=tT-]'T`ZC*Vo+uJHdT56MS]6lAG(sD7fkt
%^b2AN0cA7ppfe5LaH1j)lZ>A&`ja/Wn#CIc1bBs*/0@M(3%8!dSsui"R*2nV?1KCC'g]a]qY^&1)smXeG"gYd48<Vt7knGjVm1UD
%n:j0`f%>6S\0X\W:JpImVccd<a*00r+DVn3FFF5WhDTB6_&,("n2ird_r@Gn[ORY4nhhgIL,W#GCnqVjGY85&d?$9B-MN-[BR_\l
%rCf48JHdp(8U"KN?"j7.N#-LM#KPAn_)G9d1^225&9i&+%d5dYWgapog9o:kdY;ZW(jXHBfW=sGDq[JhJfUTd%nH^7`105NVd<hG
%3<dAsZc.#(f.\*meM+c8=huJnFRYh"PBU\lVrq0>[CASFEJN\k\Tp(&Q?:kXd"%O=@ISWgEJhdnKs&m=3$rN<7:Tu/Wbp/*#Su9h
%^l=jDH3,XAhA/!ZrA\s.'*FQL5frLej[V\u$>.W$.@GDH]+3'Rs%*<JlSWRgh>.K][kMd9eA00fnkDcTA%sQ0Jh9$$")l=LqZad"
%`K&i-d#d[.(<8FLZ<rWmPI+)AqcW]BkNKr)%_:'HG?]Gf+/\9Rm\&!&MWJr*oRU.ECl!^u;Q*'T^QU,fDL_T/g50r2/Nen"H#k,I
%V.6T+E6B[kFs/>#G)c8Sa=&9t:=iC[K\;CHLt6k>bG?=]L(73[^P^Cfo'AS)C^X>>'o1V3QV9oVpVV+$dnp1b+N(RrR,db4TsHj%
%ATbL_'c6oMS(!LV8*Dpjfk<)Z9ul(u^m<?pOp]K!BRWr[_>EFN1Sfpb1MhO"TgMrd[K7)r=r0,YBl%Ju2q"qSML_!k:t^XN22m8^
%29`7@F24`8]r1@SgGV!o@ZG_BgD76bhmI;3#JKMSm`4Q-hH<+`b/En)GqM46K!D&`RUrp%%[o,m661j4(`>_1^Y5sF?:P'2Wn`Ot
%ZLRKV.!'4T>]HQ^D2bm@UTO5\90CU:92M;CiN'"t1+`FrM+D)Ib<lEMO5G*T/W_]O2VT.WDWK`1*S6NAGgd:sZcGoT&Q"tQ2CVX=
%>BrlXV=13c!M\\"Q(:r#+k!*<-.eGJUfLu59O1Ot_SZqk=0;Wim/P4)-=I`%kn0C+YVTNOJg0$\=@1u@8dB+L!9BJbjbn\M_NqR)
%WZ_/FC!B'*Q\0\:\U:l*Jr&/;>tqIS!QiSY:ek:o>Kjo;X8YWja9+&k&$!IbK87VeFJb.MU3][Q9%@>ET*!-1`__GGfMZj:ZRbH*
%:90&m[j%ShFh6Nj6,`^n3$1fD-(n5`,Z$d7;I./Z&AS38.9p]qZE9p\TY1'CngCqsN,GLpUD7%'T2nSI4ZP:)S:]b"\[ZFVS>p!S
%<2sC#r7A$L@MM[7s,WaPWod$"XREmm?Pi_-DiW'Ob@D9n@bH!1$guA\<1!"+0^2^O#dXqDTj8VZ&`>-`CmIGD31:%r:],`<$#6fK
%$@$p1_bOLEW-X5Bi.<JV8g(]b+3uGn;i#Z_Yt=9\EHMnM[p*92Y6ZQ)Mn:=!l>UAJVIu`K"fT:u/`6cOL_:Z$\m^%<fAEP"O)sm6
%[X,Lehlt'@3m5rN$!L(i/Nn##%bkK_e1_djeM)>k9'1N)5oT]/SQ$U$W#(Z?@T&W>U]U(=KgnhD1rXIfDH-+*D;&/Z>:O<!)1SfB
%,!B!/[s>ROEBVa5UBJQ2E9JntQeu,$qrZmbO::jH*<G0sW&8`,0L9^QT*1%P90g/GFBL;YZs+G-(UNMoGgs+&Qu]M7`:jm[oGeAJ
%1$0[ZD2@$6bUGc'Rj%u[QHF7ZL<8m_eA2g+m0$Nd!V,;T%"c[%ntVmM"`leUi&S8V[rC-pq#c[a=NhkFq.!%ga%u'[:gc>'*Ib:U
%3:s'R7N@sofb`"U)B)g0\UosZV#9Qs[B,3#%HM1?s&#9Jk#Ln5(.N.Le>Bc(:GHt9+?.qrnX_/QF/V"mApBZ"_NmniEeuLS^bRUf
%`.?*Jdh+;Gf.6d#;7u/F;>?+uMIu1k_We(pZEu>L<hl1f^lBLWV9qHb,4QZ5W[cpf"8*.f:sO0<TWU>?f?c,$["WG@p/;'sidkGd
%4!eL#=$(]Q=+!P-m!.+]TZ;"T2Vh&mJe$=-cb(Qb:93""h2GrnQ]&#F2"PB3>T*OXZ=8'?Xm$<j7!PLE70BNG.#*V7VNt.<N/#XM
%<0YqJ[W1!j5FS1[gH>/JSs@8g1iN9]&kd$+m$OURZa>Hu3teojJkB';[acUr;@W55gX&-rs3Y%Xka>Z86B$V8>M-CAA_RD0m@Q=X
%$9uNkIUG9&`f2!S)FMmsZQ+G#\;</b9+ZL?]#GfXO9#)t^>ukIH5N@2-A,\1)%R6f:NhZDE'KX5<@'qo(*t(N9Wj7O5D%.0DjQeI
%2ddK=+8;Jkks9e=KYLfVj3YUF&qi(,ZXU)i+JYFERAbr!\h?"_5sFU33YE\Bd_jSemR^9B$qf6<Tq"$?2F7<bO8^QIldFoJl(X3a
%NH:<T!t@tVd^(c8Y#2c?gG1$K,mWH$0e=\"f4F+s73@a'J[eN.<HV2q)MUYG<1OG\4!]Ato&T'q%jRJ77uEu;:NptF*7tAi$aeO(
%#7U2-,s3QWOTONpdkhi3;%Q?tduT-]lk(lRdOgs=8P_rKOB?j<c1n'f/rp(2[*%C+)5>/?\(G]&EXg9YT]HlPT(c[!S&UU07RO!j
%7ROBI^u)j8Nt/=gVnM!j*6I+tfQrgcX"q&PK&TO/KqEabe1_djeM+aUlXJ&U@``EE[n\A!f1\;h=CM#5SU%2Z5Umefj,.?QFd=Oh
%V_R1SBq;.9l(MYck%n%o,E2*uAMCO>1!BJl_[_WE=**RR?e*XG!E/_\e*pdP[#mX>2+;/u<O1oZOj+N)BXbk@+ICn`Jk&6a[gW*`
%e)_Vd5.3dmQ:!-<NU?bPpZB&M,YOFGha%--ci[fFpOs)8l,"/%^r$^(!t6mno\Y_#7Ej#CS,)?_lW&Z'7P\sZWjnIskoqV#OZZ1`
%(!TQYGSZVlStIW]e(MJh:?$-7`(T7<Z#tuA%OW%Zn%%h_(s%)2'nR'/L_<*L+T4:])G)lgS;P'&:hW%#F9Y%\nSO<V@EIQ)-i^&0
%b=+gmdI%L`&,m)fCN>mBL+r/N[uOiqRP$8WlRVq5iB+282-!.pei@[i+Dk3M\U'S/S+&q4n*#.MnJf,s+6uidjr2;GO5&In;4'oE
%P5Hspm.rU!Og7/icr`"@kPcC79O1ItgB*M&F3E%ZGC6]AW*_(<8!HI1%ScZ3/'*lf2nspY[>uRga?60YjTTDOWXk,Yed^r*cd/6p
%H[Vajq:RL<_?@(@iu#R4VhuCZ0qcDjpR-dk\>,BFa=L7"VoO2o5\,TWlba:0i_.jN#[ZEP:PU'B;gHNCqB`\0Pa@UG^E1eqHUfJ&
%P$5e^H;'Q#O,a!"o2!G<[:?M[B>]o@s8HdMaH+#K.ko+teKC-iru;=A>,p3;#3>D0^#.N2hMLjU?@2SB<r9On(9$&I6[DuUqpO]R
%j3V6pi22[-:GuWm!.c5\G9c6**@K1e9gdCG1&Zl('iO4FiMuu'3VZqk2M`2U[IS.D<@e,@hPhqUXQ?;4-7t,i+-dk,heO,af$EL%
%*'IcR'N!Y)1V"s(8?u=9P^`#Uha=:;mhn>hGY[T@i[e#fPXLZZo%bYP&-'ufGW.Y0[[j@!gE(i-B1bB=WEpO@EgL&r/t7,O:@_j?
%&QG$0\a!DMW0`=?oIE3pW@cuqJC5EH,(An7hoA1_%m/BM[d.:=GBS)d^14J\JhN.fqtM7?D"u=PqR=fElug4SdmdR0[1=qfn/m/K
%55]>;+7s\t^mFj/D))cWb"$$+"od2,54mp->aGeFQP&W":Xl0:V#];UaV,UAEu[6YGn\89N\P&"!YX)e)TtQ?3X1:Pc\]T3U.^5=
%W6[qSbPdWs&4o8m9!r"F[UWCk2#%&;>X;fK[[71Rl`nL05=lSa6eG]V[3kklLdEm)^-P1+j,04e]+'4PHb4ankhPV#qH_dBeOhkS
%JMY_66#@#t+kj1.';/<,^'Vb43qbP'*JKDs,<i9m=Q)_8b;roM!!a-:qCg2Y0FB&OXIhpY>3*gI>A$RaD^kD3N;]BJdDs&,pa2up
%X3tsC-K_aL-N&&/Nf:SFL4p00i.Q!Ro*h#//e+M#GB1R;Jdb9pY<OMQF8Us:Xt?0-[@`$4@0:l.>WYtZm2)>U6uF4>B.V:J<UEWR
%^To7B/'>`36u+sLn5\BN9/;D,2BUh!+6s>n05H;pp(d6R/l4i*3nK\3TEAFBS!=CAZn+Lb*.aA$"^INATUTG/`4g\=GW]iCN79RD
%&l%O.3Q$N1[i6e]97(.9"qStHUV`10Jp&c5JI9=s;'#FuG"AGNY1:I5a3Z,tDou:^h+qfWRqo'8VeKeJ&TZZ"!C++)BNh\0&@JPZ
%!WQe"'IheY6b;iAmW#l>c[3%V@u>KDi+"W/2dq0qjiqa;g!&OBW\cRX2^L<4b^e2V<f^VOWXsoJ>50Z`Y@cI,4Hq`r0A`duLEb]Z
%nh=Wl6Msm/70NIheTQMR@gn]G]el6/[7[AkD"ZF^>Rp(MMTQm%MS[ic3pIYZ?;GSb4%"!"T)5YWKOTGlj?D<=>O*ol;ZOERp0Umb
%3M(OF5;`eqbbbD)%b#R%7WOHofJpT:)nfS(f7<?iQGRIug2J%t9mI\'Hag[RmEW1[8!>s=00aYF>[C1!^X/Hu/a6d/(sbmJi,p=1
%V4BnmfBW^@bc$Y4'03eD$H(3VX'SWj*h-Lc8J/kk;9:\VSZB`J4kd0>4IR:=hP@1&/K>]K_e/AlkR$'Umrp(iZQ]%d3dgqkk:Y,d
%m?V=Id0&*D1u&+_ci"1(?K8!gI/m$lK'H+P5D]j$rI5]`%t0R`W(V8:Y<X8X?TQD0NQZ7<g$NHS4O.g&Hthut;3#!7l(fIe[TB*j
%HXh(:MfkY)2!^iCSXV5WJXemh[WCd?-CQp@6a>"SSZ<ho3bC$Y5dUjV=EF.NrS[/N*Z#Dgs%$r$)%DGf\/s5(.:e7<>biHK)KPN"
%r.g'#<:oK9rB3dO5O^i*%RW#j]6oo&O2JQTE^?[Pp#<m@VU9B5KN!5UkM%E>$6`%a@uOHsnqT7[EWNXu7so]]]#M/2h'fS5b1[TQ
%:qU&=p&R=`N37n733d#1d/i=<n9N&Xa&WpTi/S6g:X'`a%c?_O2;r?>?\[f4lXP%%q53Sslh`?1;X1J<J[M)2PTfOQnp=UaGOT3I
%UHH2<+SOD.<"(:EKW[DBTpr2qb?ErZYf0Iq%3BN63.X%5HpI/oD''5=A6a8s?)2)(5XfK<0O)FaJ=FT!451R-YFI=Rle:hf7<7El
%6MUtootM!ehcC9JksG'(<-O5J9@QkEFnf(l932=mJ.`3]r!$)k/dE2kkiVA5Z:9n8DJXQI4JMNCeU.=9GmJ.keo<8ZF[B'RqX9S0
%RmdpdbE(I&5P=3S>\[?2Dtq?tH?R8g\9I[Y>e[g$cG^F1[8Vf+Cg99+SMC0uYM_Ko>2e>=:2k"`IBWnB"IJGgT>-G%'W'B]&LS\W
%<QQJ7BfK,kn+'s9ib+\a8RT3e*tR;_M=UcBT"^0)GE;R5Xq`k7j,Wt<?0an^KsT^MfT-S]poaU@7qWT#cQA2rD",)kT+=6,%kRFt
%gB?S!^!*nYG%XgWqleg!5PF9Tr3pJ;/\g9eO6G8`GfIG70-g)5@uokn>R$OS+2`e1f5PHu'*VTqY>;)!K8Fc*$E[r*`J5]M5Jk:p
%IlsIhmD@+/Sfq=(9D[ma:+-rF-B48aL<%]G++>a@5P(f$ETY!Mg`KV]lpCXDV5#[go%df)I*8Xtm$m.4*GHt'Q[V4T?ZrP0aNU7P
%!sGd05,2)Nd<4ZC9uc]R>/Vt9H-"..DgQc!J/g#+$O^.p)t)VJQb<=Q*V+8gC+pRppr=V*G341n]ur'=oA."f%&,X$*o34,Ub,Sm
%^`?u`[Oj'XbO0e4Ot7a*6it&^rY>*Fh&gYIlMYS&UCU!GC$r,5LM5MH5BhnNUOPe[GPpJ54Za;f\TIXYCqb8gEU@H9^:;gSdndYt
%m2$Jg0sS5edI'dAgbVt/]q[CJ.eUgaH>M4h+Pn1q>j:;>2?E=L[A'D\^#;$KZla`KOEg%d8ICCmr8Rf?4*!OChVFN<q<jA0Pd3&>
%lgF2P)'@S%$?r$hfe7SAV0.'hC=aIEdP?8DM[hSER/J+fkV3>\QiHqMNX`L7eFL2c9gH,q[7'36]jZ+>p<1e<+[>_!Xs&Am*WL@P
%cd&$k\Tdj\D#QUmru/oJki)O(WnJHe7HV:iVXJEVUFN8jPG^7TiEF1m;3-2K]qrae7Y=]p7_fO,g?,Ep[BDglVa6I`Q\4=WrN@+b
%M(5?5r\$mPIGC.>Q[Snk6'D7n6'>J1jo<YhP$_l#>[l@bn[.Zja&mPBoSI=pXPqhIT$NS`,QZsaG<BSMf1mt):F$9g/'FJ2A88"p
%o_E/"Nm2L's/MP103%t0nqS?gAc-KCOT3#grKl:9/h5eal/a7@NC/Ohi&7?C]G9:UBDPa2\e`5l<%Dg,.2f=pNr.lYGMLhcr__WJ
%M\*1Jd#f6?0iS4$+*-foZ:*fU+b<bSJeGQb8YO#o7)c?ej<jYNJ(mn>b<o7JI^.^HHGMZb9#gAX5][!Z$;2"-CqdOFdLO*FlK9_\
%%2..&IUM>Vh+siAn4c,sI`kdi%t-BbXrmKno07\_jIh._2Aj0_f!cJ'Ss-INAOj^)O:M"D't)mHf*mP3hK<(gIGF")<^g776HCOV
%K;]6l)+(]mQ)7IdT<hsM#=q3^9hf&ZW;e`uO4Ul<Y;h."R'+MagMh>%V/mWq^Tp%O'C?5`7<&Ak#5JLs6f(b;,!(I?_DhRiY4TtO
%4W%aTf!BZZV\d5m1>LA%W<#s'%tAiG*O()Dh%ts!+"paVAMWhAX"XZATN&FgHg/Z4C4#C$J'-[W"7b(Uln/8#s87ccKS7"Tq")(<
%.n[:PLiPg!qJ;-ZTXG^X"65'$qu2gJ(Z]3pT5''WQ8pC#R?uDE]+r'FO>0EF:R\;f$<eJE9<-DRO:</8iT59u7oB.2k4V$1pW-RM
%-8-T+8j71c/<HHa9ethh_)g;AJ`$gLp,/I"=h)Kt#@kOEg&K!qqTcbGj61GrGE=C"EWkEV:p^^=;_1&l;=RW.4G/fE"5'=_=F'8(
%#^lTMK2nMuj%rq3#;C*KnI3C9"C'$<rT0qPhh'Se7sMF=prm7@'10dhnNX9ece\MAi5FU*IS9d^-=S/07`hpT0L^!ZnpOk+qX\"]
%s8."h<b3L#:2h=NE22:QQB1hYTTXQ8;*RTtkD3V4p0&<pn/^*2l#nHr6hWdF,tj-<;K=OQ_7F*Si+^3/fT(Go=Kt?+J/oe[>SbOd
%pd.F4)["?0aQBUa3Nk:"O[nG!%N`hVnKj2/(fC=#&58R?l/p<9IK.l0K+.)Gpqu%9'CB+I\P#^*?U&fu9<LE<cQUMrci9Xi)**P5
%94]7rb4,f-67ghoiFG,Q-Yh'$bf+WG)8Tpdi"L+t")JQG<*-ACa`8lP84%lrhDjg:U<\E?e/'0fP#`)j(9V4T!4,K%.6o;F5#`%e
%SaS:oI<I%b!`cTELl,f8O#U+nm>Nu7)remJKr]eVRnmU8*6oXj8WcN+eV0*-5*ag,\cPu1p5:Z:loZ"o^@-_PR#aMR9?0uCMsUM5
%nDh/!i'13rIT)]rqUcs9APN)Hcs'.;jYr[L\nj_p!]7=/_4$&YZ5$5:UW^EhdQ?+$#E*"6FG'j9CO83#(T!UN&0#^1B;X)EPo?./
%MK4EgG=YYC<$Yad(#'Nk<d&M6feH&e[t'N:O@=0ege`#"^KM4&bOOAhhe#/,2.SQQKZ^S9)A<5b'GHm-$h)<K)6cT`s1`O@d60I_
%.<'V%:$_dH80Yo!Qb>ope1gV2:U&)(aH^1\5ON[Q@_qat\8AE9`>B>q&j.7l!U"&WQXXTW^AUHL\efgCWr99d_q,pkQTj>M-UQD<
%S*fKPe_RT.eBY91/C+Y6e8ji?(GWc_&P2uc*bAL7(Z,RHQ>SUJ0#Q62YdY(ubH\OYU/.nAJ*qiXHbc,Aniu<LSDM8;We6-jbdDGq
%,Eoq"`hRa1HC_@K[JmG)Z4k8N>hB..Bb0jc4=27n7/lrlRb.Speg%%?CctJ!iRY=HkDcTV6*GXaiW#"!qgANI3X18[GM^BBN]tHL
%])m1mVQ/Um7I>kM>sqU9WMk=-eR7E,_!t=&)H_`?M$of;.AT<_kS/NZrIr#?=,n6`cM=(MM+cH98$Fgr4A/&nO*c0oEEE['M&ng7
%a-BEPNCiFr3tK#hAb[aN<;,="fACfCbqK!MFT'#XrD*h%ngtbI_^dNnA[k;h8:5DXG,Hc5/WAgUKF[FH=O&S^am8Epl*0*#Gl5Y\
%V^KE*<;uD&n_2GF8*,ZNnoh)u4=sn6LB$<6o``]0EbqrKX(B`loM2FkjooBlM/=8icV$%s9$hS6A_88;=[gNc&22AY'.e%]3")tr
%*bRp-MCfT&[)rm/@mi;Nbo$DB)3WC3Sr$1Re_V>=I>fuQ>-Ymo8HYI^^hEi"L`q6T\jYDps$/sB#S+Tm&mFis._9tCi#@!mdGpRB
%r94fO9?ON]f>%',n?RaT/r_>2eHb=`cl"&g&li;"&]W"]3e.[#iAaSehoh$Q&FC2e>$5V!3n=mbnE+[-%`0rElOP?AQK/=M6UOmZ
%?Op<pIO'SA%Rq(!1JlO@C2+j'nmH:cE`"dV]MhnOh'f17=S46r!l!Q6p01&Z:G15uhOjZ9j5\MB>GaQ*D.NR<6;h,oVU>V%n&:!%
%lDN>o^0VtdTB)(5N),$Bc.D(Ma+(nqqGU\`420Y=G5#r(Y$*?6-luH4UpT.Xf:`))j^FEaMo)A%VO_4i&',i7s/t\kBSUI$K*GGa
%DY:P7AMB=\@N:#ICk>4SlLb5;gX2N[-cOc#\Vdq&J*mfc@j-1hO]ZdSV";XjRlg$ZpP/siN?_ctCj(!;5P3CIYHs>i*t@]=]&W@2
%rQB[PL>i13CPt/!i:Y#OD?]?N.@SrPW'f9/%YkG$P#cR,jig'qla\8,D^?kS)4;D$!Ic_eU-qeCMkCq+aCm4YkWqg@?4Rf9s"/%e
%9#>;#m-kEVH,@s][,*5r%U(<<]RXIAHV#B=dF!tWg>1g>)ZfTa<XqS:VO=jN+>)I/2b!fWAs!aA]a9:M9d\pMCH2;V#B/mQb74Tc
%ZSNhF$,ajjB\/P'&EhM%F:i]`g5tY*IP)<LjRK-UNF??CT6j!;NC_AY1ra58m$!JAgd3/'Ssc?L]h<OWieGZjAiEW#S6=JE*d<Ja
%NWF&<]F))o'e$?-/K>=HPqN[jbNe!FTj\^2"1rp8V$49kGAACA@oUqr=`\s4MV&I;=B`fl7>fF3rH;4/WD%eH3;&/?k=09;VEXCG
%L#_#E#d$,SX?-!eo=9Y1h1Qgl*jT1A=[27\_&J#H5_KmITNaT]U9f)M;O`oo2`XWl\NPJoZn).>Ni$jV]PTurOmhX@0A@!52>+ta
%d\$gu5*?MQ[l[`WWO<AZ`KKQs,;)k5JnT1tBKi$qQOjuREXh^M>9`R;gY>U_;KMY0'2(bM=@p)R$Ju'Jf91WrDJ-XlpcE?YE4E]K
%!_AT#1O\#H_kO9p+J^!?,DALdQ(]WX2f9h9XB/]jKYpk1l!-6\A4PQt*U)+<+3H&lKVh('&2)oK^_n3SCp\d9m/4Hk3IE>$o'qXO
%jep\@\Sr0a?8><,U_SVWGl_Ii_H''4Kt2d[s/4/5g>n1cBgCA&,EAF8aXZ<pRHMbf?/b\dMW*O*V-*dh?+gRhT*u[@*g-jUO<iH&
%JoVJ80'n+-8b9,G97^br0?PcnVd25LmUeeV))__a=1Os.8rc.n`%'K!9kB(Wj21&f'_t,[clc!J`N*rp-DmSM*W^%0b@ZtY+OQK1
%\WESWMN8;CC'*bc)E'$7AK\ZiIg7Yi%gg\.`e8;Is7iF]r,0QG<MD?@%q;M%J.*jbJ[K3j`NN^u!?uF_Tel.rB2/#?_`3SG0?Z,,
%#b;IM!$7!"a:^kLkUFiPCI8\Oiod*ZK-j!!'DQI@*tt0`USNkUdJ?KX<p^U9c]*u2Q.baNBFRg8Nsb.Q_=cpBrt:FA-TG!rPQ8;n
%&_g3b(il`/&_.UBP0YjH2Ync)?r$8p);C598TX[Z>Q#V9bP1nV!=(oj/)XFW!^<b-`C#+0RBdr6Dc7r*nNh[nP!0!C11m6@*n2iO
%$9nH-Lo//?n3D7OP&??.<c!Qt+$b8<F[7],63j7a1oMW,`<!8ipud[\bEOci[7MK;<RG[I)VJisK!7A4iNY7;QMK`E]rfe6^d?o>
%7A.A\L1ra\Kl(T@bL[5M.Wc.rBO[25aNn_&eE;Qhb<IF'7Z_d6g&g*f")Y],OoX;GF?=@A(Z)=&\CR/daNoj2#Mlh(\gt[FHc+25
%J4g@fr&mNn$G&s@%Hu<-CA"fDmrZj@_@Yo%TUXrb6OZ7Udf3GV5gq"Ch!fHPh^eEKA'_4@!pM[hQ>V`qF9/Bpc%R*3Li;#l/fcJW
%]BVcelNUfW<c<;_L`ql/\BBoM9$66R8JsB)mW3']l%#DKQm!kV!U$*dNFS&+6#t`Lm$]!Jgm<,%d6ce4L9j8Y0O_kB1C8pg$GYJH
%34?p7Rk7C438d>O7$-Ti#3V#8XkZ#^&af6qE-T@">jC>8fKc)QP8OVoV4Hu*(`(="JbX'IV=(6nXm)`]g\RlOctK79c7U/aZ@7;L
%0dOhebl)=-l6H,FS(0fT,f$+#M1^+?B%rW("pX#4peNo5$3C@F'd$Nq:4#DFLB6hBIboi@aYim03c.H$JaR24/1J[g'$"qVjjFPV
%pSd@t`XS*sN%>8@kY4,KUeL.`.Ch-7F)b8M^s#d^E$n#I*3OgsMC2bZ`k=&V#SP3JQlZeWbP4`:Sq9l-e?#klM\**10/_N/[bLH)
%A'`OcOlSPl^HVh9[jA8PqiR&^)Wr,'LB5en>pET(GH.;HgIjQ2I\=S?E?4H#*u?^kn\j,Q$9M79qD?p:ZYjg[iJC)l&Mf;1F2iY]
%O)hm5#h%2JA4(/b-!A.'?Eh'ulL7+KG?"bJ6)rfB1Gn=UpPWi9$oZ"G%i9F$#iD>FDsjlITC$mcE5@-sNl^]>#PYZFr/Gn4/o)Q0
%dh06[;mZ:qPm1X;VknOHZX*O#d>l7cPr*U,1<,XW:RX(74#h]Eodh,6>_lY8+MK$t!XT=5@%DIZDk*6?Bq8@9'BOZM':e_Y`i8ek
%LZBT+%7ub2L$@.)]po@<FFYp73:)\Q4p+&p:tML'^5c?-`2i1U:34KnhEVX##0&R$!_k>:QA93l00J)g67skg4JU`.c#A+@0hZL#
%1rq?ijmsut7fAO4ZKdX=c"K/e%06LOVgbZ@XMO'QS.g\'3kQAX7AM!aqq(<uj&%KEkMdrI_2JPZ!Sq!m].,IaB+>M[lL5.j:WG43
%8V6$_e.R@rN+SK1"YF,_dpofWlfUG_80ntmAFiT:fH-+hpYuL_jD't:4Z_G2]8KBZCu+hbJ;#4r>Zd>2--%$!'7r/5+tVQ]A_OW-
%S6%U,QZ#0#(rYU20qCk+7R@Q;7;$9D1:]Y/05ok@\,i9Y"shj%!&f$l7hQO3Y+[5<,Cs="mPNqM33Il0AuSQHANL#B7SO-9egog-
%5>CTS/(3D;0MmOPi0!dCa9^7P%r$U+^YhU>EG9th6tt%NPr_](6cG8i2P7NP$fDP\iToi6%f,H;'Fe5F!E-m^pgUoiDpI-"JW0Ib
%]XO@/L+JR>[FqFl+al7:p5V)n[,qiqMT6mNMqgFj$L$8;W&bVG3itb[c:Malfr#)l,*Y9f/jM;ZkGODIK85HToegnk"s_UZd&Tsb
%Q0s7CH45dL1;d;I8LoSe[[[$'H5\-UI%o0FoW(`*Jot1@e(JHRJi1%9fM()0gi]m8jXJM9h^T*bW3J/Sp\S4`UY!i;Sq+jFj<*:P
%e2*@JL!SDO4U/lWgfoR[c`PUhN$n&P%@%[:fV?u,Mm^NZKRqp.<^,X=*%*(@Bm6o#$Db;UR&@ApQ<,cl2^VGghM5*.$s&=X[ADd*
%2$dsFH4BhEABN[@;ra^,C)f+D3HNu2c;B)r#r*cL?joNT>?97WQTf]0-QFLi1W`6GlTW<8.OG^0/$dFJBa<,#+&aL6=o:Bn(3nO+
%,JrAr\4"a+&\JQ<C>71Q(fO+]Oa0?rA,t+n#K&X<o5L7<Xf"`YBh9T'?0AVtKV$:KLUXn*@H9NP=b1hP-g9*;(g9.D``u9V:Rl=O
%lR>@/8:nGLfF#_`Ut[F\Ek`-bXaI[g(&O<0%?o`RSB?#M/1V)UbAd/pp7&%]Bi[t-egj3:XpS6C$0"=:Ys?&k5PAQ%?cV+cFb@ua
%j3k"u"!gGj7mW/p=ag)rPB-rnR!u!CY_LcWB0c6]Uac4'Y@0i2f.eClWT:*JbFDP^6+hFXm7kg-na=Jn`.D_#N^_r5$8-7t2!YGs
%7[d+L^.!Fr[H/29_%GS@^4YZcA`Q2ile,M0jtVE$20Z"[-LV@M:`#nk#A2MCi((i`&$(1ukJh-[9*q3<'uR"*I1gknL7:Q"J:'C(
%hiX"9a\.sZo[EW/^%'a:reHr!m[^7/p,SptH?LpR"FUl%VTq;!2pI.MHt_S>Em&eA6Y;0/k[AONd=KE3pBabqo^h%>.LJi\.38a=
%(A+uI1oo<1A:d4=D;]Hr4!4USYBnL9KF3[B6Zl:c;_<QdJF&N_h3J<M047-E3,V*Z%-?+]HP1j;P=:5Jn9@f<ZZneZo`.Gsg:qU9
%JJB4q2;=hYdV$9Z$Tn$i8!!_0Tt!0Y:X?R'Ea7$=_s9H,Css#6Q1te$d-sf<RU=>Z3g>2*%WLWZa.b.aa0>R"ZEJ"fJ&n:8@9@`#
%=G#@o46Ng[BSqY.K?Z"L3u0b&Fbs=7dZ[j8$h98*:f2=5*&*RpenPnL%2F:<k;E5k]$p.Lfl]GAm[t9bm;f7X!J"aV)#[9W4W5&[
%Zc=9/AYIE@Y)JE'7,C@C%iK2VL5Y\a"ScZ;HZLE6+F&/K[^qL!j.7`QXSk``SsY3`-O-]eIU&6pGq_k;Kn-t1O"nWW9i2GeR)Jk,
%9gEQL\QZu].en)*n+46X*:`?Q@UtJJ%kZ%OLm8P;a0PWJX"G*nUU#%HO=IFBN#.t]'>YCFqa9o-B!GC8"u[*.L@N_Q-HTMA.s`A8
%mF_-H^l6S5$mRi^-@4"3n8j3%#k@,C`<@%UbRTXFVW)+GX!'Hhr=QDHEJ=4>*F<lWAu@irO2)^lFR9n^%-2RH)n"s(@StUT0'uh(
%Xp5m=6oej+l$7FCH$"6:_<o\BF2_tR$-6,P4bq+LMgqOA/G/'7m`9[o<.fUklcjHsBan(Wpi4H3<&f+n98kGW]?giqfP%EQ%jgEH
%%f@05VcWq_r\UdMD<SJ^GXG!Hh=_XX(^\N9HS"(_j5?e;ipEkp,.cAo"`VLIn"pI:a4EeT#,c+Z/_iZmjtF<4L8XL;rkf?`b>@4b
%;G[0qd:qpeQF^_%\Bl4W(h,c65\hBhXS.0LL6(P]:T<%4`f.uRL`ShZI^>B#WK`_0Ft%>LZCT[>&IoPGhF'uZnPI8B_3O#h"(cN'
%Qt6*&m.o\CbAnZl]2&m.!gYTr-a9NNT%::#60U\b-/C=*!\juZe8lM1F_t5t/X!`ClHIdIR?4rlLlQ*$2"#T\afUS!iD#OMTZ"%a
%I\,0R>su<)f,Mi:*dKFJV:`"k68?K6AU3\QiBL6?aUTbucg4`V@6$TT8'Uc:hrn$I>TTE,:qkoC8DRl@Wp"lTLl6>W))"k:^?/QW
%C="_07)ojV'6.GTZq*'4DI-.BS)f?&q7.1O/lRL7]=+hA!5#1t[_-_kQYG3*=,cPkj9V\97LR?S);Z+I<3.@+#_6s*6Op;E5W=O3
%`Q?mS<^eM:-:e)>f(+_Bm]Y3mF7&-X](CB\cXEqL>o*W)3U`%OX(p=SL';q[%gV=gn)Fc#pT=1W#e[?5E.O#E\E`>pW3.bDBLGCK
%Nqc$]E.(BG?A_@6FYl*J\N@$;S\4a-b:C1=ea19n'fQj1!?U71?ct9WW;Vm-lVEFo;*_isQH_j<D4!-B"Fb5+l.kJQDe,dA6TUG]
%lO@&6=M@1b0!cHT"+Fk,jfq[daa$q#-f'ZZjoJls\1gJg]"\@/n#tqgSO6GM4F=b,@?jZ&j$Q16Tkd6U@Om.Y";F#Ll$%".RTp<D
%Ie=R.45ZfbZ:Y`R-tCn,4'OhV%!@1tDF$/>s.DaNSQh8G_1i@IBM%q"M&)#pA/>jDl:i(I.q,5`#[]*nP0;e(.>K[!45[`SoW&#[
%iOg/a,6;q6@d.nF"L!Mj)/gX>G2"`cJD`eL"%nT+gHRWCC14h<QD1"`AsYGuGNs=Qb.`f<WETHIR_N^Q:WgL!>33Ik/69^9j5$^Y
%/j-L%UPc?nb!\7%oHNA`L9e6A*[@=UIA%+&*62$p1-=\`OKCX'm.t,:d!UUu/$/Mom9$^4:.!55XMeRtK2USMM"jWtnZ>T[TOd(l
%g"5n"ZRq&lQ`3Vo;1<72[&"$`KaLPh*A\i\Tn:.'IdS6<Ko5c<D?G#R*>$.7+[Y.R/W)MJ:t?B06bI<qC7tG3TdL8#Y$G2(2U2PB
%[O[*sd#Wn9Dq]d,3_R.l+?L\*rQ^.:SnT-W1*+j&REE*+G0d/Oe>6SRgb;+IZ-mV/bZZ2KISYrDkn3YgEClnZ@4LK"gb=`5bEkJ5
%MG@/_&dnM#TNZtJ-IE@s:@rHZbR+l\^U)Ye0D?_p.p^UeSu\9P,>h0\(%le2H(p&:"*cBk((Ee06M>>[1<#MWFT!7/b43Z(3aN&2
%o13*O<AA'DNZ$ltX5GRY/HrYnS'>ZCHm+=)M:Z1<*dMF&Nn6:D&4e-5,hG<BJ:*UQgX&)/cp;T2c2Q7c#-2C+Zj+?/^BCQc(``Y#
%EKAZL;$AG_#f^&4OU5E:i.u26IjTDh'V'4jgSL('`c_NPXPkN.b@Rh@?3P8nJpXo'Au2X(K',Xtb$h@">.MZ=Cq6V*rgS'r9H1Y.
%U48:5;gDZSV(kAD3j:t?euJDVi-fQjGk@?hHGBHuiQ-HehT9>4O(L2"`?#/!JQIOSJGj=@cOjDIMTsLi5Q5s5Gq9N3R4i9\Iho[[
%$P)ID5jI$=]bgU9mD(:W92KUP&<+p]\:a!<B#A1fF]k!%,]EZF<QkS<1INQWeCeej+o4-e3G!#;^st))B1U]L]KiBN5Cf39l]5[-
%feKn^'4WcuC`sj^j-'+:$KI7H0HW%;E`Bfl.KNFYi]g>I4cj5Bhh^.eKAu]=LaLFIPbLE)"$++/rL9o$>P>uZB@AN-]1kdr*pQq<
%Tcrbs)tq!)Z=2YC&P/s1A,Mj[>4H[7^D$S1pSjjQ_g!l4C1,sRf^V-V:7s+YpFjTBnL>K%lb/7;['gq)&e2n\6M>?/Y,9U:'>kM"
%cehTDA1`K;V`6uag@U<!*AOW)VaR4PXY)-\6Od+g?c_*u\:3Y!EB-4sPM`?0Q:&TC0lf*PB1()9og[Lo9A:4n?96i#Bo(jshhtge
%J`F*EFVR4AhKca.k&J_qiXAU9WA(dP,+`>kMan/dT'F*s7EcBBd`OZ)^KGq#?^EInI\1,Nn.4mRbEgoAI?aHr//k^u<"qD_'`DOR
%P2D)pHp!o=:Yb/7g[S$+=[GC@%$t`rpV/0@8b<c_fE3/K%=?mro(Fs=<VC?'S,P2#q&dmTKFL3`Fk@F!%/`q1C8%de-$24g+>JS6
%i[(7(k)VI9q"*r&K(8;Xm>*O6%?,JU?UC;K%s2YYN%h2d&3.\daPPnmUKu'W_(,5NmCj/05gSdYaChDmf0jS$h%=I&]q7#7j&,(W
%59nY8,o$13k$L@Bjtf\V9J7l>D6=C^7uj/5Z>$g=Shi$o\+i8XZn'g;jMF6"=2,CHm]J9+-8M8sTA?s]c`I:T_fsdQ_0'\78-S9>
%bmjJpb7KHLL/jY,aL>k`(Mt*g!3K1AV!<UXq@aSMq!``N?MO]H&3$aP][l6[^TsS%>J6\US)RZpV(LVWT=5Jtkg]56LET.%aacPh
%n0r\6qld[qp+q,<d9(^q7QE-+-![t@+D.GFkqf*,r/GOJ)X$A;X]<4(e63$PdCt_@p9bf$Fc89K4n+uS!9qJGc6#o.GugBlUS'gi
%Bs\24jG^JPEd-0X)o3'WC*gX8E7nXeOYmOU_mrO!\cM[W45-I"D.[iL112NXB%mfk%&!<#n.VFo3/QS?c>n:^q%D&Rf%#P\SV]aO
%pJoSRg((LR4`UoFcF"n4m#Bd*2H8CoBa7gBXU<0CgDs7nU9gXjjAGC^^K/NVZaJOp#_(]17<W?Rp8ZI-($Q;os)t2_o/aDPO&no&
%.jkRSYf7>6b=BZd!Bj))5UYgFZ]0&5mT8f$Fg>@_"tMC%@WII\hmaNdEa&AU@8G7T`==GC/H"fY/Z9@j4E<#dUn6I("nF5>mGfpc
%#tMl\o:\Kb:(dE0\cZ?,dq9401B]k_L+BH/)dLPpeb[^5NA"g,E:,__'\Q5i92:Td#eQLq.O5X)BV*Q78&=]ACe&:'Ad8d/W"]GK
%hp./<#<&)+]qmSiFG`cEZ@ZYc7X(aHO;n'ccJ-T`(5A@N"s-rr5eG#Y0d[#h8a5RA:UIpu>a^qnT7h+@pMpnefk?`NVc'-`*,?f5
%+A_7OVgIK<jD,7O%!20L>keM<NgNa&C;%4+IP:B=4kdf)4>Jh;:cKGob^;R@J5PL)q1N67kDS!;5;eA(j0l:LZ6XO6*WP;ne9CYb
%Mbm*@<)"#9)+:L<N(>IP#T_/(ZH`.r>d%K<Du)?EVZ;<u(5TN\PN]U8$@[3&?uCf`D^K],,$5ge-4BB,eb#SpWE6?oIOg0c1*Kb^
%JpE-E_H:.K^O%Q/@]'d^^;ZEm,dL3OYGuh.$/Nc+5R44R$J@5;RJHIQWSNM"$eQYB_N!n:@Y0N?ais)cR\0YBa<B"2);tJUI4_LQ
%;5,1<:da'$X)/]WZCeZ&<=qjNcGNbY?h0%7AFi(8[KEljaam9Wb%Wa50j@fHNhfqYi)'9F)(]/gb,1.hI=qnV6D8peoD1^&l#?E5
%&VIoMHmMOb#jFU>N1]eObG*4BN\38n)6WKZ8P,pX]sSfL+2K?h-(kMhTqh"gkdN'HaT(@k^nff(/]XsNI%m?YfFAM[EYB%*&7S_t
%^HH+K7Yi0[OYD;YJ[YJb8#A-u%'aD8,Xl;m!:a,)>m>AjNgRQ2%*>T?RlH?NR#]a?Zl<:JGY19KS'WEd'\9=H`mo89R.W6Z;PjO!
%X5sUp*2P)DXd+,E7P6d&c'EV`7s,/7P/j[tIss2r*\$3)\=m/_ZL6/WYj3+"h`_FPY4=StWiDp)RoqDC`aI%=kXkK,0mm\;PSO5]
%ZJXNLqYT-oV8nTlhTdRQ(k2[RFpC;gk/ouj:4@MP]u;Ym!/i$B8Y75@p+I]+]kcG<9(I40EM^EB0r.;/&!;u:5Yn]ZIQ>X@Tj`A'
%?=Z:)2*!&o;$+uFYq.B6bbI\bHfhE;m`qr&PhO\l1Hcd(Nr7^B@"r\A3"8jRNt&ME4[%A322T5.W6&q;'@V>U\X3/Hlj#_c.&$:Q
%Vb]n#(ij_Ah.Kl$JIn$3ea4J&,in9rj,5SXlt%At>kZFR7[.u>0jUYoRD50%/ohl.:B`LAEKZ.2P`Wf+3@D:IB<I\)G"JDEWJM:l
%jm4D^KZI]I3j'94pNKOS&I2uj%3CVPNS'6fVe#4cijF^#\ZS<;[*@kqP_W-0l<$,SL=?fg'Y_RhQH0nk(B&bF.#f&Dg+U`RU[%U>
%`@bc#hI*.V,@s<PF$ej7:$&&hl2W^Okh_?pH$lOoSRr$^gd\.EA6?:2:p7/H0Vnplktj4/D/%&WWXfbj.G3TCS);;Aj)W?]+*3hi
%W<TW1(`6RI5N@tC0,20<"?JME<HC0ELDB9&R9AA#7oB"S<!<D[\I,4#0"-H3L$/bf-Dgbheb@Mob![C9),['6`bm4?;b!lJZL1q1
%VB`D.f?"jjQt>ttoFh_tU^r,@s.$uBP"LhA.e/?bg9iRChoO[2ro,"AZ*d)8NcY3tg._1hUQ[\Y[e8]!!BVs?2Rb%KINfSAO`<N!
%D$a/&ADYLY@_R!0r$gniG:o?e(Q"4/iV:[Coq5uGP)S'@DC;0h]&>aj`^i88IV+c\^1eapTq3cK.;]AO!bOoiVV[$%@I,)>U9R:c
%)+.6E_Y2XMh`fKuh8's?G5jl\l/%b#5mUgf,`CKb.NV%7O%=oHZEb&T.j:R&n&DEp#E6"5_#I+[U@TGnOH\?oe)&"9g#;u;L+L'$
%[=u'7*DEACEN7c(W&.,[Qi)AJLRoB;?1dE,C]lae0Lcp_VN%F*)t]HA[h=o@I)17Z3h&8l;9AUXT0#t-BqJtBR&OD#9UM`?A[N7m
%%',3m9HFI'=58<KNR$nm`H+gqg9Y35dl'#/!QmmOKm6TI,+@mVgpMt4@`0lBPOf]uW"V=t%>4&T0nE5J)Ttq<dWK3EH:jF4kfclE
%gM]DgL5\grqfSNZV$82BEF2^+gh@&L_hP6S7-5uBNmZ1--;E8OP%898^Hrsjc"EFD"l6%tbK[:NU;-cW`seo2o9Glo%M&:Iq'P\A
%"PRIsFZ04"NOm$ga5'gj43]=_]e4g%6B`so4>2egHU1`\<3FAQ71`<R`SGsEd>Hs;e4.dnO-\ec`]KYtn7;pF<$">Mm!,CRk"^,%
%5^=mWm;'?s4J_$lhp,5rb7&eA$0'/>rI'gA^&>n\-oB#UR1U01k5!TAXa144ATi"s#P';,=(\2f;mXQGs&/@P?9OXFq?QZ#8cG?b
%XJ+!S(^7TYNK7L!/.o+5QrakQ7%\:N>.O&-G_4#`aH29'A@#SBOO?RDaE1F?EDn"o@cY2,&-7p)j9&HX3kSaFT@mlqYo@M6D-'\V
%?)]eqE2?Ju,`BKO$?)8[b*th[kQG/.VC#_EbZa8Rp&"P<c:]&oQX+uFlFqS)b8D6I16R&`4c4FlHNLg3<"ICi2Na7J6[9OT-4b]\
%&N#J8r6.$&%,a0*lY1)7+O/^9"k5PCJ8%4!BCJYR.BCO>Al"8VF=ZH\Hm5Ch^$deYe*.:,BCEsKXmT7mBCQW%X1LCjQJR^?ABMl"
%.bf,*jhQk=L>Ih0,Xj%2ooQPW$??sr>^>2$/b<#L[@In!At\$`ldE/-g06Q%G7mU4@<KtJ4j7d5'YZ,UT@X3,jAB_&*&Yc-l>+MF
%;s[(bohfk`q215biR$!MCh3BiD=t)^*G5;3L3eu9I<YM"*P&u`!Y,]SQ4V5)q?]"E6S%G!0LEIAU%GM8-N]bL)41!OE#<oa1'_4e
%4[fqcO^-Vl9r*%H7p<bmoFT3`*1*IqjhfkSXMGF.qnsds>Mm=L9)78$FW>;2L\N2Z(.@`\pJEUg--Q.k<hK.8bCR1u!8t-S4jnH0
%h5&B(d<N[83YKaYQE%c1KrOl\gqLFWk&g+-G9[mQH%"Ns50J%*+AV'A-KS'riqip%,D.YVh1Q+-61FU9f03Vs!P<s80r`4k`ajEA
%=F>kHQ,Q\Q251pj^u]#`,$pT"g&Yl%H]ot'l&r4\r/?K,[r04@'Y.'kaO"TcFfN-bs$9#OC%(Yghc#4`h&8fpd&1S69;gBH5@8oQ
%4tqR/K;4hH!"*QoeZ+5%FM.s/:4iYZWTfW44?mssEBn8)e%@'@2hG;Eb:QYF[s6,>@IC5ZKAJo`3N@1t,oW!k4qo:u7pVg.B<H1%
%A>lf0U05XAQSY_ld4tW!Dn9^B1\NNQ85I_$fm/;++ltdp_5S4scPh;HRsgQ$K`()nM,7#93Q.(fMu&a*Kn#!&f#rkU:ObF8*4&+P
%Ta3A)VDTVf`+u^ZnP8e=^H1*Kfr:*5kXC0T%^0u7AO&ig2T'#rNk-&^,);&cmT_fM\s1se&M7JDXU:O/"VH24oIVa'ATsTn>f[$^
%m$(LM,:]a@YfY"h>a=;$OAdkaG_pGsM7@6D@"Br-,QJ[o_`G<N--U=/]m;WhpK:GrSM"NXc_\^FB>XIU8"Um[CG=oojkN!JH<++8
%2>,O,9bkV$k0(!%$J=;f%$r\gl8SWZ?Epo*cFBQ!SC\W1pY&cI4NGLRoES)j0dF_/dp&XiN71KXJ)WBM.SH(^f/cJ+jTtN_,[s%d
%<BN*Rc.==Sn$et"*g`p8O3'*"]7/o>hP]6%r4G&U'ULKEOHUa_Qb\e61_3%/oPCg2#-P_`3M<0c'??SX)mLe?B`-V206lS#aAEd^
%c$Q&Onol.uDVm4tV:gc36qR1&]PmGGk6RSWn7NYYOcMb$o3QA]aOW[P$8m-ko)R"n'?cVA`Ta(,RcfP#.eecm8%-f>eDYbp=Jh`6
%/l%n=o->ZlGQ0tq>XLgN_9;UHZVTeoa)tc`e&R%Sa#t!I>C^PPOQejr+QkAe@aDGb&Fb-#pjp?i78mW-Xo8/Kb=qNG`,E-^,P!8G
%/W+]9*h2P&r^-*!fc].%)!DPmYa#?GiQ=/DCn^.9M:)oTmM)G?#`^<V`RKti7Io:AIST40/g!^W>P8O-KD`+(C1W*m/MY`H.$TU>
%ZRo^JEH6$elrt0"HkjL<rqU!bn<3b)B/S3X<=>H.-Zbn.ordVdajVDlB$<S`.#iflnQm]qfh?.;-gF1RJpk.EGOofB``IcJEK6"G
%+k!e&9<kb-7FfTtKpt-o]bH/m2COstoLg_Q,dU91cTgt`6*-%5rnO+nZ"4Td4B]p5&6<;.RnK:5j=qDj5uTX(Fnsl[e&h51[!$he
%&f*o54eR=bIX@-3Suk'*FUKW^i567t]'G39g0($uQh-js>nh.S?(l*j':chem]&gl;p/77q70HVLdgJ12=$[68/In^=4.Bbq-q1$
%loQTNc+9D:&l[qglEAr3"=A4>ejQ.-:FBUoko=!6[I0Y%]1C,bcGn#Wr2.pDaZ3%Fb6cu)71>46DfNR;.T]Ib_7/KNHsB$7P5i2N
%Tj3aE(r$'CfW(7dj8-I.U@o3JB#mZ?m69^W)nESXdSpoK'0*G5L-)tZE.fia9af?:I$D7Vqlr@\=sR,Djp-i9WJ45L%r'KBaVIpN
%nJAHdW+0$,%SmV0X2tsOkqV''IRlD+D$BVL>1KgSajXIAECLl+M[uj/O+Ok9[HSQ/I?6ZOqi#^()2eaS;@7?f^oUEUGY&\tQT(Mk
%Js%X]<P%dRHN.h3336V:LO"-VHptN6KQ1!uWTIrN@+(^IVBk%L)gQ\W>J.Zd5YE\d1qHiGf!A]d5Bb3#qKn,m&XqpkMG&I\-LKd"
%.38::aWRBNWFt0u$qbBrWDm"&N+T3dE`/t\;^9FE#h1G=&'8oVd0b'\W#Nfs,>]T8Z]-D(CKIKoLLs<X`)R9d)N_2)OI+!`Zm?JV
%LiMIUYWQi2:0H$d#`I&IQXbkRD9E__<`6n-jP^IR(,9/Rg],;mc%:AF$OGg<6/Qg06`HT/VgV&K#,(7L1=C)Ia*oF>nGl&P*N=[F
%bAsph[GolWd@+(MeA1qfjKsV@>E<Me&$m#=P-s2t^eAND4V`,EH1heKH$Z!n,\!l]Fp)^DYZCh`GLD6#Apd%uL87\7E<C?:a/D)%
%V08^#SVRGd#!&04ql498$mNq3lS_FfK&9pDLZ\s&,-\tse(j3IG@sdIZ]!E4C?"RuNk"93"WpJK/hR"rG2DX-CqduadllB(a0I07
%L)igF#P*"Zbb@2?Mm^`j<Et*2Z$3M[ZG4?e_ai79i3t+\!S2b;A/KKhVK@!bfNUtc.,MN>_@u?pnF=mdJL!,q>ihaMn]a^uWX.,F
%.9d6bA?OC;TtsdWLRU"SlAEsfA&4E>HCa3q3u*k#kF08"KmX0lrrAsFZRKn0P=i7RM2WCQ8QUNX\Ogb%_Yi7Ae*=(J#L+Cl(;C%d
%<l(5iY-a\BpUP*1;f1DfnC+e`=/`B^-IqXK[i<?@Je/#G[2@?"c2#BrE1U+`0fPS)a,4BKkuC*f#Ee.IMjcgMK-Nue2HJ<.0U6X=
%=>!&[N;FT)8<`.YY2Nrh,IQ>TV^f0L2!4MFJVi1sCf/M:ge+FC*Y-h4d1ueoN,V1.Hi0@(hnqOtkG]X92@`1n1oXqha(Kp!'AoK_
%HVri"NmM(E$cob/7h/eHOg3Bt]p]XkT[74ccjE@=(IAE%\d3"P4qa6]b5kj+a-olWr2[+\8"eScXdXuDo#$QH=3%-]nIbK1\cXo^
%G!-qg>R`T$]n\Af_$B:YL31RWakpD:U,IXZ@-RqhA@aT0bG5^f[eqi-1<,&R`B8F(_Co"nO=s(52EIE-<b&7QehCG/:>B#D[APC`
%P47/F9*+$dJp_#pE?]813YElos38fSb=O-tqAruVV=mHE*sEPN+3aEC=K[tMQX0Ti-e8m#^IKS2!gJ?5h"<JZC8gua8lfkkJto8h
%M2Xaa_:qB8'1[=:4d<&\4Z'GYoULU4Y$7uDB1$K>;1ETOQq5'kZ;bGtjpamnMjD@!#k+?qQmJM,"h-r[_*eERemcXG=>*OI%ER3r
%e_2(paG4/dXt4'7gZ#_ERM1*e18)DO+50IlOSVuH(;I;+/i0%-8G0N=7ihe_Ic`ZpXeBt)7?59?^6,OfM=/#;gPqP@f"ca#$XI@(
%Lb!+R#S4%$&5$8!.,Kb:[b&9S.(%f(AdmcO=5TOLAj+;-3f`S1A4BWV"0B06:@9?TZDP^SB$mM=g)\],Y'ia1"`I0]F:+Vu2dZrA
%TN=-[A)053HRsk31uKseAh$(;/9d$0ZCXXNlfUa0R;"/"_7>ZR%]HI0JG`0[E<[f]-l>,"X#r7TjV`=Zr'[`sj/#::i*P(QCJ[*C
%_dQ=$;=G?bZotf($h`+l+6XC@giuoB:<L/"]SBi*6m_O"j&PUB,Ual/LLpgKI4P*[]n1CS`T'b#;7.WP,^R2poIS^>d>ca6>]ee[
%Kk'_q0)O=85)->8\R6S;Eem]$%]6bK5[R;J,mP)!E,7EK?!N6$<)j0%EZ2h63YP':R`uhka6aqVQ^ID!<GR;%6ro?hgs`cUeKGDd
%3j=;05TCu#QWc"AaC'F!BU02N[R=k07BA+W9[HIWK`s"UfYs?"`))k.>_KABFBV16`X0n_*ZqTDqV,4:jLk8IV;@_b0/0%H"!,i5
%CQBm7bp$`&+$NHSjALme!Q/Nm>^8/T^(pS>=ZN</Wrl0)IgI,I3/b#+&D>6S:6c=W=4*LeYQd[t9H+Qf6q#&,GG6080T%;+ieG]%
%#r)'6-KMLZO$-o.Mk\1t8VSS*T+^H>Utb_(=W1p@Ch/,Jks/tdmAJVg(JO8(pf'CPS3""f,@RR&I9ug(Bt%ft$*rrii>7IlV,SU8
%a8lUV5_5>^cg+>,68MZoDGAf<I'%rKhO:JU;9uOVZ8EAUMk(Eo1a4V.nZLSZB@A/uk*DJXkSgl=77nK=@EEZACfCQ^(KXP[9TKU_
%Tb+$9'U=R$b<AH!Lb'JXa@CO`XtUg1m*](50-E:\a&R1+^7oWAfu9-FF>I0&q(3T+4&J4Kop?_7c[ET)b]*c>SELLQm^1NZbdEr'
%R`pFZcVZJ-%D?:jjj"5BHdVLNK4'[GD]0n[cD=Yk)s43V/UCbDfZ[gW:X,3UYA_1X?mZ>D.<E[]#s8]eQsN//b=6/+%/5fa_-?i+
%7r4r\0Tjo8ZTV](HRJUE4)!s:n7[MrmSY!u%,t7N>"-L*g$YtKjkQh@Hu](Yf`sWCD9/HfW<<;H]5Uq4Yb7+qdRO"?g[B7,]u]%-
%A&V)Y^j#ok8:tW:6[1!RJa]o((--u&V1GHgQ>haR1XCJBe*g/Zhh=H%!giVrF,sL3aaJN.@#uCL,ou_g*S.?M1@PFWe]5WlJ4I0&
%#c^6#n'/F\M-gX>i'[1IiV"/t#\R;M>?J*Nc"ac2ZZ_$m\Qf!!r=s>Z"7^Z9R*Tts+&K#VM[#AVOQ<^%S0O53]7oEYR,aB1).2L,
%;V@U"_qb:IliW_Dh,0">D"#=g'.>,OC2QY\6Ku3aaqOCmHh/nJl/eUIDY#Mm5Oa))3K%:C;+'`I`EDE[h9'Ll6t3,V*JM>P^GW1>
%;q,p(WO@'#7qs3X>1<4pHE'Eg=c^*-blV/o.#Jp3mmY!><+p=&1RLPu=f^!A.R!3dEPY/2&0L1RT?1?)UdML*YcD.C:^02c=t1V$
%<;00@`O!Ps-m!iW&t8KFEZqfgc0h(u[,4hM2,<W#*SlG;`b@J`<`dFjp_GW:`H6e-lf]uh%FgT;GEu/tAXo6>:1P'7&Ifh/XAj4i
%:9X2d:Cc&-.#K>cRGg:<m^/^`n8>t7YbW+&2^--LS<2Y(?A6"*%P9\N76\kg/gus`MEe1We^+5<O_h=<GP03uR4C.b^*c`l^YeYb
%oHepVV73HKoCs6GgtjX%omWHseT'!?qdEK)PpIY3K8C<QP^$kFAn.Z5(;Jue9n5cZY9LSELX;U;MM?CHAKRKIS1&#MTBqJRT8$H4
%duS(F)6m3*C6?>+m(m3`A_gu"PUa0-:[aZW/FZJPI@Ip=[ua?GeYAD/:9ht(I@ta(5s!4n#6uL^.lhsEBi32+Z7.<'`3QM(5acPm
%P,_hQ5(ZTa0NLedFpGhqQtPCuh)eN74eR(Sr)B"*^Ga<unAksIH/3-t)IG=t^ZkpZ,3j#>RZ3VJdk!^TN@UbjY6\W@,.+$Q;]W&V
%_]trN"H=Zo*WlEHp"7cKGa$p%a@sf+(XLX9U8Qd!;u`(VB43:Y?qO<sSbLJR*d\jHP79Pq](#7tHA`[b-gtTl>A,%OOO>b3+CJD-
%WT=N<IXW'lB'm2W(Y"YM9sZAeCfrZ;8SC$JisWtipsRaTZgr)2'mmq/C1`o/\B@=s^tj83]u]'i,`+*^2t+nglsPZ^SD[W)%iCoV
%c_\lo35O_X--+^aeC._ghT4P[IZY@R*hi:ZN;8l7;?#B.hU"1)NXN)W,JanO'oA[C9tLnjc^:[`X4Y`=$?OH-J'Ff58Lk<bLaW[.
%OHCCVWTPa<lCm/L+Y@#^>N3gVhu(W,"hJ@^b(r![L1io#,P_Abho&+PpX<B)RU,"F3l'G\;Slo#U]<fp\HG&d>3k'g"]fb@EfUof
%30e]>h`abp5P&t-:;Y`).]pU%Vc=rF(Zk`QK)^hsc*AYa5S9n$80hl!=Gl=Elj#^W>K-&Y&nYOEqn/ZQ7a+>FJY$ENfm4Mh%;5=o
%:Ll[t+Aam)*Wd:?%0S:lO!jB2QKf=b6$AD-;;2@[Pqo[6QU5BR5\tLhOo0ac/YA)8Bo&u62Q9MW6")O3XqE6sgCGuI?"&e5ccVL#
%%r^'oV/7OKBl2IlIsn?AFscY_\sBF>,j]_BRfHf,^O7k-2CqGAe,?M65(sDY`)A1pS!l3T2!8m%ntW.SFAqkna`X3j><O=`Ho,@c
%e$lV)kZd>scYXmN?E,7>Pr1_cJ)%0:F,\%a'm8D)`@TD9g:N*3Lo71a+TYqmh%;Hg@1;7pY>GN-03FO5-WrO!k:#lSX=a(un.UO/
%>h3@&0qQ?IaYHHk8h]sCq[%S3F\cbtcg?&CIjt5F^9rB]=L1HRVRD=Houam15u4eqpr/Yn)ts5sU7_3uC\o9M3RO7U*e(j>.3GAh
%6unGLZLQaU3#61I6PUpO1tMXmp&gj)W]H=WZ:d>0,O0mEW`i%F^^MJ_a1acq\o4[cB6:[m($TXWdI"EKT9tjlC7k0(DJMp1R#F13
%JQcq$J:E]?fG*/IJ9GiMA1D[gp[q\[gUi_N$r1GFFpZ(lPifG*ZkXbR7eZQPM_ouK5e94pPPt4#@6.r")be]W-$8iWQ-7=qBfHi$
%Ene?k^%iI]UKrn<B#>[""XEA\fai0WllO2/+#icSgt3pUJT.OglDb8GU#''.p`t3E?Yn;j'P@SYNbQm<kob3uqLQ@00#NOXBAZmQ
%&e[sYE\0%(S5\nS,^YGVbQ0bc`I,4HR&BsboE-Trao%Ep_</JrcA^ONd^R_B>+N"U)c87Jn_sCK_b[3Rfe,kE,%[)O^qt!6V$s:-
%0j_Rg'>!@s[@9;#hVo?(T7=3>!$I\s!L<ADlj#R!%O9C"\$L.ubNB:=_u&F7rR11pD!['4nagn@c[;UqHW1$5i?1JsamMa<pa0k"
%6)W&ojDSRInVdC:U1kf,U)cgYhMQdA/!V$rAqd+,7C+mdpd(77np@IA-e[8?0;e9h:sj&sAO!C*m[[sK@(Ydo/e#N@;LZb0HUj"m
%rDD'Ki*K8"5q*o.-h<'h\a('+hqbX,9o48tN7InR<&);MB1)*(Nsn'-`6nE2HB[R^Ckd]J!Ps3&L(??fr$$&J5N]bLM7LIV#(8Y(
%fdn[(Irf^NB'#HZ7`&Vh%AM6Z_4?+*9!hP=FOu79^+:$"LD:BI<1T\1GF%53<O]h^chAurNVl7H=k(72ZT=4L1t1$kB2q88;/q1`
%*5g$b7Yt'a'<&q.+j(QHa^,q;ZaAO(D^QSf=E'_:fcAa.4%]VO>Lf#3b%VPkeCt;=d>@A_W!GnLZ7Ve6*ZE2\Q\1pjJ<UN.8qXE<
%&a^s'3B.TiY2Uk&nqHWqO8Z>`JdpuLg1P`)p&fk*Ns2uT1hEj/ZG0=C.Y:-;U8bq.U/FH-4E`;o&u5Z"QqG)0oGHY<(-gVUpl8s%
%:YXlN"@#/I>b^QeML[HK;a+]U;Lt_]cj4D,.k=_fm'kR1U#o-=JVMmj;:c@tVd's^-1[)"b6"SB;K:N`#Ro!rW(:qo3>Cd?*!\S&
%ad6q16a2g0LR8>>,2?*q+`i*DQ)c9ih$!+[]H/TO"3RP+T+FGX4RLaT;lT)9-E/gL3,%@C=0hW60nD.cppT[I9O+TnOUj,PlIYa"
%<i[*WAC6ohh1.g!GNT"/C7c!2W.:*Ec:4*FJ`o^`]Te2;%9IRd3*>]2TiNq8E?LR+3.ttb=mju^bU3Qn<?!`^h]0N:FOh!l0mEV#
%O-1*5fogk`eCGJmPN"iq>V.esZ,r[]-BSnIF8VKeQr^qcV,2EQ`)UG?,RN]/!%i[S6U16T_b!nQ)`>r4Jg)Bi+`dnLY^s@1oR_[n
%m_Ng]C_Mhu:oSG"4oF<hIP&`*A>3V8j*.T`;eIp"+`/!ohJ8$YqXea^b?]nf1Ub!*"53_tl`+VUbo72C2(_W0\84t%m;\iq<io7b
%+O%0ncOk9%F6QDSZa3];[`1)&J"Pss2bBlE4amZ.i=je$^nK"o"YX+iOE!DZTeT]-p.K9d.mfB<BNiK^"cuFWltd]c+WFl^_Y^Is
%4CABgnh\u_i4AVgnZ$%`Pglh&TfSUfE&g0FK("^mM<AB+aS_$ZR\G(s]1"5fH@U1h`&lO]:ic_]Pg-Ie0L9+.1Unfh[ZaO2rXl((
%:Pm@7V'ctF\NnDCU@n_jj;q,pNOAu%J8$'TQ5+(9ojQ6\(Gu6Sat\^Po-iY0D0S)c:>erU&4G`YSCi<ZH7U^pB&^&$aI+Gof<MIZ
%m1lZj[-XiNgn,-V07QSP8pjU'1s`5ABo<.JBP'S.OIA#U'Q#HfTQ].PSNW_C=KWGnf5%u`IOqs]CI9dGj9WRF44e4..+JZ5EUL!c
%2i&p22X9WHKc9Gr@nLYe*mn#3e+`*haMaeqHKp:d<[1?<(aCb/1Q?1VPHWO`m=EJd,1ig+E:RJ<Y7eA[Mm/Xt29[Ai\2(36P")=.
%9rIaG4_A\o)`_)f9-8+9eD2/XEn9"kGR'?EXY)1Om#`$S89aJb&IZa%Ir/fs;s`:>1VmTq#Q]!abX2)P;<D.n!P('Up;kY'r#imU
%K.e==EWfGfie[EPLZ2!m9?<AV<8N03`f3caB$aa:"1j^h,31%Pi?SVj?%6?-o3[a".Mr5_#$F5>Vp4KZj+KP:ABg8f:Ht.:I_C?_
%@H],bb%dMG_gN0\ekOB4JDp[!6";AhbS=OjIV93rDW!H]+;AtgCu,Ve.%$rBOVFt5OGrm3[u:t7-fV5e+<[t8.T]VK(T"6@'d2mU
%Rh8_%f7_t3IgUX<+=nj3IONh##2"P`(KX;c@<Q\1)!^b+e]`7^Jj=^O>0F!Ea#_`ajX((&aio='on"`C(3BbnBsMB3m*-+\8i$:N
%[DJQI8%*7Y:"K=H19/*`6=5:cEs5X/2=[!@oaX#Q`Y9!qfil2U"(X$jrO-P.%_ut6/\,K6&uV4T=jU_&b<m"QT*#n!TbeG4gGmY#
%E:\gM42;>=RS!'0;QpCabg;:QicIJjc6GsSMNhSfkI>%;mX[0:Yd!s7'6A9uB'M^i0?'A]`3@R"1m'8Vem6'`_=R*]AUr;>YmT;(
%W5kG\a+UEB16u#"'r:hg(XLp=Ba&3@7'[\[[cqf;8?Y]dT]:E131HI5_T__9]tNkedNLe.hpWtg,<9Ge1!AY;Qb]uN62t,bI#MV)
%0(N(OCfq*W`_/U#(#Tfm,6a&[(U.<D*IWRZ0DP3SNS2/&KiEH7B91cI(r$QmF^L7h%MiCLSO_&M[2.*3a\:k2/lMTY3G,\BbkZq9
%VA7a';>%Z#4LMnN[h$@H54-b8D[/d3O7;P#-6%!JPT/&!oMWql3S3jsMqIc/"9C``-ltJ^?<\P-\umtt&X)$aA=O/WWoLL5EleH;
%NUr^^B>_DlT.as1qdGL(r44k^L@W.U#!1$@nEQK_T+24gQD/s#^-,3MM?hGhm;(A+f;FNKDQtS,`b%8%)RPK?^M&:MoGJ&QnDikL
%3PRh5#8`1O$Wn%X3XGr$F,uQ&E$)eC_I7n_R7s1-6?"A`>@>jF*m8[T3+t^K)3m`<ku[9,MF>=63"R:#gX;Mco!nui6&u8NCpl&T
%C<?+&KtC%I3WM#Ek5XmE(DVA&.N<%Q:!-1>TE:51`I;bA4R44_"IACD\Q@<7iL&'1%qL#\gU:gK?kk)lXuGN5@;)%lgDd-0#ZPRb
%]u_tKiSm;32^b;h,ZXUcEEQRlOT;8I%1W^,D66@?'+kmFV"8kjrYL69)b@,D?)#RPDm7A)#W\/+4'Ouup8@*G-,SRV+N8Mc%UM?F
%/Ckd/83faIbRt`@M+l<=E'Q(LBW$1i4W:_*d[^%Gg#u'cEdV7-EA,iiRdGD2lKb8j&4BXpSgp&p663JrQ@@^i122nc/gD8K8.^*P
%.#4EC0@4ml2\<R^alG2LVG9!S.bnUG0k,;NG6>p[nQ8`949SR3N*+N4+P=-$lG_ueK7>i;PVY=l%n(;</?^*]A14?NN[R4^nLZ9B
%fMrkBOJ_B3k3W3uIEq)'5Sh7kJ?W8j&<6J97F6Yc2Rq6jD\aid/d3[$6%l3`]L;!9dIF#\5oaJGB7cPhZl(dS*LkVI5?Sbf=R.rK
%9$s#qf6`u]pNR`0Pu<T+6[;c&NDGn=CImq%;RkGF`baH8q.e3f!m%u0"_"lTBD"NO]CF53mC8jU3$1)-j2?tZh#3qhDet`0,MbuQ
%Gkqc)9^;"DO@?:>FW@<;<3SGG"*^U[F:_Jsn.o_"+[(u\,Op$q'B>51aFZM=\r^#,.D]ehEfO/cJF)?hWc:]DXAOL[k_Vn&H89#f
%+hZJ19"&'L*?WOk%ApZX\p8L&>$]nl>$/g.Ba-5G[5Xnu201h&*&jg5^r9qWSSU<Q7`$n)moO(G:lUnp7+O1;0(mYmr!$=)N:Y=l
%?ZXuU!^p%6i)I!&Ra"P$_ar8]qbM@[Mj!4aJ0;<T9jp'=FQP8&(0Xd*7af/>.`O7u;Tq[I)PL4j7o.8K84Dut7$U=L8T9>d)&MM6
%SfXA,I:ua%YOJ%P[koOI;jF=n=D;R<r5#0/=8pofJJ0O_ZIPF]'tb&\<)j".F&&3Mq6cVN4BX+Sgi7_L^dK!FJ3gm&nuFd@s-S$g
%=F96U\k,j-k3>=c,A9[n`-<%Kh6?f%1o^>P\h9(=9hD\Gd2SlQ1p]VFalCrElulZ[Te^;!op%rOD&aO!kGibV.(41D\_@lL1B^0Y
%6uJ^rcm1c1S@hnKNCsaM8CE+m`9me.X4l#i]PUVPEQc;4PfQfM>pqr'8i(:CSt+NL:0Y5@EO^iLgCt*$,RLH?"kc^Q$p]L5BA6!;
%TQJK:ZXJ`N.7@WKP;pISg9X0K\F)5i=\Oo[M_hH4K^c-8DCB?b1k\c%OKC.36$^)aX`bPLR&YPbU8F+-P0<U9h_ZSH\Y"B37I,b_
%6T7;F3P"m/SMEQ<b4\`=/7UfgaZ/%TdP6R2RE&V"-Wb!P]_CQ-#7Fg$aJ<dPr\6/VQTuahOtVV[pBo6CgD/,`'3][`B;bt3`/3Ve
%'*B"5$.%:/ReF!H3*"Ii%g`tEI:u1Ka_sf40d"[l,p3?J=a#a[\l1b%]S]uY6cCG@LBX>mEYT=+%!Rrr,+j#cdg;Zf"j73t+)QHt
%^Mbc\DW4G@#OEc4A*GW(`@<WFq2NKO2'NZlq'focaWj"'E9?=T[DKbX+-ATOM+QfnO<e2H&PH_k-UonYnflL<O+O>>:Gpk7kr,$[
%M!eTV]Bg-WP[uC541[Zt+`sItZ\9:&D+7&1^Y%h+Fq#j[aG5L$Nrj!c543",Y"%+`FY8U'&`K-`oN9#L<,BXmg=YO\GhZA6a'WJ_
%'raN@BingL?fn`r1uc&e]8Qj=1]L-+QME#8^e&MnW5M),q)ia5(IPE/C%[%hS`g,<\YMar)Y`[V;%=/1Y(a<lq=</&2FNfWhRGt<
%"<%)]p[QP;*V9..nKJ^7*J[m2(\>Q#U3-]kOMnb*ZNRTH]IBEfW^$\dd99?];adugBd$]n)>L<SXBdE<:.Q/fATfjQ*1S1R:o,-<
%R8g'/kJlrGJ`N`SV4tO0&trMJZ?:G8k2I5_7O*.g#>Wb$1UtLl%9`>%>kj=Q^N8rA.*bu+W$"2t.m**@9S`U/"Ur@[dliOrV[25?
%22Y(hr*lVAN?g0?n&l)ng=*;q+n(pn/PCieXL#4Vk$TXD<\US9o,*1_CH6HJ<Q^l?g#qk0cIi<ro3TE9QB`Hnb4fa2Ft!.F(+<,#
%J9W?E3$q2XWN&fI:\9Ad^3?rJb`(YT3'=QY&E,URf3K;fC@eEn_7;3/>"lo6d$O4E<,3@`l`33f1jWoK>8L7A%Bl\f>*qrbc!7@B
%\2Nu<.]D]8=5EP=%1LD=-_#LHIEk\6LudPQ][Mr*BYA<>$!&ZuADkX?:cbWe(*b9]NZt#B+<+^58QO1bM(X&%k7iPgVYXmUmkDq3
%3kPNmU,nB\VbMZAE31m'=TA,G[R/gP\k.)62QdL93b,FVMq8@dTq863Xpg"Mk3\6f).gmjVT;0_&sLdYEXSg6)646N]cI3kgs#V8
%AM?G\LLjN66qtMn2E.Z4-]91jkVV;IP,hP7fjY[">OP`4^>uBA%3o=9-q68d./a5'oQA>X]\KpR;T*aD&J#H=V4:)4C9h*53KP[k
%mA`F9r=5XC9^WL&6I[?qiGCHQFomCs[Le2Rom#FB?43IZYn_I$P=gO&0m9:Z5k<HsVmZF$a]5<Q,aGoPs*:R`3DQnskI"SNWd:kK
%WAoA;aI6X\L>g4Jg<u<FMs\Rt.u-`#R?'%o%tbQb^2\^mC+T.Z6`NqBfW0Sf6-ZFf2M\f3d9W>pjl;h/WI^)krO7m4Cc%V9)1.<]
%%^_rrlo2oCNt=Hr.YDc/^c@eT_VA)jW1k=\CiMkn"3P"_\/Lnd`'Um(Ah=1&C?W=VN+FLQ,<&2r3;.Wr9UEhGNlo?,!`LKd1DXq^
%!@3D)X?/&p2j1+bL@D!e-:DID]M7lR-"l<da$lsU4EF3T!IH&;M]Wopd%m&*5)XV;jlaCDjnmQ>UMV74ns;T[U$,HH>uA(ZAUB\@
%OaI%(n0YsmPrfso>b`S%ONHRci(:]3Bgutu?b%R7G-u$cKaNoLqoZ?Ao?'\G?OeHD")QA"3ESQ]qgGHRe&*h%54J7`iY;Sibo,*"
%+95XRJ.fq>,dnZhC_tHNkj@aJrpfr<pP@15dlRf@b;h_3n@RbaR\pSk?BK!Ad/#],2ud>g:bk!@@GbH0n8OWh%-0kL]DK%:Wbg&[
%_T49XOYqaeDc<?>7#W]V"kNH-U,W*[&#3*9A.I,"DYm@MH[d48mJ.AIHM8A9RriV4rt9&u*%389Gqr9?@;VJ[04Q4#o*P3uPlp3t
%YUTc\l7;S!?H%?0#OE(P\>foNgEh.V%eX])i`KUkUV"#co1%)K?mJKSra7=\3!j,"B-srA?B%=qVhXRA@$q3fU5(AniqH.QjaT']
%<]$gCi&FJ3H:=mX4ej+XXlstYa3e2HLPZj#I54Vi1-(=])@93iAr)j)$kO"l83f:O;7B=/lYJO#dt7ao2%s==lU,tZ%q3(8(SJo$
%f5VfTIH"JYD]b5rkD-2LaNaQ-<)GqHRF2G@qq?S=,lDK]"7f*R9-0)[4d]Ag\GZJ#;L:\KaO$KEB8.fBE=sR!%%s&;I3BEf>L<t?
%8^5D3!jRRih;coF"B`7SZJf]8L;=Jq7at^Bojskno`A[DLTPlomq"`2\'[<P=U3qfTZ-ciCgA-^j`j'+N-LVIcE1.I]\s)n/'%YF
%W[[/+>b_V3</+?h/k/l3bQn836T=Wcl@'^S2PWt',,AK^%;??&-i/Ccg%nO./mI`^"2WLu;Qis<hDV&u^Nl*X`@odU*H)mGi#<gt
%;Eb*KLII*S9QB5Gfer#UGNX%L38!4jf(Xkc8_QWQ;^bN\*<FQ)p/^nA4,;!f,j0%-;<#\A2hXJU;9^nd;BG(O-hJg5oC"D5Q70Yi
%VfO$fO\P5FkQa:U,Ue8r1ABuN%tC<qM\0Z@`rq>[U:7Trp^-m[X,+%/.T;D0ce>h"9ToV6%3DRHRPjP&oG53.ik$r/P`QAhX&s:/
%5L;3!]+qi>>)TQ.<6#/R$E@!IYL&L"fsd>apP'm2rH$X&FKSE-2s]ouU<-Zoi^"SXo3ShHpsj-.l?JP8ch^`q^cL7gk(*BG+%:[.
%UgmUUV,ClgM)8b*GG?6`d`&JC0^pQJpJodm>Dl(@#J,(Zhfc4&\QsO[6MB.q<up&<\u3e!\#'Pg$Dj;i\WS(BR8h@[H<Kd\oh>A0
%ICO2(8&_[ba,Zj&rH^a-S-4kf".6PpQ*gkH<jXB_SIFE$%,&Y;KXJjTcB?2Ng$HRH#pM3mKrE=b.bcnS\k7@BZB\%Ug;!Ek@9\M#
%%7^Y?nEao_XJM6k89,53o#YM[Pr@QPA@3<;;Cp(:A===r.$UJ%Ss0T[djM%W=E^sl$,aLf?,VU/S#.5klY24([XpK+C5^X13?!qW
%L$T',SK5/k)2cs.TI3i?oC0_#'W9-TkUf3_j/RdOCVp[ei?:3O,i?QuTRR:(CD^V`#i90+c*J`#iJjp?:gCDZ%VGcuUCC'!6LrmC
%em64R`FcA:g!JhY$"_aF3_^bBW"%jO16>$:^MoeG<=fVeTi?#Dj:G3Q.%ltZS!tW1-96MPgsibNV@hPsZ\SpQJ64DMcS`$n:t>rF
%;1FY49>AJ.NY!.Ejq--n/;D6GMUf.fOQ#c>[t`U\HYCqEHEQ5V_>H(*2ikQ]2)HSR5^-VIli-$"AA<O"38ddYbVZ0;iue8VA8i\\
%KD=Ns0!!.O*\-Vdjjs3]b1R"J7<=-g]W_U:;Nj[>lA*B=@@d_I0Uk7)P?Tm)<U/\"D\&EB(*%P1md51bJ*3Bd#KCi8GXbhJUn8-s
%-TXX=0qEcH&acZ[od]:AdC5jZAs=hc-@_[t^5Q.@DsnVR+Q3U0aB8Ef["t^sO%sYFc)#`F>2N$?R#'7O4_:-$qJA\XB#p-%+N9DH
%(?FdKDgiF`*jEC+GYg47VcisbncRd=2d(R^<pg>d@@;[%J%g*PDE7)rpgmRJ]@Sj85#18aY$-;1*F#IlmcD!Oq;?@Dnf^]/ncr51
%3dZITNKdJLhY9`EB>1ed>PpHP1[9oI&X$"QpgG"JqWOEHqMVg(5Ie9M><\0]@Yn16%ueYGdeJ^6Maq@U-<-57`82tM".*_(e3Q$f
%.Ompc_&\@Hc+&ZaX#`pA5pOoE`-.9)Z0N.C^^(reF;7K'`!^"UD]lK2G<)HNH>JgIPj?^uPTC/?ZDQZX+r!t_c^0A9P7\/G$3lsI
%7/#lC%M@>Y7maB3KgGhP1S"Nj(/":@ocEH/5&jf&&?i#T;;b4@'X1"g+Nlg7p"E59b.(P/4CC2m?0YrkDQ.:P<Sio]Cq3h;'F4Lm
%!i#!>50j_>&-HqBF)dq*QIh'B:\2^"I>LuAW-&%+b^\L?Z[_CCp(Q1Gojrst1bmm3gsqZkK:rohkS8CXNMW_d^h^RI)pY(4I_.Nq
%C$P:51YZ5WTM-OAb1&A_%')qVYFi#(2ufVigSuLcf,<sD#a_-lZ6/jXV/5J"WMO[.1.+7tf!NE0dq83jKb;r'me#mVQ?41ZFL`']
%.tOa<`J'LQEno#1:^<p%;9TM.&YQE:+c`s"6O(HB^9V<aCb],))s.d=?I)EQT.h!Cln0-,?_J;ORgH1k0BE@_B.j"*B3N-Jp4@b/
%ik"OniQ>,L:30NBn#!K:U5S,;VqSgVHBN1MgjRlB"$R(+>k7U*PX@*)nV%aUU?L5=e`\:!aWb6G2VH<P!CA>A>0?<M2H4I^cRdBg
%$ElG-am^(?.no;%Q!69.f&6ZI=gG='Ms`Jfj'td+lAi6ADkuE'mN6@.qgmFZ^*t*5Dj'Kt6q9uSPS-nqNZo3[D]fbP<V@3C=P](X
%f`eL64QcJ=<q[3U7FXi[X`?Z#p->YdKKM)ep[*t,mJ.RCg%3RpHRZVMIc/D'3XBlOSo:@B)A5u7acs2WCtV`4>9`0kjf4p%<[uZl
%NH8X6RGp4u-0*6KrQS>`>GeEpB>j@KQ0p:n5;4QKgD!:Tc@\H0*c5t%jtOd*fWE`U;LK7%cZZm8-!Sh^p2r4ak40_mM4T](6T(DH
%[DeS5hS4q3)N1+i]kfo>-)4s"i]pu%ia/,bZQ7,njL=jkaY_Q"Reo58O^Wk+_lT=2S+U$[Xu!#X6pMg%aN1,gf;cI&b*hNc\/j9[
%8"0dcpiFtc,d@Vu.&O*U9bh<UimQ5Cki2;lgW>oG>X5?E%toluJ6Z`c<&;,fZ8&F0bh]Re:JjQp6@uNa6dW5V1;A$<+@ei2[+MeF
%(1B,PRb6uF/u%m+-g=dVOfffK"mOH9-o.loG_*l>+k2^/m#F!\:dOJKCplmJRmYF\-\hCuON:tuBl.g^jr#n)>%hHS"I2@F9qG>-
%PQ`-q;*/*[JV9($+^J?I\AiEU'Zc,D;8+F*j74ZT1+.:^W6+=ibA!-SSQ<:nR\e!lGG#VPLBH8Bq[2+l&:L+m2p$pc&:,J&J85AX
%+50^9,O\#b&Gk'rFbO-9>%!9d^f"H2'[YP7m:!078(lYO?i5TF$5UnK_(UV8p"gKWSl,#,`Wb:RSn)aonR#g&O4^(\IXBttKS2[D
%iYm5T;Ai>=(pbY3#a%&uLK!jQ3R'SmeK/M9AP,?gq^)b"8f+2\drW3fcouBTBWkpOV4a*s(U>,Bms:tl>fcTf9Z&JnPcCP-JZd@`
%XH1##@pmT:Y.+;kZC`fn.a=FuhO76@6QH\ESX.jULt[85J!(7N;+`5$X7T?.:P=_pF(616-OPpMkjd@aH8>D`<%K"[MS@K2)5a)G
%pNh:(0a#Ht.b3n2:QPImjbW9T?4@eF`II+h#ohiCAi-)c>;UiZVjU0dUk^[hcqU7;)/sM=B#l`iZKOPXVrO,*:G7Ht?5lWgl?j8!
%PJ=i;:S?`qML@3TSMtVE2*!J"qlT2i`jD@uc]%A*?h&a0q$!gd(Dt6?"[0uaiYQBtYt<=RW6BR2/q5&AJ^,"\a+dHp`e4BQ:2&#p
%@1K]O7mYJe0D?aXcBV@Fal(;=dd.&:&*p;L:)u3NU.b=$dNLOYS"LT[<JQ^=HTfMtk-oY?r=]U>CBY/#<8L?_kXG1YX*Q3><Y&>Q
%7pMrZ[Fo!!@&Qk-ETGdW'TSE$Vqta93.=+Q0I%PD@sD-@4kBcl`O-5@$(2XnEB6Xlcb>9cqm^HB](_p:*g_<O=1XT%GDb>Q!qL[$
%dG$MWdY3VDV(aN^[QppQpI4TnEi>?mq"id8T5.Y7([%n=Sr9$?q<p_dHX)TFZ!;r]J!^3i/j'*)C7K5c><k7tJl8R<`osJebs0ir
%BN3&EjH-D,+<$D,nZD-_qGp+>PqhF^QV`i7l<m(>$QtU*qG`2hi)S@!UQNZrA(;u`r0e1u`p[J'coJ#Wo=;$9Kh(Tfg*->L^8:B^
%E%_>7q&<3*D5OfG10Tmgl#Imkd<jPbmi)V#Kh%K:S=YtjmpM5Ke)7DM_+gJ2iNKOGs5JhZR"U!Yit50XJuJFL+6]510>OsA?%$mK
%b<JhSg&\QMFaqO$n4*-Fp(or4:#-*GcCq*FVn2H,Fc&jo,lm!kOKQgn2mRmLdo\<D"eIb?/)p&#JE;dW#>WMQX(V0<JlQ(2\NM.8
%B/,$e1UBs7AOYlc8U$/9]L&<K^1m@nqoXqPDJ!f^gJKm9%3e<*Tn5@(\rl4/(ll(6-mZbs5W?fBD!0M)[dG9cH%#$2?:Nn*>BH]n
%Uka=LqjHnW>*#o4;U74e<)b,>/u9:;RO@_QlS$K7V5K'KQG8[_JBA[*_F)9dXd>Nl,Z$<SiQ)a[P-s"E>$)WfL:,!4oI$pdd+cbK
%K"VU..t0XVijsPg(j>UBp@^$fVYS8eFmgto5B.@IC^Dt@osl9bPc0P[&a=L+O.pV))%g%rDcc)mYJ#a@TP(.k^t2\KXQ(R`QQ_b#
%-d`f;3HE_7kt1Ra^DL0)BmYF'g>e*XqG-Z==0+)#%Me^5oo,%jnGt)lp5gZLgWL*_d-hQEh6(t-+6XZO7PCi@mREm88J_..H-*_?
%hO\:7)8%"0pAU?D\"<^jomk,>`?:j]7`c_^o\?l"E=!CQ?<BJ@<A2Eh*<IK-H>HYO:l#1\8.Ys3&f%-kHofD>Ir36#(46^uqS.=7
%:RmF9$mXVL$#rr&>*:doCiDB56/>nR%r\_ITcc]4iW^/@r$bdD'oZ9$4Tkq0T.tf+;8,0ek-leq8d"C6&F.rPd_TAe?M4I''Dfn8
%Zga=.;6/6CisOEu$F:Ig@?aGS*Vfi]1P6s,5:'O9d;O(3Z@kO4Q\W5!mO&(LYhST%i\6])^j>i\8WeP!"ipMJW',sb&!>^9Lp<U/
%8BQfm@i3eQ,6Q@KZaiT-&Xa"H77sk#U6G*^1Fc7`\hBO#.=somM9Sg2M>rDf-rjM'-*&!hOPClG_hbu3??Oa<,=.VW]?CfLr5TZh
%Ee%%J9?Ms:,cOb_4Sd:@5Ics8,)U/(7od0VB8^6-#f/!L"Dt$R=7Bd%\kJ\-`59YnPjN+p:fY03&qe%.`N"iDPo<[O6C'K+m(MAf
%U_An+qfQ)t4=s0-&*_qP],K!<e`f0C%qHnQ'R!B7R<c4N'uJj!][<\&RT"/W/:ZG&g"Y7gr'WmHN5C^E0&)t3U=n4^U]hEr:1u[)
%k#(jGp(osbg-,4D3XRA3XmJ\T1!`;[aC_HIL\-ZKm%1PR_;_85-+Lmp0GU</HB-tP5!Cbd;AKE]6J.&OTg$If=1>pUrUqC;B6EK.
%<\%h#ZkPYr9<Y(!:Lo5(M;aAg'+M8<DZR.'ek<VN\2BVQKBe.8cY3QL3I(+LhcVS<loLuHP4"#:R^3ANWS&iMCp!Gp+6_;l:GF;I
%m[r[P:mj[APo1IQggeWA-[>!AAqj,m8'!W/Dht,c-\i0^FeG"eAhg^J4gX/I-"SW^Cl;H>L`!QMk&DQ(Y=6pm6"RrA.sd4SXF^DT
%]sm=8/2sj:h[Sd6j@]Sl@oD%Y-KQUtNX'I^NlRIQ[N!6%a>k`KCF3t"UK$MJs81JbXU&h4I84BT8pNN;ZqsZN^$Cj:r+7W"Yp/Jl
%3"G+XXVP'D=ZFH#1(/ts$.Z(-[2$u#6C'K#R>Uj(ba(0MV4R87os%3l#+.,+,jSoLNWb9ga)XB&`SO8qJjnJ&(ONL9"g(V.J@l<"
%B*iE'/pZj+^<&$tW-JPO&jF>UgnHZVX;HPB=]'iQD#Y7=3oV_`]a"b>>2B4q2c`7WR%;A+jlDMa!k<u,:(G[3)RGN\-?jACnpoEo
%pK3lV<An,6g9a5r2'UUE66-q'6uYk-I4l.[[*L2SMkB@`^#J<rWhE9PI&357)e@OD[FVW1`41Ndlr(Nso.I^mH,VL0ZuchJm7/tM
%Z9?M1$tC3hkQFA05$W=jT=mYG317cqXZGMG[L8ca:bcDJFETSn4Z0C]?,$3+`gO4@[cUGb$W!h;_ogF.hH7c"hA*PdUY]K_+<*?4
%[[RSad+]\!UNu5)GAX)*i*qV7*\]2=DM3\>jcAJN`X+4umSJ''2;'Jtorb!/LXb_p.hetVnTj/jSZ\2E3[g\k*QdI'L:kd68dEk#
%"^Ga_U6.SecZLr/Dt];)U,c42kG=*=be.Q]`U?k!U[us?pbq38kb>GlX<mY#Q3@i6Toe?r"13]cPj3@=X\<(Sk>QI85Me3fV=Q=Q
%r1'JIiZN/K=+Bo5PosIc<nYT!o)W;Khn,t5eFlc[h)9>o&j[5)f\5AecWIldrPe[`G!^2$Y(i)gT0q+U6'G%96!bWjnV%#RS+^Z&
%J7qKV+3F?f8%@!"mfhb0!ba1u'4j[H-_rT_0!D[")dC'(S1EP3H(Qf;]<<Eu[.?:<SE,j3[Luqu#2SD68ZCmH25/ep5+V?QQW?'&
%L%6tBNH9\cCEaU7Y4Q/]_XFeem`MlZh2uc;nMoQ--KJdGXE;[+_:D^H%-;UZq$l/Q]=]b_D6A@J&oOCj2X`G^4,Z_I%!bUhM%79f
%*)PJZ+Qg@Co,?BZ.:MWdangrhWS+Op$@2/f7=4@7M`XmZ$?%!H^"nrEPKPbH[QDS$5%EM;F(malA)Ib!DraaTNeHCN^<_/<.hMf%
%0+_WZ4O!\U`mNk`ou=lg(U>mk@Gu9`cF,j/93uD(>JdKK>JCqtTD'e'XCgAOC]E]8ARqGKg),S@53M=9]OC^k$acc"Oh=J')P;Yi
%OQ(*0!E,bDL:Zh,kH)..f$[('VQ4k^^<??USUb#%fZA8B#.&,H%&Ar%L_o-8e*k@$>dN!^n"@;*:M:Y6^=n=/]OeM6H@WYLDm>jq
%F%0r4`?e]O<G,\<BZ=ZrE#:/p:h[Vq1V1,,hO6-\^u[cKmB4BPQVK/XO0UsED+7YG`3j)lF3b%X73**6$Jjn<[P`Q53tggZo]a$7
%d(Ypo"sSr%WI6j)"p/*B\GC,VaKj[*=f\TpNc]D:+3F?^V`[o>D2\;/!m6(.,23Z/_gTPZ[5<*RSJb""r$^G9`f%3CD\:BrN]bE>
%b)Eu''G)]ocHml@%p2drX>Q[Q=+34!'-?IDh^kd)m&g,"r@h6dTmY6&/aWmNo%K;14dhlSAuUbRRJ.R-N?MJMW_"rV1c\0o#sG;&
%5dCH3Sft,pmA3[-\-NM^GkND_;YVf)l8H<eO00iGKA<&+o2&q>$Pp'??BdOi7udgS[[X#E`rOY"8Q3E76-10-n+/_sfWJ=IaL3*'
%DP=KBeD$&iM4Dp=X5+MS#bOm!lRCfQ][+qc[:WE1/POU,"'#o2';TT)pN^\$-'ipQf1du@TCj)EISmm(hIk0`F*><_f*.F`BaP[?
%P1SF=]+d&:_N[9Sobf.B$pIk=?Y'BY:Z[6XT]BCugU4D%S7;dZl:3Tni@qYnhY#fe,IrM[%3$d@HUT?Tco%jEV`cOQl]Q.Ali3/O
%T>4*mE-%M&?[NU@'i;kH17'Bph$T^ZhQ4@Vh9maC"aL#GegIi+Fp5r>,%?#7U?'R&TklGImdo<'9!%\<@C!>tkC#\WHoSEje?!Z0
%0']B]H<cP)<bn3#(9\&3%/Y/'B2Dpr?n6e_V6=O=r4Fi4_C8n9YP*D$gKf[+/mTLr,?^X*@7R^<WpG-(Gg;Q@MPK77;W*rF]$"l+
%1VWQ]_XdN(:LLf5Z-W4(@1lW^.%M&Q#`lEj^Nkq8G#r-.3i<)FfuU8_o7">ls(_R`5etN,SEqLlfY^?JRJ/21*<9,M9i;68S9^qM
%$'Ub\D)1:%Vl\qd1:2l$Lk2uD)S0/gOkK4+ThOmL/bq+NU9)IcZ8L0hrR8k+jNp!]m='i3Q\;nH:>B6I/3YdlB+&](?kfQ;\K.Le
%4;3J-Ok;$7M.2=:#8Uc!%t+aG_BcQCMoiPQ,D7ANhLs)uSnfNobKDhlb%ik:2p4*$ii,(Yn+X]IVhC:UnlY7phE48cf$-=;#ut,e
%D'H-j(M\GEKnF(OYp%/F&>S5;3\,tj7FgEE?/D<(6R7=(6F'#n3`?u8a)g%d`?'as@8=L5S>*0Pl^ZZj3R'Pf'/Mruf];'hEQgi6
%mZ=Q]2E^G%W&UijlT9#o'lt-5=Sql`)KUWh\h`EC'LdOU1$Y=Y$8RGdV=##0#L.O(@3fAULV'WDr[a@?%(6[#ihb,I"c6F[L-agJ
%dK+?`Y[NV(i'-VZH:5q\V/nGe9L6o<-Ki&1SeQr<r7h],2K4D+a`CU[O2S9uA1CC1P/]2@;j1&q-=f/nbd61AMfX+]3>!']WN.S=
%RmX>XhL$_&@?C#T?(R"!oNYss@Nc_XXJBsXKTCe#HmJ#6P[p>eh;E*e&Y1Xf7(oll>@JNpK,.;[(sS^J`9e'1*[MHT25+;P&0X-i
%7_A1rCTHGRnuTOZ\ZH6)&Eu;9g0-DlUM1jn*BDEKk.2T1FLGI>qlV#7VPq11EO:,b6e8Cp:!D5KeE-*&-l\4Zm)?]NnoU._9Q97U
%XTPEQXC*dJY"LGFiY#TSctY'p.i]"k*^5na$.FF=gAFLqig^2X)T;XnSO"#Ye?\APJ&%]iI+s^gpT$;)oVAuOKOX/V/r$ZC(HKt*
%UC/EpJ=g4_MkTZm$*_^MGcpZ*XsIHb4@>(tq]P@>-cKc%[Q_8a+"`JQdams>OuL!,dJEZ)hOBj6llml2#=*,VSrgTQO7GKpEgchd
%9NE:N>\:bI[H;\jk]^BJs6m8ih9r/td;e_"iA9h]_8%no7`Q@hLB>7fUTt#Z@^=`reS;V;lP]a`3!*Xoqtl&mBF4UOGRUL+Y&<[W
%)@L])#pQa=E[a%eg<:C[J["bAILOBEl3Z]Pd#1DuL;O7QNkc4dZ)$u'+h*lbI/DuO?5@9;C>Cu8nQIu8S+8:Ed#or<PN"0a$&99d
%Sj`<?QBg%gcBQpHQXUWL38L#;],V.Q0S#oTV9,Fr_-+T8k/2'0&!6=No%#"OEe>o]Y,u%D((6`;c1k+8Eq:pqZFnJ&eeFRBiaT:C
%jK;"@Y?@,.Hd4O\BZ:lKO6lLpk+IRP,BdpEeieX:Y;9fD#u-.a=#CXi9==5o_sP%$b`f`.HYhk&_d\X)fNlE!b_gA0QGFcO6?]`7
%$I1UAY8(^;hIPsVo?fIuqMf<I]W5X<X'#F`MdZ7d7]gHf>9o[7nsZeo.k:p@#o/L,T5$>J</d.RT*s)/#:"/<-V;[e.>20LdFZb:
%<bDHTac+H44&YO^\S^E3c\>P6N0I%&23Z&kL=<"@N=u`l)+/7J6%a4rX1$b'jG]BK=37TV!Qh\uEo[YkXW=W:4DuY9eh%skOH".d
%X2sd6;:c)8Zc7%:igW^M;:W"`QOs"Hk.73FA=#8dGuNdE!UAQ=7)];J_GJgV9>!X\oY@s)6Lg9oGmqDdD.+PrS7JR/@HHi!Mp;Al
%ahYRmYt<Vm4M4;U^!NIB?SLe+@?CKh^Ur0AFh^'3"0nB9p:V_-A+YFT)`P1\BcQ[i01*s*6M[8j)5@iXpG&@*\Z*JCKo:P]ZR4s[
%,<n9"<RGkN:8NR\cg7TIU/C98/Bg*8Z-i&=%k,Z8U21N=OL57Kd:W$)D`!O++EN%.JsiNbf"=aUPqbCp@AT)5J>LAW%8bgAm6=*@
%DfVXA$\a@3UgY"`d3'(UfS1Ag.&?t,,>g^jTTrD+(?59aHaAoZ;uLmH,iamkfa_A\Y`JB>6`A[iD0[iq5psOG-:@0:8MaCH2ac'k
%]P!pM8'*82JLK/gY5"=oo0.e+fT$n!mZ*qHa8*MPF"E!lS]*'YB?/VlJLH4thE1JDKq3W8fU=(BgfiLhB:iZ8@4mkujbGQp[5rM0
%6Q,?5KQ)JpH-HI9l94Es:hBd$cMI_XLb(G:S8'Ka2h<qbBa@M]QH[;*P4s-$,%H(lU!82Uh<04'S$jc5U4l$a]qUM`o)aJO,1SU_
%o%re,Ue9j8G;I!rqlJ,Jm1(0IG1u&"QPEb)Vks>`Ge_F8G,G/=,@-Joe3B/e)/n5]&q9*icaQWsjP//u$BWsCnUr&o/37u.H0p-J
%,<8%7?LM@O,\3Ssm^#+9!)OMoe/-R!`![^((n3-<-Hi]+6aq-BKcZ>HM]qCCSd@\2Uo"UfT6^o(BB'+b9RjH@DT%[qA<@Rp5Z&\f
%0a$34fFAo0`X#PNok=b+>scWMXC&Y*Zer2h'2sem?'&D,^htkCbdfiY$Wh\Iok%>o[qWjOYnBsH_h=e7,k!OF^,";ML>I=K?0d;#
%N+.ld647hZB0m0SH;DZL9)klL:LRj.<Y+&"9c4S>T5p0\>bWoUThA^1R2cjkKNSmj5+VESNSC7Oc90G`rq2AnK!I:D`Ef01?>J>^
%@_3o@jj`qU]MB[E*:fgt+NZAf@3c#.4]!nZG$Re1\_MeVZh]Jh4Mc6aS$m4/^)VY(7DJaWUBN5uh'hbC[[]>\]<!jqpOK^/L-o*h
%/]'H>=D(sPfr$=k6[cnVU%HN@U9GaWN.ErQIcIYS$sFGfMP=M5n$L>X>g]mtq8jd`jOUnb&j>&Br`T1>n<cdX"HC-8-0;4/\#p!(
%K).S5m-SBRL"?fs?DH`"PB:fS7TH3<$o0BXS&41!ZN[<i7&C.#c+B3WlerqnCc>QtE@[5&OUT)g)T5_&nPXb"Fd?:0e$CSicrVKC
%RmBg=Z:\f_4%*dBotZV(ZC-db*5CQ3X7HLIJ[+'`Dlm#ho"li+ADQ6tXl&_O/3K"+Wb-`'[r3DB+0ElB^:L*W`@q77R#TOp5hH2A
%P8>;^.'Oa_eK#`&Y!Hp]RLppVA.c0LDY3U[]#UKi>&<)Gmg8GB%@"k5\HG6s=+RW99B?62LX<T+GCsIbOqcOkgsd-f+U:OrCDP5u
%.4h'^B@d[NoKh2e!2CGfLi]+Pg-1\e$%5\"B&<S5Sb7\Yl2u$8]%TPh%$2s9[qeHK;l's.+GHZ3)/@Dq[,_H0^NusMpn.?g4BB*%
%g(6>Lj%H6\W20rc):p1hbt<S@92%`+Ri#=3s,@rI]51id4dB89[OS<'fZhM8n6Mt)O\?7'HSU8&^X%,1_WW!@ODu(fn0.l9L[r?A
%:DfmE^pjI'89S4<*h<@l$=qru#dpfqAcDILmB?c&3<:Kn*"1D`HL$l5=>P:\JD4t0%X2$/F:^^(M%4(&CCp1bqF]RDo]EOlhIfg1
%")4&pli'2i-Z%-qLI.+BLMbE8N*JUoo;Q^PCI[X/^j)Vi1-SQ`3oa:['hI.JYsG>>Wan"2%eAPO8@'N'N-=]PrVi$2HnO1*DH#e/
%VKk6Y_S,2>\dV%#"N]C)a;,ei$V,a]$a_?E6CZ&?Q8/!dJVc=ml#m#:[FllOfc<pde5=9gbgd5P]uhOu(9/+ci!2Z'KQe0EWV2md
%0W5-Ib"1)eZ=KoMUPrQ..h(QBM,ne@rru$N0S#E_O7k=hMXAhLg/VTa7!/,lPUo=diaqeuF_E.f+Eq2"DVUSeG)6KN*[YAnBd=ot
%_kW/t]fS-Y<uONOjKB@2!pU(7U#0.agU/RNA"F68#<^0(KJr(0LtWWN-sseY/*Rct\?=Y#]Nn1"$Y:N$"acX,$*@rNglKqf)pCNB
%L_&#rhsFSa_UP1iZ:$jupl(mR2T=9;:!ffq"M@IlCq!%q\M0V<Oi-ul`b4Wl.<H406Ll.O243=$HO[Mt[#H9V6ubr0[9c(]nZ0,K
%MIi*/_kmNYa-uF5"p,sWoEq+ofqp4Hq__Ak/UTV:1KlV__bCmIC^!,UZMlI6pKb5^[B'djdQ-!(LHHsV=+rB&Da\#)%p2QLj;;X[
%],a(i>k?dQ0H+H(aYrX=Hog:h(OUu06eZJ'`I.pSP]]<++*F4GFtF/3U<c@?+3F;2<i*;t\4ZIJ[UM'G4s@I?D,9tFf<Se]GXePE
%Gff]5-M;%6;fLmM'r9E'6*^Q7he0T-91.Lq1D6CFI$F.-Ed)\XRUKfUqN69a_,*B:)->abcbs2u#cD2iL]2D8YMQ4T.!E1pGJ/_F
%Wat,j,$?MXJt+XRX>G[q?B[+*gnuql@Ar6WJSt\_PMF!;_?+bV2HLLu\RrL"GLU_0-4@O`ApdpclJ^ER<on:.*3)laMHobD)mprt
%7XZcH'.0BRaIjat7dms@ZH?@5NG]_[)/kk#0l[S.PEjcBB7*%H[Vd#??ttIKOEl6o?mo$Y3"'cKB5N5el's//JP3-n1e8-9pdT.B
%Qs)<M)F:`$-6*82c"Kh7"nA$4k5Lcr?bK<:DZeKY]++fuZ)[&bXAjo+3?dR52\dZcpJ\@7qe%ZJj-WGXNT,RU)88a;O>#'1K]L/I
%)/n-Tkf^CYAEJB+mg4t'ACJ:MC4`ch':Fh@B=qMC6X[G\!\2ZS)4r)!k$U?-=6J0C\B?cWQT?=?[C_C,CME8M4sTP?I@0O2X\uYP
%1n_6*-V]]sfFu-;1\Vc*f@"&qImumWO#&u[S76<5@BN_90(7;/JD@TSR^F@&N.+Ni<cOudXrdUf^*d`IMXh%Dm6%</WKd@/nVBdB
%Em88ZT\/#MA:][]T?R)\>6Y&T,"\5lChm#o+1$Sj-HhDa3G5^".8&kS=YAqp)8CKuP)BkJ75nH7VZK5:@P8:sYR:W+k"Wl-\^6.3
%H_2Q,#$V6b)ot`#.TeE3WEZ1j#B`>^]/=LRn+=F>9*N;J0<eH[-8`TI$/'?4#B3VtkoGh"Nm(]m2K&ENAh/3Mo"A:C].0G<4]uCP
%"6eug#dYqm+;\0Tgin^*0iaFXCQ?Ocl?j^rPBiD_X,e0j!ViT$Z?j8B_PW&[^b.hW+JC^ZCV&N_A[G<-0kcY<6uWAXZU*mK3I6q[
%X1)h>f":'k7?!j?JKm!'s'!+ZHgQQlEq!a",We!f5k8CdN8<Yn[_"5=iL)$+(%*GPpPdkb4Z1>q$$GJ2`)U4`Ip^`qWnOjRe*F:i
%RFX`k^YPZ4?bIE;&Z%CJ0@*\kOE;"p%sbDUg6s0PMschup7SK7`'_^8*.E4m1DUp[Rr.@Gk@DnUVT@t\8,\186^en;@gKB\9liW&
%%Mk=^]c^?X;r<#nAm_&=NGqip1-_C%gAEAZ':(QPOYfYi>hW';3!OE+jYLr%BM7)$f%4F]\'JU_l@YTi-HHt@m/1U3Va2h0L+1t&
%1;<)d_R-a1&$k&VeUhWMKhhP0i=ikqF7Mk0>?$:/=.r?.bI=GG#:Ri=A?`bnHF!YX*WCT+*^^7O9NXKAocm2cZ/IqIa5uLOc*-W?
%s7VLiI<b@a^\9p:UON@F5qDK3YlFDmq!Hu+5Q0J$p5a./p?$jSoABSomEKQu[f>mLP,,,`H`>[X0di@T@4L>0d(-VSQ5]8U;ufdN
%clWZn6A*mXE'bR]O\jTRXH'M4r=_!?XMtI2X#Kcq?$gRXqG3+MfSoW"DuJ/qq3,LA3`jn)J%tpM?a8_5C]X>J>i.HR:.P5dm=O91
%(@f)N$[;Jk%>Nd@?-EL[Q@12GkbnM\-G1"'4+YVU]FMH\kIif^o)8,81'>l`nh&E1*#oE`/^TO"(P7rJp3R>UJ1)J#/"%o6OU"+T
%g-lB7qCD]iaq4_k#"@DT:,!5Nj1BpUe8[_d\UJUi"9X@]3]fUaA@$>0'r)0Z(k`ZO&L_'+B$GS#@n>me)Nl8T+lY?g>2WsI9Vg?-
%RJS:OHN:oc!CZpO5\SROlf_rPnG="\;GZDS=MZZUJ&N&E<DkW7)KAsA.KTo!U&`<nN%o#e+HKu^BIS]l<b8?L;]lENLVfOo2Ks,9
%i]<O/PB.mj*!?[LXHLC*EFWrBatU);rk\2"OVmX*s5Op1qVfKpp"S5^hgYU]q]Gh%bqFYHj]`RQKTO3gI.N9ro]$J>IeVSUJ,*/q
%orHj7pTM@2rl=b(r%Ht*01brCnZSRASIQa`,kg!5Nu#%)ejnMQ@0sZkKUd:k,Jqgg5^&$O8"%,0%7+k([EA?eRIQKFbGK6?qI0)P
%I0[Pg"QMh1<JA^3FME9U)f5[K`]i.^8!Il[>hrT@AQ!=R>UQ>pCR_u.dJFl8aRb&bEPt%0?\DJ:C'(8'KkW*j1$'(1M`Cd!s+N'A
%42a3/B&JDF6Fi<pdH>ufP,eg1Mna]G)KX+V"@:c@"pYtRh;fr6fWS.V)#a*LB'^'*<o)jc;i5Z7AD`\g1nIU/>r[$bLe8S/)>"(@
%QsiNUCBtce#I<LP"*cJSM(S!3P)4X]Jn>%E)rTeSHWM4CRm^]W$%4<s9&4!ojpW$-=qE(.dYLAC0rajKBn-8Qr]3T7'IX^!,TFFd
%?qh/(M&1a`-%Uku"@ToS5[Z/?[n=)+&:u2SoH$*B3b)MQfm\DP;CoeKBruR2X;3M(.Q0B9e$jkKp?Bj#m!ADojU&fk&ADr__7UJ!
%T<$d-LT?W2'P#qV*(G<:;AGE>oa(p>jj"0TC582a=Q4"P6NpjU15Go3"+&r@2phr$qkb'Hd-Lu>aS4otZJXSR)/3#/GL?ri64r6_
%:Zm%RDY*_1hLR:-F.'gg)%Z'"Q_8P+Na"i_3S%c6min^.bq#B%^uD5o6:+k/U\?hHKf7.e-%dO_m-34l-HUpn_ISA:%@H.a@N,#<
%ZaBPpRE\t=Yg,_'gi6]kYM1e(hUTBBXJbFMfZ-Vd@F+r1\SJ)Po5t/YC6/2,&(o5R<b!3EMHBJZ6Ep#H/qKa/]\2cB\D]]jYfU6'
%_U1Ho%Xo)5qED>"d7NDb@:1?B#9UWM+U&"tK??21'7Ydrd9QpMo\DcYie'(PNr/Mi8JK?/,fuH5AW2a@#Dpr>pg>C.+FF92[>X,0
%92ZID?[J]>(:":miY`h^W*[.)/kn/*+%-A:;OSTIWg&GjT0!:(CG7(rl4E%!$;_o(WKen,@V-lDlM1)eD#nH(R*Dl_f!(tjL&l)U
%k6AVMR*@.82+&2OUZR*Jf6=T@6HnaYE?sn?qtY-!!dcTV3onK$DOnJEW\!048cj+[0oU&gOgjO/g.V6*,lfZ?nM,0j/TJD2Djk`!
%Y$0l10ak7!iaI+LV[sdYc06J+SG/]6Df>&Fa6f')VLRMrraQa!l"^Jd0Iu4*@p]H7;';'"amaH#FTVIr,%I;N*1C&M1PoeS7'S];
%dbN1C@lXpk^E'c?"Qd:e9/JJ;JOB/bb"Wc-9;htE8o&Fk85UY0[sX&f_Ga\m6k9`ZE2i7:mt@T0"bRG8E8`OB,Tp)i\?[U2Dt=+c
%d9W'G`o6_WgY!dK1\eU4cssJ]XU!\T8NC:58psM8ARYl3IZfn0QAGEQS^k'gJE1H5[Bhq+5Zf"Rbf43rUlH1!*n8r4hS)\cJ@h-7
%QQ&!Hj%0CTfZ9q_Q!,;5ie8*6/LGV%]$JB:Y?k..-qRbe<r/"Ml'M+f-Vi)C/a?.!+Jghl!H85[$-`cs$Q`sd`ge052GnAH8.J1_
%)L1j_$W;Le.aBbb4-U+eD?5_F#P)_PW]U(J&1,iGbe?la^QE?C0,pr'SPNRF)U09r-qPQl+Z)8K*JZ7FeZ)p?]W,Q!-"-X?1+S$>
%;#KE@2nHqc$+7PKWf`A0($r2*cZrb7>G0/"*L+%s!iM1!O!a,>:nt2IdCca<faMj#eYkRWaRgGo9n<dmauU^_`I<cO+';]C<eTtF
%at&Zt6L\m"MUu\/!jmDWn,3mJ2?)Y@[2SV8P\>tbU4$j<B'V8+o5jcdIRFGmpM]'r9hqkJhc)`NPq*3!UJWZel!i%I,<<-!:Hmn]
%k]E(+h!I9E8N-r40r?Ut5,#XjJ*RC]l]sOZG-''1bj[=\YL*1;IVjK#@^ibMV>><[oIh`\CS0qia.[mr-GJI8#57g#5'"AEC]XG'
%Sn^KH$a_Sar=BCrfMW@=Yn/I0mmsBMj@"$]:r:Ykm,a1,3K=.ZSP'ta=No74='CdT34)J\[%HJD;)`nKe@E8WFs-M/GKB"kN4:0A
%Uq2u6oeEsWH9qKcd%@-$<,#V19"@t@mL*m%.UDQW;,=#_A>uqgZWCL/+C)9(o(iUNemno(e7:nIM-"sokRCaR4!=Fe]5qUNJNUHs
%/`$7'4B;7YrB#'SO4qfT5?3&*O!EU=iOl\t3V`#V,4Lm#Hn-'g!_37ILatUQYZ/WVb;:c8lMAVu2<-<"3itZs'hp>anS!I3g4^E!
%4a[hi`AQFQ&2AiY+nT+15:SA$WmFra+oB5GRm*&O!CA"rOA!5K!f>8.!=2A-E9K($0a7V8MFBTSj2KuC_AZth);#:64;@l(N>8T*
%BL,H@O'C@nRBkF^hS(DQ@L'(=a.NM$Q%6ce,*Yd0-?PYfYl&0)Il3MYgD4pZZYk#fLE<_:Tm.DV`22*KaqNt>40quZDJCj?LOuRX
%VV'Q4@%@E80DK<kKuN%CMMasUV"AS]O/4*Y-Y7Et.O7t)[3kA4I4-$A!sr!eR/sTMX^6;cGp]*1(chrK9dH@16)2Zu+!Xd:pK^)Z
%iftp/EYbI7/W(?#kM=AYgsHj0gZ$frM8-R%YIu"O3E#WCY`1Ih:8b?)l'l#<"!/#a*dbimJtXd#6@!\?[ucKg;f?/^122"kP`.a;
%7,`A4:S@YpXPt(VI2PkXp]u\ZYhZC5).E^8W(tKW)"`KnX@,Uf4no)<XKfscjIe?(qlnZ$F_#)/*sYE7IDRk,nHiYuHBnY4XF`th
%CD*:'pF8#8\nRe0q^sq2\,tinj:<>cHE4A1>KY?^N7U>G`\#[a\Mj1'6^-bl+%bNueMR]"J4)NH:mq:52B#UH:r]=3,ioHK60Sjj
%,Cac*'MJa6N_lYS_eoX2jUqm`1lRkO.0)eU,JV]0MTgc&,[3Mc5qiL2EW*^9poI);+-Q/Z,eku_l`2+?]AVK>m_2JrdWfj;n4</%
%SZWT12]2qpoF@."Jr22?(_:q^^eTYE;0sB#Y`)HL%po.Wb<\fWAa.n3j^SG@E-Tim#mm"be5!^1*A0+'o01bfSfi'YHsd-D_ot/=
%2FVo()5Y#]S-@tCCNf#p8sQG41`2ug^Yaj13X1u2-b\&eq-dVrRO*iY&hFcm:tbF?="$]M@FueriZ06\'/q%["7B0BHF);D$r53(
%FbEdSAUDo'Gp$aLUfDs0>QS$(EL]JN11`ZDeKUsEG="%UO*t.[#hM/'-sF!F5s*ur/BE0%&.piFFRNVPma*T"fLmA]OI-\5J:\+=
%KlEk2,`*d7A*8iY/(($mF&@*IC9V)R:Ci?saej41"CRG`^cmUR3\u_"FHN"R4PCsq%Q=ZlM%D;15,-R=lGd`^FbQrScln!8&&o'8
%,@6<UoR>5;7\(<AgNrlL8u"$il;'ua]*i,$q`USNE0`J]1X0LP?>!G%'%I6Ib/CB9GS_*k/oP@\N8Vs72i/O:3CV%dTeB:"7N&=T
%R(=8s8IlE-73N1_*_=>=jWO%bUs6eJj8Nq])>6$]^3-Jc'CEtI3=lU!a?jY%]ootK*R^COF.p5523J^kTot)V%3bd'#]r!>R\2##
%(M&:F_jt)G9d5,Ck@_335GF$j<m:R4!VEin-o+8BN.>l&r2g:NKABg$;%(<Bk/gjdmK`B*8):m'pClO:)4,_J=^QM!i-ZJ!0l(/U
%`IgkqAntFP;M9FRgDhD[S/rf:a>=JCL@:25O\lCXRtf%#5cO53*/b)L\PLrX1o"rl^o))M9!$\Pg#8&kp#mB8]ru_iTaN=?-4^Ic
%k6'@#!>5o*LKSAl\6k?i#)'qr/hki[]^i_0BD<XXM+6_^BjcY(\c)At7k>cjB`oVL5e_`,CgV2:.AAt.JX_EV"cB7;5`<UjdDp7O
%!>H5E&Mb_oo8&YV:?5Zur.jaV;6`goc7ChaKGl#7_tRGO5N*WjG_sE!cs_^-J4YPdDEMHCi_4+k.2QIMV8L$80b(f\!*RC%Ca"-*
%BbB<B(;4e(df5h!.?-$le[u1T7a29tUj^ET;ae;hG'\tE&T1OL)Me:JGeIb<e(Z)_d8'%<OPZ!/%`Pe#kXCYDlao,(!U[R=@?Co6
%3C\$inL8Go4SBXH1oA+0*ZM5QW+)57+%2J]=@bg(L*j`+WSnFL(p,)-k\gIodZ'91QZi$#H&iU'eRNb*7@(eggLl8]`IK-_K)7)\
%]/9I?mM=mHG-SD]qJuEn]@`I8od=jOA#8=@7qfgJ.3iOK6O\-sFf256d,Nq@-**^(a3'[0'r*ra8-`6iOj\eh+1^MG/a+e.faXo?
%cp05pSjo2hiX*IF?ZPmHkmRp`L4Cu<Df#%)Ib6]P8H=;3QTCO_?RLq\cYS]j9Cu$N)@-a`4TG[$-Ih-bj]?s"@KhMJ"7%"/&VIgp
%(@TSa:jeZU$UMN'6h."$)A1IArBl>EPoYr]l'TVu9b7/eD^p;\mB1tm!T@T[(s.aCG*BC`PK(c1VDEnDm@/::RS;J_&a1em4$g08
%O\u^Gg]`h;.*tO2d10n!&6*O46uduD)k?YZP\;02K81@5!tie/#R#GtKnftrc1G!bqhPs+",7gaZYelCIX]R3C0ukq(k8r)r<6d2
%#q]qa??o*+=eZ(b.1"2:j\t9;$]2(Xb-fRb&BS<6Ob!LSaka<,G$@O.;-:f5`UOI^-p#U`%L6SPdUjso(i37K"pt5T`GOC+\(2%B
%)2mR.-!@O;l6n-NV8;DS_8:GA]l9qnl-la17+N+pTQe=*Bm/)*T_GG]f;N"-/!BC!GNab`Lur=`*FVG+M'JG_eh$*('P59/6Oimi
%NH2Ddo`THESM-HqKX<)4+ag2\^X09Xc''Z1m+akFCW>b66pA,sA0S?#L=f<W@b?hp9*Mj?Q2."trZGZ-oi&PeOVH-Q+36KB%O0P3
%!I=;gas-r4%l2^-C@9NHC>lt^kVV@#8'DE+>p#9X&G)#]7i]X`Z]:cm:Y.8FY+PBU__^V-2i:D9e2g8lnh0\-_%qKo!GX_._fb4`
%l[JN[\BF(n(CKO:.?_:4?-m]H(`!A+N5ID@&Tlu+NaTVLh5eu5dOp>D`eNnUL2_q.#"A]F6q##g&O^#&YZS)VlG`RU>4AL-cPi:@
%e\Vk"?ac=,0_n9C2FTM+AK5N9WO)kTa^u>,lAT)'P/Ef6%+BJH`.G-4\3Z0LaDT":$pg8-QH2<Pc-WJW-[n3U&;G?mb!Z9tbBa68
%-HtE0<5E&%aoS\T]Ydo(qcn8Z[!-!Dr\:lc_ug,:*sW6j9%%<p2^Y.Q#g9W`T.Hm\T>=I.)*.:9M25hJMSh)H0j8o9B-j$Ah*;+g
%<4^t1p3$R05CiHS&T<G!0:b&`XmT]H&X!`)_9DF)h!FQ+;IEJ++b<@[4U74rLq_5gPZ_<6<r@#.@:.MGT/I&RU8%Y:N5G?6&u?qj
%bD\uHJ6I3;N*C&[X,CZ'W2?U?'&$ksM.`JibE/'6g3N3nPr9i&lqs*KW[J2qJ>r[P1*OPK-!5*.rYHVQRhPoh8YE7"&L%:<7I4JM
%XQmau.mou[k.=QXh6K56/7">\faakWc6F`,?d[L2pt:)594$]ePp[^'d/\bS*?\Z3/6-PY2[<R`F<q,8?+\PX.**``<+'=]RUk\M
%'`6]V+9`[sHo<HZF,o5e"sj1a6D0#;ZrO;e7m9[e)H@1skQ9\T8#Ud-P1kZPc,Bl=g#FBok/3LBr'$4S`,&r%4&^aB6nT/*,hkKf
%!V(W7R8t".,9`dfp)#t2<cA?UW5D!/E#SjHb5oS2aa,^<Z0sJP_7U>&AH.LJ`C;A@]Fl;EBk4l;r[nLZhBC4s[kKJ4!<T;WJjjDp
%"^>t5BSYfFWU2=YhGU<H6mkY;\o!V7Bb&e[@+;b6e&+#3V:A?U$t)BM)"=H&FsLhA$6j8K_KdV!0L-Q>8RDN7#!s*5$qr*%&;nH$
%OgS'R@C<Y6,spF(>ZGnQGXg6t5^"&%W/VgVW,N,.4Rhum&P<fJTeP9<7tPU0)aZ8\6Dg*HflWbol#$$B:Ot$ss'4teH.1jpM!NlO
%=@R/FBbmak-q$5,03dI])2@5d++l0E)RpU]>oJ0f$Ap\$7fpcm*;m(L2\3@<c^hcHO]R#&PE4!qbaB$Eb'a/4[5lcq<G"'O@Ag).
%Kfr<QgqQ8B`,Vhegu(kijFao"l&Y_B<4I17O%h_#d/K<AGV3f%7Z7%p8(0&1-?p)/3,YOl]Z!5/3iSqKE5d[A(J!%EiM09!aqsqk
%>lT=4A&.%%C@QQ]UU>436+ds?dcc"m)F.d_[et`(?=:mj3Wi$aVdUZ]\I0mM4]5/@St!/->9L/Yh^[)DKoKZ&0$_1*5(JM]Q&=b[
%J$e]D1gT+$(8B,3QoI2FgtUGN6(aH=^8S!na<r^ZbnfTF=@/Zpc3>TH7S>d$0]bDA6iB2\<*Ap,_2@_OJM<+f!dVMpKfTc33=uT(
%\:_R"RMcK-kTWBe]MlNEOW"]<GsCq1a#bFS-sTXm4TWr&Vqrtnj4>"k6H(&YCaK+SA3&,U/L_/FOA2R8""TNi?mnIPZP0!j(6EC*
%k7K2R;3d"d'Tb^<Gh--rmYL`gBhRBslX!3dmk8U[ia^HBBs@%g7Md2dG(XNFG;$HQktQ`V2hLtd11-77@af+4%jl/SGdG4D">3C5
%(5VqY"osf1AiX@7k`J#+Z"Y<_0h;*=U;]ZXjU%`u`f>bBpdO)<L:mpDC)@iY&Ye#C]AgXM<!OqU-Yep2!lTBn2[q`O61mKOU`q-j
%RN?,tnuFT0OqXOl0M#5j+MoL:'GXpLg+D4dStCVL[l"g\^n(^aE?o$&i4&T[V/3gYl+BV'\q,09-]A%78eD@+fuo/5,dYV%RF1Nj
%8Z%r@`!\6*]20)tPlg:g:o#mL3ogaK+-M57dS$^:2"7ijA1ir0Z"!H7B&piNmUh:PqTe46?f@X[)!1sXWff]d-=Op^?Pk+@qHWD2
%.iHBoPFO8e,T;=?*pXq`;RFlr=0kG0^eCOm#E[MVMSn*b'P0N6,I$.8%FPnoZ;N"7,u[GWn+TB&LUN05cLRAJ4n#_Tra\)B*pIe2
%j+N5GR.;`a9^5A,*0_U$LbX#q'ZfK6$(#BGZK+epU0An<?+-.sa5b6Y/4l_9pdF-'K?Sj$csU-mVH\pK.BtQaUL6`YX80rAp&3)P
%ojqG"aYW5*MY`OK6c0!hp0_eg+t4nL'rf=L*Fou(iG$hoO9k`h"Bl0#oo,n$k(?(ZSY.n\>jV0(26,W,o^E3`d_Q]s5dPg`k0/I&
%5Co&kkQ=U$B@J+K6Ct7g\egQZ?jk#e3Ls7G%l"sj\VQMUTcaFj7bg\RM4*L5Uo;N,oN&6R+i",8\C,:eFRoJjs'QJa)Sk334AI\Z
%G2Qd1,aW]8H`)7;'Kj)7@p3,*:sfEB,(.Pm:n+doEtY:K!FV!T&3HMrGW4?.7-E@,A/mZRZ>3p&CqHie_.##?j>?WTp)B0K1^/K8
%5sPc?Q@NeW)ZZfe*(h`NOp)%:V0=Yaf&;(Bm>JBorWlmXX&$2iP!E\UbRQ.`d&RfBG7_;&1\,4T(4,F1+S$D$^GOIAE8A[\\1,Mg
%9i^"FJRf:T*6;MEb1J[u'>]&C,q!35pYfCP-UD.u@g8Un#l2&\B*D*e/sJ:6+HBVEgo(6AHh4&p*e97:*.0MXdTLD&"G\U-*=`Mn
%8<?7YmRA$3>#k5i#*[V!qS0:>p.@$,ef;P:#6(31545o1k.)*XMia@r&sVI:Q8KgC%qG^$<AI7G!3k2lKi&$SD<4#*#.(eVVMQ+/
%@/1B+X@3tGiFcB1/\*"?hQ;?F_`L;mD`::SV442g6?;:gF[8qu9qG3P.DRK%=UpcV+1#kJroAKke62LZce]&D`;.soLitf6ZSXLX
%7Ue[*m.;E*)U/=BUTJ3JJ@H(S;'rk/N?if[g>7pLB`A*nP&*q1J1!B*Fq"X#MD.c69oRr!SoJOl)N$+^YEMI%!l,U>,4/pF-/53*
%)V"HT9f#-(7^Ou:W(^7<8Bg;Zk@Uj8R7r7o?KCFnUOj+c2]M\l'BM#_EU3MTol]\\?WPYuEu+eB7m(cASKMb%@#+q#i'?q+@#!pM
%g2i9IEK@uX3X(EBcUYTV:(;GTTJ^jn<._UtW<^4P(/se:9kHY:?g;9q'+gNbDkHF'?X0qo!U7i^rqa5Khu)U5Dh%T+?[m.onbm[H
%rUA&bJ,.^RIJ`'6mm$`jhnT39&+@:1d>A<MIdpLsJ,eI[ot(alhu96tr:Y?l=?>ZVpGr,/?[q\H54QDdk1eemSX9,<J,S1f]`7Kg
%DjH\obPqKrn%SVV5QB3imm"iW-s*WXgIE`h[(h(iRr<fV]3kOmrT%npqYT0"pRD*lqMOGdP"-RClG%fFRih[u%r0$)>-70&qV"`k
%FoL)j+/!\h0,pY\7B'qQMWX^obHLE-0.PPbk[,jrbI@N@c%#T%pLqd#GlP\YfACjLS-lh!a-,]E^AmU[+27R0hnO[>js('0@GB`/
%=2NU,^\N%d]E22GL,^cY_^T[^h8SLVT,d6?Tj'q#0['Os<Gikh#b4$6^L4+S0D81^X4r*_<X0)iIcUNSX8DKhpZJ[H:MHlak['"5
%:i'\=btubePNPPgis!fI#`10M.6)0;YaA2T=_gKu&n)1;5qZr$UN$mE;Ac#T5T>lGci_kta@XXN-r#<4Du&T,HG;%pBj",pN-V^9
%XZd#U_),;2C(MnnN2"*qKBqQM`dC7Ms(B'lrql/6G^]VNTAqj,X8hL0hgbG"O4P-Dq0hs0]'PL7B"t^=J(Qpm]:ekf^%S??rVt(>
%2Dida_IR//g(,iX)1J!<0LpiBBS57X[PO<#/b\7".P^b:HPkLm=6bS8j9Gkd"Hi9@ZVGjsXF0VhN1'X^DCO5h@h;6F".TY$R,i5i
%GPDXYPn+Buq!e;h^RWh*HYkbRTN`2J2XVo\/0k83*,-@J8>%MOcoer3!@-UN1I"qOO83a$I,k>qe[>tL@IAaYMZ'/i.gaN]/cRg]
%@.55MI8!Q6o<%*"\!$d%VrW=fa!l;HTfCm'H-<i.?h0!Dk0\OFL:UMUM\[ltd6m=%l&J1k69mAc>bNEL9D@0bRRU-'J<qdtH$hXk
%25d_DdI*sVKPiiQ8>1's0;>5iU\9fjp.'N&8;K*SB8dQ,EN;N%=jWo;%PV5NW;:e0&COd*<j9EN;menXdN0bkA>3k:n)8_0qftP.
%blc+9i3OO/$Q@!)E\q:jBolDgTQ^pel,2eQL&58bl>If>ZEUMVQ^fIKpiBGJ>1f2WarnL(-trpToKZ1^Im/jeIsF@9&iLhu-ZkP'
%;F7>jqJo'-2D5SVDXCVjGB#aYY%ZsM<m@r^5/*Z:+d^IV"k4F31@lft[M+=\EfXc!BEAuoZ.Q#_+YbK86&K8M'70DWjr^IMeMQtB
%HU!LsnHHYt]q3UqX/D:?)WaaJ,/.Z)7C5>ip5NoTDITNeQt^=sGg1#5HYEjeN]:>QC/oXadEJO8U8ZO5a^eue5HNIJ+uc:CP>0\'
%2d80J]C2*:!>,NSoMCtkI6F>u743u/:*fk?A4Wu:e*(tSBq/eF%*LmtYpCDa1M^2fS'Y?h'jZQ55nW)iqc*`H^Q/J&8!Y;TjJI+m
%i1mJt97spbqjt>]Qut*.UqPSueh-)hjTG1$!b6tb2;kft#",q.VHrZQfs)fE-B=q4"'VSXJhEfYd5b.@;qfOGBia@QmlKm%Zq`aG
%Vml&\`-4ANc8umfKZh#4d']a2*]!u.M;0J>q6X+DR<UD0KGVOpYf\Y>/^C'=`*:T"'Go8s$I"'24\_kd'UP4Xb9`b]QLJSY/FKZZ
%*mHeO@]afmo$Dn%,$LD?mH:9QGnF4gJkX:<2MQnKdQq:DDD5^ZQHD/0CM8HRiF'O<5RVZ2,>;&"A$f!q84+1_pc9%NX)U.CJ]Rg<
%POZ5B4:7u&\Mc/f_2^X2m%kX/^ljWqFJ>^XK>lpU`A,$O8Fi=h#jdqeL]Db9Y9NO.4XH$X4S5oh`4j?PN^>4*7)tWM$BlctXP"DM
%`B5Yk>4o5A9>[G3AmkpT?bN$-b$n2P/dS$1,,$^r@/t-?DDI(o7JBp!$Uic5CBZHZ143FA7e>lN0<Drd]e`9(5!gQ_QpXWm8Cm6C
%><7$ph`[M+B7XGtH"QEVm`Gd'C%6rI.D]0KZ!:s:%H]kmp.PbBh,1]k/d]-lOU+fn"sggY9X]!M^(Q13L>QR]?\E#NU(_C"9HL/f
%@=1D]3^rBK0FX+6A3q\!HMjun+e%I,$kSTI&;(uXmt#*@s5U``mF.#L#<2Gh>NlO6QG=n+a&><?OuAhY3ZcARRBGbYRBC5a%I*Z+
%0r&>d:/c(3qFET8L,h[4XVJ,JFQrsE\m#2lea-2Vk>:F`I6SnPXp4,]3/8+XULtTW%Z%h4bj4j&W0;!='8`VRKb=3PDLffrGg+>;
%Ysb5"9>Y30)`@-m=m*PH\4SBs#X#J976N5t"^OT<5tr8KMNl'!lNm;$i\ZlKRD\$H0S.5%XKp7]*QR/s*[8LQ\i9ahcGnM]a&*P3
%qoj(m`M+*T-M4akddDHo&T2'Zin7RJRg!'^l/37EaFu_R:.p.LXlgk\J8SHd^.1M7YNDG.i[/bNN!m3*iI[LHJre7rj:GGE+Zq"h
%<1E<*CVnb40C>oL*lp4358B@`p*Y/`U\@#2=oDB:#QFqYF+445<6+')o>cBuIIBp5!?^itcfpmcTU*G)j>clEPXjL_6E(.=8P$k]
%e5,[`aDL%E+GOR/Q@sA#h/'\Jm1cP"]3P^[)?<q!$VkblBHLV6)]>DoZZS(^Q%^i&^m6g9RIXr1DeRM_Gr_WHDh*g*0YH"842aFr
%gS/aF8$XEagpp_8AAoRNI@#4"V(deos5f2OD;iN*NaW$@7#^@c^>pe,$_sNOeb[H7;gItBqOJu_\7k,ZES_BWHH6jJb;8CE(dLl#
%>J5h.T`9i0,_PSP8bI,OU3,E[4,Fa"8G,e4U'7(Ski[/G(=Y4\^.Jgq\,\.U"aomH$V<rm5m-+*.u>#hBSmQ5lCnGE!H#VW@K9UZ
%.1B"H7BqXSCI5;Q*g23ZVnMEsQ`]TS9rs`$+&d11j"tC]Ko^nn=bg+a5`8aLTIs9hmQ@;!Ea6X$Z!n3iP0f!S&1cmfT>ZUI2bmi$
%S4&-70rN_K/^-5#&hA@t0'SC1mo%++/Q0RdqRB'2/XZ"TWZ_T`*[;REk_n[!'YF4O/lkf/G=u&Z\p>J*YD\iG'BKBBNUB2\#9)SK
%dT3pQ:<b^I,OWKME=SR6O]/E?F#8[%?V>QU]=^DK4Bmo?E.U#G@OB_"no.`h_W<qsht?cA6#7L]_RI1N05%Z78)m%G/t1lPkh#Ka
%!qPSRV7Ba&-I)9ZGoakAN*-Y%:ckkr5(Lb%I+FBP]a[-THdt$Xe)ZHC"R(E2)iJ!aCbJs8YUN2(^7qdP5[30o]?IJUl$58h86?m+
%91`K[f+k,i?ki8alK8m+@3R&LEX[LsNA7e8k7sB99!>.G`B:6!4L-+'fpb+*Ks#>`B65XuiBp2>]hVo/cBipHqf"b0Tj?f0GGi5$
%4//C4@9^rt!-SV^Qt<i/45*+KO5d[_*^.,af:[<uLL>D?=oW4I9s<^q)#>HFpO\D$5j9s3#;[t8;>VtB;%O01[5KilN])b.s6-_>
%QgZOWGcB`/K(!LSi2%YbElqTno!3\`DgF%@2e0*p.^WP.mJYAVXq_;!k3mt<Y=*B,k0ni&hd,@P7*R<]bBuU2k-FEU&Ikj"/lM$C
%/[\_XY;V7?NPX&Qjh"0(,<g%)fA<)If+(J^/uYm,*9K,L<pX-dm,>Nb8!*^j:$?)0P]e2CeTVPEoY\fpprV.S7ts8:"_eB"b$lpQ
%7Xjt@G0qK(0tWPfO;;=7"@?E0"NKrOm(NErf8rCPpM*L%OTM&JG^C3o@V/1,Xe$YO"K%GHTobPjdbo7?b08nP#2(Njrr7F>#YIeu
%lR7b/QVPot=ZdjJLIM/,TXtsu>B/8"]@A!QLu>#\`p<pCfM%Mq:4'=#!G\>Dg(^I.qSCNTjOF!G7WJ.or+>aqaSs&&<7;t*U1.gg
%#n\5bUf27<ADaf-L3ak)SC-#Wq2qGoGC=Nr0DR.h9%4i\<#2Z=<0,-14tW!$&GZIA<<r]#i*mAZM]dXGSC26]0nR8#4l&T`n.BES
%.Rc2G.^VIW9Sa;6!)W_Z6X5kI=/^>jb8Ca1?Yko>m*\<;&jK_fQS&?NNHj_]&qncBZiaGXcNKpZNGcNd_<T#Y?!3JB69KgfnteQ$
%(`Zbi,\5h?p#r7XEj7iK^lfSg='hX!ZZ,7X`+We6BM3i0a<0\mKs"^mTX,<IL;H_.4_:m'03sHCk*Nep<46lumXWk`SZ(01jbt+K
%(*LV6(:4Oa\r1hN&BtJ_@MY.6d2L\p=Wp<B($Id+&;+M=hMIEJLK-o[BJh`%T*&'%:`%2VdM^#;8[o9Th;SJ*NXA>Ff_@d(P%eS6
%0k`e%]X92g+F3gjYnVO;hm\6J5W14gIL2p*:_ms/<#jO!Ra"IE;=`hV[Be@$@0oL'Gnek^72A"6[jCjaY6f3moVR\*14"N&ANeGi
%Z9HXGXDoaTYL]"u9B.i6>I4ZV9>\6k*Q9%\IJ;R8Xn"%C.Cc<P;CY[RY:.:_!O@K_:dbD>Vf5PS+-8XI8$0u]h,Y!LqfS?gfa@%*
%(BJT?@^jZXpVjApq^s<c!KlG7Q/a<Fa765GA.ZpOVmg_6ghG%]_?o3/ZFl3lY)2%LFoqH7!6%d[oeLkT2SXR,[C\uADfF9QjO[V0
%-AiVGb&DIdJ:0GOEDosA5RA>G6(m*8<,/Z?-&"NUloE_TPe`aoBG=5<W&sYiBu;_f()2c4&Auq0-A&3!:s]htaL\%`H;98ef=@N2
%6WEq3,a?29JhP):LS[a]L_eUE)*P/o8Z.gTd[Rb;[WMeA.,NP#k"c79IW/,f]F,W0(?^;;3u!L]p^u(11f:Aq*QT)7+`#/bW=;!'
%<Y7h/)F9*%^=&HP-f7'lQ)cLqZ;(UhOfrt:969c";">Nj*hV7KESu.tqA1j5*0Ac:Ss"YX2jrkpU]7`n6a'q-F7&]Nl#q_Qj1?iY
%q2%gm8uI!#?.lT_$F,#Q<A..iNcoR9/)L$BUR**dBDApQck^6PU?Hr+YD;(/8p3PKa#]Bn`"/GQ_($\2?hi?\,YT!-Mp!3G%qg^j
%K9k+dZ?n928UWbD!%HPQ`G=+mqIa$;L6-/jN,hDY".2CWTH:+O['84+`(*c6=>3r8lNp(N7$!Zjg*JIB1/gcO)`"d35kcNicCgX8
%6O%g^-45RiaF[f&(MLH!IG&2DHAph&5J\P_&7RUo5daa7#Lk\j8U-nJ;ZJ>fY\-'WmXa;RQJ"k]$Y8BgqiTYLoL75@`4T^&!6G!j
%DVhK/JJuq<=XKM,A%i_DQej7Hh"/s@:kJ1uEth(n7F)bu%=I=h'XaXiABj*^/7GbF"t]<B)C])9\lO+uTabQ"Zg[<@1gB\_M+-GA
%;X4?-=8N&mkAtA:h#h429bu?86&bF<-uZ4.CY,lGS[?k7$\5EGn.tJ*aU2$34'G)YMrN.R"6@^rk:cZk"CL/;:t(f5>S;XdBQHa(
%E.%(3NTF`CZY^-:=;kJX$7,on5TX@\:,<^jOHK9)DhXo"Qe)0AWZWZk,(hXr9U[H$1ZWnOcqX+rHs01S!*X"cNN;RX7I.r.o`mYt
%i(5..+X@`li+Ne0DNnSc6pI&Ef][*o0#QaJ!Jfl)pSi6(FaM"7((K8'ka%-bDpTH_lXX)KVMFnep<I>sJS\[iLu4&0R*'"_+hcG6
%_%Ou1Z4firAJVad4+]F/b=ZsAG-:F18D7Da(e?-)L)<"uniBsN\GU;7foKd%G(1$KnBm@8^d-)c*W!9oe(gj-8.,d'6ldPMO'A;F
%0m6$+03h.+2;@]P6QHF$ROjA]rU&+SSY>)=Ud$D24,1(&8t/Pb2V"\Y`"uDn.a9pm#7>/0>^2`?OQ5&EJ;YId!DRL@I)*.*9*GhX
%*'aZK?.'n7D`jA05_g+m5o2-.MU$t#NuY:8p<)LEMRHV504hni;7i2NbjuZ[/K9/TZ!Pp]N'1LqWQQLqIEJP!"'Rba5Sm_LMV9pd
%G#lS*!U<i*E]Ui3^i_4;(7e`<6<stl10et>LZ/t6P&e`lTG6`,J)-A4:e%+cG"k.7/W@(Yj!EA2rgDD14U\$gpL3f17Vfc<kHgdb
%--8'&ABLE$fG5^?O:`"Vft*!>QXhd!N.)k'l-Tih^r#J&-b<tP<ceh>7p/pu[_#V_Ba-C=s'66q[ja=p4.p^#9[rD'E^ibPbXh5H
%V;$bE7LZO?>Iu+2Y=aSX,V))</af-&+NQ-[3Bq=*;@L#(;SZV)"a4]GB:g<lfQRj-e]$*jnP@k-?ZS]9Y5tGCaJjrGI@"(f0)?KZ
%C%QdE86P?IeC`.1Xh+AL2)[^6I.6jVfL40=pJk]:),ML2Ps[VC!_KbW_?T.=j-m,Te:jm+3CBsR=]$VaAFnAQKaesO>?Fl]2d*XF
%lL^N!R2aCMfW<GnYZ]@@@C)W0YQ9tY>no8JWm%shKagj[7%;&J1#9HWG.@(4OCh@)&'Qj]N2+Z(PZ&+1WeIrLecgr?]d/OLgXbAY
%)]p%,)b`*a\P7beTV.ifY%,KDkgqC.+ZFE^CI3\e$%?J`@C&4W_WHH=_Ic52@2"j[4l/ps$l;5^(PN<6D0g`#0J&\#L%'5a*=A8@
%bAt!4=I.'.fN^ZL%"&,!Znn/++*c;RYl5&%ZRTcnIlYmr$%m&+VT*5Mkb57ad6hEM[b`i!r'nhe`eI-$X7\_o>SXMf-<hCc>Mjk,
%4;(F_1nn^jD%$jFH:B&HR5nR^>W!)#i(F9Qb0&D2S#j_JI`uni02fKj;SrgHcWX@>Z`ND*'j'NeHU^SAI@r9QMt?V#MMX,g\fKl[
%<%#pg>a9C)qH\_+FYraPN$9m7>BM!c):egd&1l*D)Kchi?8:N<eg9^Y9<qh$2,dH@n-!pU)RoD,1ag+j10fj2*HOKQ#-kh$#.rtN
%i]oYD>c?H-1s[2FR*`SpSC7a*/Iat2R>!m>$@De\(1'bt>(,Y;f-ibYfnSL1&D.#<DO1o?UD@ORd@=$jI7n:'5?^7_gnXAq.Ardq
%U#LJ?(TA'iHklb5rKa@c^di+F&U1@bS(-t`odWu/]"MqNGZIQ+F9Pg?7B/Groes4NIK;Jn19X8B24+3iNmc8BSBqb\UUUD0mSaA%
%hPV-22J.F!B_#Hd>V9!X>)5,=7`I<54ei`&\CI@"3,8<pX8o5C<4ci9h5m+K]#ec*kp[tG!QrEh(:QR&h4'AX*4<(Z:+4[*m5L)e
%TX?#p[5JMg`1u$V_V)G%gjS'23]ML<>)S]<>>RDE?`rUA02oi9Qi\u&eYV;d$NX]:O)R\qV.qEVZ;uc'[733gFP@+uRI9VTW*1&b
%Aa)+*=Q6FR9R,h+'mJOiO3UiE$_Qm-Y@l?<?Ed;Moe`^XI=)HqMfg7H,e-diD/)kJ\-#o8r.2"0q$$F9EGT[uo:%jYhM.qs2gP2@
%fGfh-jN"M0lm@3Kk"Yi.ng9ET`,`H2%h%Cgp2lRTV-uN\J.ueo\BBqHnRYL?q%8VV?s_tcZ65Y.RLZ+gj*"q!TMbVeGUC<cf%$P,
%bqIFaRm59m2SYo+fSXMFf>0=oi6*\()d22m\0"PIa)c5*[*F8[Y.+31p"TC0Uj0Z&@Sr9sV6r7[[>XJ=k@@FU':8M/h+q[sbQHC4
%CgQ7bPqar`-YQiKmhaOs@=n<=)2MVuC'T4\fB%M[S*tgto)>8qq;L_q*VbQmnG]oSr9#0YJ,A2o++Eo:If$bOs7":&pYUB(cEhHg
%IfIldhu<,imsb36LMu&ImdImi7j,l01]54!r1!`HJ,@p6pjW=&'c]L~>
%AI9_PrivateDataEnd
